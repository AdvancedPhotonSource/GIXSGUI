% ***********************************************
% Copyright (c) 2020 UChicago Argonne, LLC
% See LICENSE file.
% ***********************************************
%
function varargout = linefitgui(varargin)
% LINEFITGUI Start GUI interface for LineFit class
%   LINEFITGUI Start without input data.
%
%   LINEFITGUI(DATA) Load two-column data.
%
%   LINEFITGUI(LINEFIT) Load LINEFIT object.
%
%   H = LINEFITGUI(...) Return figure handle of the GUI interface.
%
% See also LINEFIT

%   Zhang Jiang
%   $Revision: 0.1$  $Date: 2016/10/14 $

fSize = [730 620];
monitorPos = get(0,'MonitorPositions');
monitorPos = monitorPos(1,:);
fPos  = [10 monitorPos(4)-fSize(2)-35 fSize];

hFig = figure(...
    'BackingStore','on',...
    'Units','pixels',...
    'Position',fPos,...
    'DockControls','off',...
    'Resize','off',...
    'PaperOrient','portrait',...
    'PaperPositionMode','auto',...
    'IntegerHandle','on',...
    'NumberTitle','off',...
    'MenuBar','none',...
    'Toolbar','none',...
    'WindowStyle','normal',...
    'UserData',[]);
set(hFig,...
    'CloseRequestFcn',{@linefit_CloseRequestFcn,hFig},...
    'Tag',['lingfit_fig:',num2str(hFig.Number)],...
    'HandleVisibility','on',...
    'Name',['LineFitGUI - ',num2str(hFig.Number)]);    
    %'HandleVisibility','callback',...);
backgroundcolor = get(hFig,'color');
%panelcolor = backgroundcolor;

% --- udata initialization
udata.FigHandle = hFig;
if nargin == 1
    if isa(varargin{1},'linefit')
        udata.sdata = varargin{1};
    else
        udata.sdata     = linefit;
        udata.sdata.Data =varargin{1};
    end
else
    udata.sdata     = linefit;
end
%udata.path      = pwd;
udata.String_CustomCurveModel = '';
udata.String_CustomBkgdModel = '';
%udata.RawData = udata.sdata.Data;

set(hFig,'UserData',udata);

% --- input
uicontrol('Parent',hFig,...
    'style','text',...
    'Units','pixel',...
    'backgroundcolor',backgroundcolor,...
    'String','Data Input:',...
    'HorizontalAlignment','Left',...
    'Position',[5, fSize(2)-25,75,20])
uicontrol('Parent',hFig,...
    'style','pushbutton',...
    'String','Load ...',...
    'unit','pixel',...
    'Position',[90,fSize(2)-25,70,20],...
    'Tag','linefit_PushbuttonLoad',...
    'callback',{@linefit_PushbuttonLoadFcn,hFig});
uicontrol('Parent',hFig,'Style','Popupmenu','unit','pixel',...
    'Position',[165 fSize(2)-25 130 20],...
    'HorizontalAlignment','left',...
    'backgroundcolor','w',...
    'String',{'Data from file','Data from Workspace','LineFit from file','Linefit from Workspace'},...
    'Tooltipstring','Load two-column data or LineFit object from either file or Workspace',...
    'value',1,'Enable','on',...
    'Tag','linefit_PopupmenuLoad');
% exclude data
exclude_tooltipstring = [...
    'Plot raw data and exlucde or include data points with figure Brush.',...
    '\n1. Mouse drag to select a region.',...
    '\n2. Mouse left-click to select a single point.',...
    '\n3. Add or subtract a point or a region by mouse left-click or drag with Shift key down.',...
    '\n4. Leave the Exclude/Include figure open to change selection later'];
uicontrol('Parent',hFig,...
    'style','pushbutton',...
    'String','Exclude/Include Points',...
    'Tooltipstring',sprintf(exclude_tooltipstring),...
    'unit','pixel',...
    'Position',[165,fSize(2)-50,130,20],...
    'Tag','linefit_PushbuttonExcludeData',...
    'callback',{@linefit_PushbuttonExcludeDataFcn,hFig});

% --- curve model
uicontrol('Parent',hFig,...
    'style','text',...
    'Units','pixel',...
    'backgroundcolor',backgroundcolor,...
    'String','Setup Curve Model:',...
    'HorizontalAlignment','Left',...
    'Position',[5, fSize(2)-75,155,20])
uicontrol('Parent',hFig,...
    'style','pushbutton',...
    'String','Display Built-in Models',...
    'Tooltipstring','Display built-in models in Workspace',...
    'unit','pixel',...
    'Position',[165,fSize(2)-75,130,20],...
    'Tag','linefit_PushbuttonListModels',...
    'callback',{@linefit_PushbuttonListModelsFcn,hFig});
% --- select curve model
uicontrol('Parent',hFig,...
    'style','text',...
    'Units','pixel',...
    'backgroundcolor',backgroundcolor,...
    'String','Select Model',...
    'HorizontalAlignment','Left',...
    'Position',[15, fSize(2)-100,65,20])
model_string = arrayfun(@(x)sprintf('%2d: %s',x.CurveModelIndex,x.ModelName),...
    table2struct(udata.sdata.getmodellist),'UniformOutput',false);
uicontrol('Parent',hFig,'Style','Popupmenu','unit','pixel',...
    'Position',[90 fSize(2)-100 205 20],...
    'HorizontalAlignment','left',...
    'backgroundcolor','w',...
    'String',model_string,...
    'Tooltipstring','Built-in curve models',...
    'value',4,'Enable','on',...
    'callback',{@updateobjfromfig,hFig},...
    'Tag','linefit_PopupmenuCurveModelIndex');
% --- custom curve model
uicontrol('Parent',hFig,...
    'style','text',...
    'Units','pixel',...
    'backgroundcolor',backgroundcolor,...
    'String','Customization',...
    'HorizontalAlignment','Left',...
    'Position',[15, fSize(2)-125,70,20])
uicontrol('Parent',hFig,'style','Edit','Units','pixel',...
    'backgroundcolor','w',...
    'HorizontalAlignment','left',...
    'Enable','on',...
    'String','',...
    'Tooltipstring','Create user-customized model (-2) or predifined multi-model (-1)',... 
    'Position',[90, fSize(2)-125,205,20],...
    'Tag','linefit_EditCustomCurveModel',...
    'callback',{@updateobjfromfig,hFig});
% --- number of curves
uicontrol('Parent',hFig,...
    'style','text',...
    'Units','pixel',...
    'backgroundcolor',backgroundcolor,...
    'String','No. of Curves',...
    'HorizontalAlignment','Left',...
    'Position',[15, fSize(2)-150,70,20])
uicontrol('Parent',hFig,...
    'style','pushbutton',...
    'String','Add',...
    'unit','pixel',...
    'Position',[90,fSize(2)-150,50,20],...
    'Tag','linefit_PushbuttonAddCurves',...
    'callback',{@linefit_PushbuttonAddCurvesFcn,hFig});
uicontrol('Parent',hFig,'style','Edit','Units','pixel',...
    'backgroundcolor','w',...
    'HorizontalAlignment','right',...
    'Enable','on',...
    'String','1',...
    'Tooltipstring','Enter number of curves to be inserted',...
    'Position',[145, fSize(2)-150,25,20],...
    'Tag','linefit_EditAddCurves',...
    'callback',{@updateobjfromfig,hFig});
uicontrol('Parent',hFig,'Style','Popupmenu','unit','pixel',...
    'Position',[175 fSize(2)-150 60 20],...
    'HorizontalAlignment','left',...
    'backgroundcolor','w',...
    'String',{'before','after'},...
    'Tooltipstring','Insertion position',...
    'value',2,'Enable','on',...
    'Tag','linefit_PopupmenuAddCurves');
uicontrol('Parent',hFig,'Style','Popupmenu','unit','pixel',...
    'Position',[240 fSize(2)-150 55 20],...
    'HorizontalAlignment','left',...
    'backgroundcolor','w',...
    'String','1',...
    'Tooltipstring','Curve number',...
    'value',1,'Enable','on',...
    'Tag','linefit_PopupmenuAddCurvesPos');
uicontrol('Parent',hFig,...
    'style','pushbutton',...
    'String','Reduce',...
    'unit','pixel',...
    'Position',[90,fSize(2)-175,50,20],...
    'Tag','linefit_PushbuttonReduceCurves',...
    'callback',{@linefit_PushbuttonReduceCurvesFcn,hFig});
uicontrol('Parent',hFig,'style','Edit','Units','pixel',...
    'backgroundcolor','w',...
    'HorizontalAlignment','right',...
    'Enable','on',...
    'String','1',...
    'Tooltipstring','Enter curve number list here, e.g., 5, 2:4, [2,5:7], and etc.',...
    'Position',[145, fSize(2)-175,150,20],...
    'Tag','linefit_EditReduceCurves',...
    'callback',{@updateobjfromfig,hFig});
uicontrol('Parent',hFig,...
    'style','pushbutton',...
    'String','Sort',...
    'unit','pixel',...
    'Tooltipstring','Sort the order the curves by the values of curve model parameters',...
    'Position',[90,fSize(2)-200,50,20],...
    'Tag','linefit_PushbuttonSortCurves',...
    'callback',{@linefit_PushbuttonSortCurvesFcn,hFig});
uicontrol('Parent',hFig,'Style','Popupmenu','unit','pixel',...
    'Position',[145 fSize(2)-200 90 20],...
    'HorizontalAlignment','left',...
    'backgroundcolor','w',...
    'String',{'ascend','descend'},...
    'value',1,'Enable','on',...
    'Tag','linefit_PopupmenuSortCurvesOrder');
uicontrol('Parent',hFig,'Style','Popupmenu','unit','pixel',...
    'Position',[240 fSize(2)-200 55 20],...
    'HorizontalAlignment','left',...
    'backgroundcolor','w',...
    'String',num2str((1:3)'),...
    'value',2,'Enable','on',...
    'Tooltipstring','Parameter position of curve model',...
    'Tag','linefit_PopupmenuSortCurvesRow');

% --- peaks
uicontrol('Parent',hFig,...
    'style','text',...
    'Units','pixel',...
    'backgroundcolor',backgroundcolor,...
    'String','Find Peaks',...
    'Tooltipstring','For built-in models (1-18) or peak-shaped customized models',...
    'HorizontalAlignment','Left',...
    'Position',[15, fSize(2)-225,70,20])
uicontrol('Parent',hFig,...
    'style','pushbutton',...
    'String','Auto',...
    'tooltipstring','Automatically search for peaks. Requires peakfinder.m (downloadable form Matlab File Central.',...
    'unit','pixel',...
    'Position',[90,fSize(2)-225,100,20],...
    'Tag','linefit_PushbuttonFindPeakAuto',...
    'callback',{@linefit_PushbuttonFindPeakFcn,hFig});
manual_tooltipstring = [...
    'Interactively identify peak amplitudes and positions. Requires Matlab Imaging Processing Toolbox.',...
    '\n1. Click below the peaks to select.',...
    '\n2. Backspace to delete selection.',...
    '\n3. Use Enter key to finish selection.',...
    '\n4. Remember to click "Apply to Parameters #" for the model parameter initialization to take effect.'];
uicontrol('Parent',hFig,...
    'style','pushbutton',...
    'String','Manual',...
    'unit','pixel',...
    'tooltipstring',sprintf(manual_tooltipstring),...
    'Position',[195,fSize(2)-225,100,20],...
    'Tag','linefit_PushbuttonFindPeakManual',...
    'callback',{@linefit_PushbuttonFindPeakFcn,hFig});
uicontrol('Parent',hFig,...
    'style','pushbutton',...
    'String','Apply to Params #',...
    'unit','pixel',...
    'Position',[90,fSize(2)-250,100,20],...
    'Tag','linefit_PushbuttonApplyPeaks',...
    'callback',{@linefit_PushbuttonApplyPeaksFcn,hFig});
uicontrol('Parent',hFig,'style','Edit','Units','pixel',...
    'backgroundcolor','w',...
    'HorizontalAlignment','right',...
    'Enable','on',...
    'String','[1,2]',...
    'Tooltipstring',sprintf('Enter the position indices of the two parameters in the curve model for initial peak amplitudes and positions.\nCan be empty for builtin-models (1-18). Must specifiy for customized or predefined multi-models.'),...
    'Position',[195, fSize(2)-250,100,20],...
    'Tag','linefit_EditApplyPeaks',...
    'callback',{@updateobjfromfig,hFig});

% --- background model
uicontrol('Parent',hFig,...
    'style','text',...
    'Units','pixel',...
    'backgroundcolor',backgroundcolor,...
    'String','Setup Background Model:',...
    'HorizontalAlignment','Left',...
    'Position',[5, fSize(2)-275,200,20])
% --- select background model
uicontrol('Parent',hFig,...
    'style','text',...
    'Units','pixel',...
    'backgroundcolor',backgroundcolor,...
    'String','Select Model',...
    'HorizontalAlignment','Left',...
    'Position',[15, fSize(2)-300,70,20])
model_string = {'-2: User-Customized','-1: Power Law',' 0: None',' 1: Constant',' 2: Linear',' 3: Quadratic',' N: Polynomial'};
uicontrol('Parent',hFig,'Style','Popupmenu','unit','pixel',...
    'Position',[90 fSize(2)-300 145 20],...
    'HorizontalAlignment','left',...
    'backgroundcolor','w',...
    'String',model_string,...
    'Tooltipstring','Built-in background models',...
    'value',3,'Enable','on',...
    'callback',{@updateobjfromfig,hFig},...
    'Tag','linefit_PopupmenuBkgdModelIndex');
uicontrol('Parent',hFig,'style','Edit','Units','pixel',...
    'backgroundcolor','w',...
    'HorizontalAlignment','right',...
    'Enable','off',...
    'String','4',...
    'Tooltipstring','Enter the degree of polynomial',...
    'Position',[240, fSize(2)-300,55,20],...
    'Tag','linefit_EditBkgdModelN',...
    'callback',{@updateobjfromfig,hFig});
% --- custom background model
uicontrol('Parent',hFig,...
    'style','text',...
    'Units','pixel',...
    'backgroundcolor',backgroundcolor,...
    'String','Customization',...
    'HorizontalAlignment','Left',...
    'Position',[15, fSize(2)-325,70,20])
uicontrol('Parent',hFig,'style','Edit','Units','pixel',...
    'backgroundcolor','w',...
    'HorizontalAlignment','left',...
    'Enable','on',...
    'String','',...
    'Tooltipstring','Create user-customized background model',... 
    'Position',[90, fSize(2)-325,205,20],...
    'Tag','linefit_EditCustomBkgdModel',...
    'callback',{@updateobjfromfig,hFig});

% --- Optimization settings
uicontrol('Parent',hFig,...
    'style','text',...
    'Units','pixel',...
    'backgroundcolor',backgroundcolor,...
    'String','Optimization (lsqcurvefit) Settings:',...
    'HorizontalAlignment','Left',...
    'Position',[5, fSize(2)-350,200,20]);
uicontrol('Parent',hFig,...
    'style','text',...
    'Units','pixel',...
    'backgroundcolor',backgroundcolor,...
    'String','Display',...
    'HorizontalAlignment','Left',...
    'Position',[15, fSize(2)-375,70,20])
uicontrol('Parent',hFig,'Style','Popupmenu','unit','pixel',...
    'Position',[90 fSize(2)-375 205 20],...
    'HorizontalAlignment','left',...
    'backgroundcolor','w',...
    'String',{'off','iter','iter-detailed','final','final-detailed'},...
    'value',3,'Enable','on',...
    'Tooltipstring','Display in Matlab command window.',...
    'callback',{@updateobjfromfig,hFig},...
    'Tag','linefit_PopupmenuFitOptionsDisplay');
uicontrol('Parent',hFig,...
    'style','text',...
    'Units','pixel',...
    'backgroundcolor',backgroundcolor,...
    'String','Algrithm',...
    'HorizontalAlignment','Left',...
    'Position',[15, fSize(2)-400,70,20])
uicontrol('Parent',hFig,'Style','Popupmenu','unit','pixel',...
    'Position',[90 fSize(2)-400 205 20],...
    'HorizontalAlignment','left',...
    'backgroundcolor','w',...
    'String',{'trust-region-reflective','levenberg-marquardt'},...
    'value',1,'Enable','on',...
    'callback',{@updateobjfromfig,hFig},...
    'Tag','linefit_PopupmenuFitOptionsAlgorithm');
uicontrol('Parent',hFig,...
    'style','text',...
    'Units','pixel',...
    'backgroundcolor',backgroundcolor,...
    'String','TolFun',...
    'HorizontalAlignment','Left',...
    'Position',[15, fSize(2)-425,70,20])
uicontrol('Parent',hFig,'style','Edit','Units','pixel',...
    'backgroundcolor','w',...
    'HorizontalAlignment','right',...
    'Enable','on',...
    'String','1e-9',...
    'Tooltipstring','Function and Optimality Tolerance',... 
    'Position',[90, fSize(2)-425,205,20],...
    'Tag','linefit_EditFitOptionsTolFun',...
    'callback',{@updateobjfromfig,hFig});
uicontrol('Parent',hFig,...
    'style','text',...
    'Units','pixel',...
    'backgroundcolor',backgroundcolor,...
    'String','TolX',...
    'HorizontalAlignment','Left',...
    'Position',[15, fSize(2)-450,70,20])
uicontrol('Parent',hFig,'style','Edit','Units','pixel',...
    'backgroundcolor','w',...
    'HorizontalAlignment','right',...
    'Enable','on',...
    'String','1e-9',...
    'Tooltipstring','Step Tolerance on X',... 
    'Position',[90, fSize(2)-450,205,20],...
    'Tag','linefit_EditFitOptionsTolX',...
    'callback',{@updateobjfromfig,hFig});
uicontrol('Parent',hFig,...
    'style','text',...
    'Units','pixel',...
    'backgroundcolor',backgroundcolor,...
    'String','MaxFunEvals',...
    'HorizontalAlignment','Left',...
    'Position',[15, fSize(2)-475,70,20])
uicontrol('Parent',hFig,'style','Edit','Units','pixel',...
    'backgroundcolor','w',...
    'HorizontalAlignment','right',...
    'Enable','on',...
    'String','10000',...
    'Tooltipstring','Maximum number of function evaluations allowed',... 
    'Position',[90, fSize(2)-475,205,20],...
    'Tag','linefit_EditFitOptionsMaxFunEvals',...
    'callback',{@updateobjfromfig,hFig});
uicontrol('Parent',hFig,...
    'style','text',...
    'Units','pixel',...
    'backgroundcolor',backgroundcolor,...
    'String','MaxIter',...
    'HorizontalAlignment','Left',...
    'Position',[15, fSize(2)-500,70,20])
uicontrol('Parent',hFig,'style','Edit','Units','pixel',...
    'backgroundcolor','w',...
    'HorizontalAlignment','right',...
    'Enable','on',...
    'String','10000',...
    'Tooltipstring','Maximum number of iterations allowed',... 
    'Position',[90, fSize(2)-500,205,20],...
    'Tag','linefit_EditFitOptionsMaxIter',...
    'callback',{@updateobjfromfig,hFig});

% --- Other settings
uicontrol('Parent',hFig,...
    'style','text',...
    'Units','pixel',...
    'backgroundcolor',backgroundcolor,...
    'String','Other Settings:',...
    'HorizontalAlignment','Left',...
    'Position',[5, fSize(2)-525,200,20]);
% -- pos background
uicontrol('Parent',hFig,...
    'style','text',...
    'Units','pixel',...
    'backgroundcolor',backgroundcolor,...
    'String','Force Non-negative Background',...
    'HorizontalAlignment','Left',...
    'Position',[15, fSize(2)-550,185,20])
uicontrol('Parent',hFig,'Style','Popupmenu','unit','pixel',...
    'Position',[195 fSize(2)-550 100 20],...
    'HorizontalAlignment','left',...
    'backgroundcolor','w',...
    'String',{'No','Yes'},...
    'value',2,'Enable','on',...
    'callback',{@updateobjfromfig,hFig},...
    'Tag','linefit_PopupmenuFlagNonNegBkgd');
% -- log scale
uicontrol('Parent',hFig,...
    'style','text',...
    'Units','pixel',...
    'backgroundcolor',backgroundcolor,...
    'String','Plot and Fit in Log10 Scale',...
    'HorizontalAlignment','Left',...
    'Position',[15, fSize(2)-575,185,20])
uicontrol('Parent',hFig,'Style','Popupmenu','unit','pixel',...
    'Position',[195 fSize(2)-575 100 20],...
    'HorizontalAlignment','left',...
    'backgroundcolor','w',...
    'String',{'No','Yes'},...
    'value',1,'Enable','on',...
    'Tag','linefit_PopupmenuFlagLogScale',...
    'callback',{@updateobjfromfig,hFig});
% --- set group parameters on multiple curves
uicontrol('Parent',hFig,...
    'style','text',...
    'Units','pixel',...
    'backgroundcolor',backgroundcolor,...
    'String','Group-set Params:',...
    'HorizontalAlignment','Left',...
    'Position',[310,135,100,20]);
uicontrol('Parent',hFig,'Style','Popupmenu','unit','pixel',...
    'Position',[415 135 100 20],...
    'HorizontalAlignment','left',...
    'backgroundcolor','w',...
    'String',{'P(1,j)','P(2,j)','P(3,j)'},...
    'value',1,'Enable','on',...
    'Tooltipstring','Set parameters on multi-curves',...
    'Tag','linefit_PopupmenuSetMultiParams');
uicontrol('Parent',hFig,'style','Edit','Units','pixel',...
    'backgroundcolor','w',...
    'HorizontalAlignment','left',...
    'Enable','on',...
    'String','0',...
    'Tooltipstring','Enter a numeric value',... 
    'Position',[520, 135,100,20],...
    'Tag','linefit_EditSetMultiParams',...
    'callback',{@linefit_EditSetMultiParamsFcn,hFig});
uicontrol('Parent',hFig,...
    'style','pushbutton',...
    'String','Set',...
    'unit','pixel',...
    'Position',[625,135,100,20],...
    'Tag','linefit_PushbuttonSetMultiParams',...
    'callback',{@linefit_PushbuttonSetMultiParamsFcn,hFig});
% --- plot preview
uicontrol('Parent',hFig,...
    'style','pushbutton',...
    'String','Plot Preview',...
    'Tooltipstring','Preview model with initial parameters',...
    'unit','pixel',...
    'Position',[310,110,100,20],...
    'Tag','linefit_PushbuttonPlotPreview',...
    'callback',{@linefit_PushbuttonPlotPreviewFcn,hFig});
% --- selection Fit all
uicontrol('Parent',hFig,...
    'style','pushbutton',...
    'String','Toggle Fit All',...
    'Tooltipstring','Select/deselect all fit flags',...
    'unit','pixel',...
    'Position',[310,85,100,20],...
    'Tag','linefit_PushbuttonToggleFitAll',...
    'callback',{@linefit_PushbuttonToggleFitAllFcn,hFig});
% --- start fit
uicontrol('Parent',hFig,...
    'style','pushbutton',...
    'String','Start Fit',...
    'unit','pixel',...
    'Position',[415,85,100,45],...
    'Tag','linefit_PushbuttonStartFit',...
    'callback',{@linefit_PushbuttonStartFitFcn,hFig});
% --- plot fit
uicontrol('Parent',hFig,...
    'style','pushbutton',...
    'String','Plot Fit',...
    'Tooltipstring','Plot model with fitted parameters',...
    'unit','pixel',...
    'Position',[520,110,100,20],...
    'Tag','linefit_PushbuttonPlotFit',...
    'callback',{@linefit_PushbuttonPlotFitFcn,hFig});
uicontrol('Parent',hFig,...
    'style','pushbutton',...
    'String','Show Fit Output',...
    'unit','pixel',...
    'Tooltipstring','Show fit output and quality in Workspace',...
    'Position',[625,110,100,20],...
    'Tag','linefit_PushbuttonFitOutput',...
    'callback',{@linefit_PushbuttonShowFitOutputFcn,hFig});
% --- selection accept all
uicontrol('Parent',hFig,...
    'style','pushbutton',...
    'String','Toggle Accept All',...
    'Tooltipstring','Select/deselect all accept fit flags',...
    'unit','pixel',...
    'Position',[520,85,100,20],...
    'Tag','linefit_PushbuttonToggleAcceptAll',...
    'callback',{@linefit_PushbuttonToggleAcceptAllFcn,hFig});
% --- accept 
uicontrol('Parent',hFig,...
    'style','pushbutton',...
    'String','Accept Fit',...
    'unit','pixel',...
    'Tooltipstring','Accept and pass fit result to start parameters',...
    'Position',[625,85,100,20],...
    'Tag','linefit_PushbuttonAcceptFit',...
    'callback',{@linefit_PushbuttonAcceptFitFcn,hFig});
% --- model properties
uicontrol('Parent',hFig,...
    'style','text',...
    'Units','pixel',...
    'backgroundcolor',backgroundcolor,...
    'String','Properties: ',...
    'HorizontalAlignment','Left',...
    'Position',[310,60,55,20]);
uicontrol('Parent',hFig,'Style','Popupmenu','unit','pixel',...
    'Position',[370 60 80 20],...
    'HorizontalAlignment','left',...
    'backgroundcolor','w',...
    'String',{'Analytical','Numerical'},...
    'value',1,'Enable','on',...
    'Tooltipstring','Method of calculating model properties',...
    'Tag','linefit_PopupmenuGetModelProps',...
    'callback',{@linefit_PopupmenuGetModelPropsFcn,hFig});
uicontrol('Parent',hFig,'style','Edit','Units','pixel',...
    'backgroundcolor','w',...
    'HorizontalAlignment','left',...
    'Enable','off',...
    'String','',...
    'Tooltipstring','Provide a vector of XData for numerical method, e.g. linspace(0,10,1000)',... 
    'Position',[455, 60,100,20],...
    'Tag','linefit_EditGetModelProps',...
    'callback',{@linefit_EditGetModelPropsFcn,hFig});
uicontrol('Parent',hFig,...
    'style','pushbutton',...
    'String','Get Proporties',...
    'Tooltipstring','Get model properties such as mean, FWHM, etc. and export to Workspace',...
    'unit','pixel',...
    'Position',[560,60,80,20],...
    'Tag','linefit_PushbuttonGetModelProps',...
    'callback',{@linefit_PushbuttonGetModelPropsFcn,hFig});
% --- evaluation
uicontrol('Parent',hFig,...
    'style','text',...
    'Units','pixel',...
    'backgroundcolor',backgroundcolor,...
    'String','Evaluate: ',...
    'HorizontalAlignment','Left',...
    'Position',[310,35,55,20]);
uicontrol('Parent',hFig,'Style','Popupmenu','unit','pixel',...
    'Position',[370 35 80 20],...
    'HorizontalAlignment','left',...
    'backgroundcolor','w',...
    'String',{'XData','User-provided XData'},...
    'value',1,'Enable','on',...
    'Tooltipstring','Evaluate model on XData or user-provided XData',...
    'Tag','linefit_PopupmenuEvaluateModel',...
    'callback',{@linefit_PopupmenuEvaluateModelFcn,hFig});
uicontrol('Parent',hFig,'style','Edit','Units','pixel',...
    'backgroundcolor','w',...
    'HorizontalAlignment','left',...
    'Enable','off',...
    'String','',...
    'Tooltipstring','Provide a vector of XData, e.g. linspace(0,10,1000)',... 
    'Position',[455, 35,100,20],...
    'Tag','linefit_EditEvaluateModel',...
    'callback',{@linefit_EditEvaluateModelFcn,hFig});
uicontrol('Parent',hFig,...
    'style','pushbutton',...
    'String','To Workspace',...
    'Tooltipstring','Evaluate model and export to Workspace',...
    'unit','pixel',...
    'Position',[560,35,80,20],...
    'Tag','linefit_PushbuttonEvaluateModelToWorkspace',...
    'callback',{@linefit_PushbuttonEvaluateModelFcn,hFig});
uicontrol('Parent',hFig,...
    'style','pushbutton',...
    'String','To File ...',...
    'Tooltipstring','Evaluate model and export to file',...
    'unit','pixel',...
    'Position',[645,35,80,20],...
    'Tag','linefit_PushbuttonEvaluateModelToFile',...
    'callback',{@linefit_PushbuttonEvaluateModelFcn,hFig});
% --- reset figure
uicontrol('Parent',hFig,...
    'style','pushbutton',...
    'String','Reset',...
    'TooltipString','Reset settings to default',...
    'unit','pixel',...
    'Position',[310,10,100,20],...
    'Tag','linefit_PushbuttonReset',...
    'callback',{@resetfig,hFig});
% --- duplicate 
uicontrol('Parent',hFig,...
    'style','pushbutton',...
    'String','Duplicate',...
    'TooltipString','Duplicate current job',...
    'unit','pixel',...
    'Position',[415,10,100,20],...
    'Tag','linefit_PushbuttonDuplicate',...
    'callback',{@linefit_PushbuttonDuplicateFcn,hFig});
% --- save 
uicontrol('Parent',hFig,...
    'style','pushbutton',...
    'String','Save To WS ...',...
    'Tooltipstring','Save current LineFit job to Workspace',...
    'unit','pixel',...
    'Position',[520,10,100,20],...
    'Tag','linefit_PushbuttonSaveToWorkspace',...
    'callback',{@linefit_PushbuttonSaveFcn,hFig});
uicontrol('Parent',hFig,...
    'style','pushbutton',...
    'String','Save To File ...',...
    'Tooltipstring','Save current LineFit job to file\\',...
    'unit','pixel',...
    'Position',[625,10,100,20],...
    'Tag','linefit_PushbuttonSaveToFile',...
    'callback',{@linefit_PushbuttonSaveFcn,hFig});

% --- table
colName = {'F','A','Start','Fitted','LB','UB','StdErr'};
rowName = {'P(1,1)','P(2,1)','P(3,1)'};
tSize = [415,455];
hTable = uitable('Parent',hFig,...
    'unit','pixel',...
    'Position',[fSize(1)-tSize(1)-5,fSize(2)-tSize(2)-5,tSize(1),tSize(2)],...
    'Tag','linefit_Table',...
    'CellEditCallback',{@linefit_TableCellEditFcn,hFig});
c = uicontextmenu;
uimenu(c,'Label','&Copy','Callback',{@linefit_TableUIMenuFcn,hFig,hTable});
uimenu(c,'Label','&Paste','Callback',{@linefit_TableUIMenuFcn,hFig,hTable});
set(hTable, 'ColumnName', colName,...
    'RowName',rowName,...
    'ColumnFormat',{'logical','logical','numeric','numeric','numeric','numeric','numeric'},...
    'ColumnWidth', num2cell([20,20,65,65,50,50,65]),...
    'ColumnEditable', [true,true,true,false,true,true,false],...
    'UIContextMenu',c,...
    'CellSelectionCallback',@(src,evnt)set(src,'UserData',evnt.Indices));
%    'CellSelectionCallback',{@linefit_TableCellSelectionCallbackFcn,hFig,hTable});

% --- Close
uicontrol('Parent',hFig,...
    'style','pushbutton',...
    'String','Close',...
    'unit','pixel',...
    'Tooltipstring','Close and delete current job',...
    'Position',[10,10,90,20],...
    'Tag','linefit_PushbuttonClose',...
    'callback',{@linefit_CloseRequestFcn,hFig});
% --- close all figures
uicontrol('Parent',hFig,...
    'style','pushbutton',...
    'String','Close Figures',...
    'TooltipString','Close All Figures',...
    'unit','pixel',...
    'Position',[105,10,90,20],...
    'Tag','linefit_PushbuttonCloseFigures',...
    'callback',{@linefit_PushbuttonCloseFiguresFcn,hFig});
% --- help
uicontrol('Parent',hFig,...
    'style','pushbutton',...
    'String','Help',...
    'unit','pixel',...
    'Position',[200,10,90,20],...
    'Tag','linefit_PushbuttonHelp',...
    'callback','try, open(''linefit_manual.pdf''); end;');


% --- initialize figure
updatefigfromobj([],[],hFig);

% --- output
if nargout == 1
    varargout{1} = hFig;
end

% ===============================================
% ---- Callback functions
% ===============================================
function resetfig(~,~,hFig)
hFig.UserData.sdata = linefit(hFig.UserData.sdata.Data);
updatefigfromobj([],[],hFig);

function linefit_PushbuttonLoadFcn(~,~,hFig)
hPopupmenuLoad = findall(hFig,'tag','linefit_PopupmenuLoad');
switch get(hPopupmenuLoad,'value')
    case 1
        oldpath = pwd;
        [filename,pathname] = uigetfile({'*.dat;*.txt;','ASCII Data Files (*.dat,*.txt)';'*','All Files (*.*)'}, ...
            'Select ASCII file','MultiSelect','off');
        cd(oldpath);
        if isequal(filename,0), return; end
        f = fullfile(pathname, filename);
        hFig.UserData.sdata.Data = load(f);
    case 2
        var=evalin('base','whos');
        ind = cellfun(@(x)ismember(x,{'double','single'}),{var.class}');
        if nnz(ind) == 0
            return;
        end
        varname = {var(ind).name}';
        [s,v] = listdlg('PromptString',{'Select a two-column double/single','variable from Workspace:'},...
            'SelectionMode','Single',...
            'ListString',varname);
        if v==0,return; end
        hFig.UserData.sdata.Data = double(evalin('base',varname{s}));        
    case 3
        oldpath = pwd;
        [filename,pathname] = uigetfile({'*.mat','LineFit Mat Files (*.dat)'}, ...
            'Select LineFit file','MultiSelect','off');
        cd(oldpath);
        if isequal(filename,0), return; end
        f = fullfile(pathname, filename);
        s = load(f);
        sfname = fieldnames(s);
        ind = [];
        for ii=1:length(sfname)        
            if isa(s.(sfname{ii}),'linefit')
                ind = [ind,ii]; %#ok<AGROW>
            end
        end
        if isempty(ind)
            return; 
        elseif length(ind) == 1
            hFig.UserData.sdata = s.(sfname{ind});
        else
            varname = sfname(ind);
            [s_ind,s_val] = listdlg('PromptString',{'Select a LineFit variable:'},...
                'SelectionMode','Single',...
                'ListString',varname);
            if s_val==0,return; end            
            hFig.UserData.sdata = s.(varname{s_ind});
        end
    case 4
        var=evalin('base','whos');
        ind = cellfun(@(x)strcmpi('linefit',x),{var.class}');
        if nnz(ind) == 0
            return;
        end
        varname = {var(ind).name}';
        [s,v] = listdlg('PromptString',{'Select a LINEFIT object','from Workspace:'},...
            'SelectionMode','Single',...
            'ListString',varname);
        if v==0,return; end
        hFig.UserData.sdata = evalin('base',varname{s});
end
updatefigfromobj([],[],hFig);

function linefit_PushbuttonExcludeDataFcn(~,~,hFig)
if isempty(hFig.UserData.sdata.Data), return; end
Data = hFig.UserData.sdata.Data;
hf = figure('NumberTitle','off',...
    'Name',['LineFitGUI Data Exclusion/Inclusion -',num2str(hFig.Number)]);
hLine=plot(Data(:,1),Data(:,2),'-o');
set(gca,'xminortick','on','yminortick','on');            
if hFig.UserData.sdata.FlagLogScale == 1
    set(gca,'yscale','log');
end
hBrush = brush(hf);
set(hBrush,'ActionPostCallback',{@linefit_BrushActionPostCallbackFcn,hLine,hFig,Data});
set(hBrush,'enable','on');

function linefit_BrushActionPostCallbackFcn(~,~,hLine,hFig,Data)
if ~ishandle(hFig), return; end
ind = get(hLine,'BrushData');
hFig.UserData.sdata.Data = Data(~ind,:);
return

function linefit_PushbuttonDuplicateFcn(~,~,hFig)
linefitgui(hFig.UserData.sdata);

function updatefigfromobj(~,~,hFig)
s = hFig.UserData.sdata;
set(findall(hFig,'Tag','linefit_PopupmenuCurveModelIndex'),'value',s.CurveModelIndex+3);
set(findall(hFig,'tag','linefit_PopupmenuAddCurvesPos'),'String',num2str((1:s.NOfModelCurves)'));
set(findall(hFig,'tag','linefit_PopupmenuAddCurvesPos'),'value',s.NOfModelCurves);
%set(findall(hFig,'tag','linefit_EditReduceCurves'),'string',num2str(s.NOfModelCurves));
set(findall(hFig,'tag','linefit_PopupmenuSortCurvesRow'),'string',num2str((1:s.ModelBase.CurveModel.NOfParams(1))'));
%set(findall(hFig,'tag','linefit_PopupmenuSortCurvesRow'),'value',1);
%set(findall(hFig,'tag','linefit_EditApplyPeaks'),'string','[1,2]');
% --- set custom curve model
if isempty(fieldnames(s.CustomCurveModel))
    curvemodel_string = '';
else
    fcn_str = func2str(s.CustomCurveModel.ModelFcnHandle);
    if strcmpi(fcn_str,'@(x,p)multimodels(x,p)')
        modelname= s.CustomCurveModel.ModelName;
        fcn_str = sprintf('[%s]',modelname(strfind(modelname,': ')+1:end));
    end
    startparams_string = num2str(s.CustomCurveModel.StartParams(:)','%f,');
    lb_string = num2str(s.CustomCurveModel.LowerBounds(:)','%f,');
    ub_string = num2str(s.CustomCurveModel.UpperBounds(:)','%f,');
    fitflag_string = num2str(s.CustomCurveModel.FitFlags(:)','%d,');
    curvemodel_string = [fcn_str,',',...
        num2str(s.CustomCurveModel.NOfParams),',[',...
        startparams_string(1:end-1),'],[',...
        lb_string(1:end-1),'],[',...
        ub_string(1:end-1),'],[',...
        fitflag_string(1:end-1),']'];   
end
set(findall(hFig,'tag','linefit_EditCustomCurveModel'),'string',curvemodel_string);
% --- for peak-shaped built-in models
if ismember(hFig.UserData.sdata.CurveModelIndex,1:18)   
    set(findall(hFig,'tag','linefit_PopupmenuSortCurvesRow'),'value',2);         
    set(findall(hFig,'tag','linefit_EditApplyPeaks'),'string','[1,2]');
else
    set(findall(hFig,'tag','linefit_PopupmenuSortCurvesRow'),'value',1);         
end
set(findall(hFig,'Tag','linefit_PopupmenuBkgdModelIndex'),'value',min(s.BkgdModelIndex+3,7));
h_EditBkgdModelN = findall(hFig,'tag','linefit_EditBkgdModelN');
if s.BkgdModelIndex>=4
    set(h_EditBkgdModelN,'enable','on','string',num2str(s.BkgdModelIndex));
else
    set(h_EditBkgdModelN,'enable','off','string','4');
end
% --- set custom bkgd model string
if isempty(fieldnames(s.CustomBkgdModel))
    bkgdmodel_string = '';
else
    startparams_string = num2str(s.CustomBkgdModel.StartParams(:)','%f,');
    lb_string = num2str(s.CustomBkgdModel.LowerBounds(:)','%f,');
    ub_string = num2str(s.CustomBkgdModel.UpperBounds(:)','%f,');
    fitflag_string = num2str(s.CustomBkgdModel.FitFlags(:)','%d,');
    bkgdmodel_string = [func2str(s.CustomBkgdModel.ModelFcnHandle),',',...
        num2str(s.CustomBkgdModel.NOfParams),',[',...
        startparams_string(1:end-1),'],[',...
        lb_string(1:end-1),'],[',...
        ub_string(1:end-1),'],[',...
        fitflag_string(1:end-1),']'];   
end
set(findall(hFig,'tag','linefit_EditCustomBkgdModel'),'string',bkgdmodel_string);
% --- set fit options
hPopupmenuFitOptionsDisplay = findall(hFig,'Tag','linefit_PopupmenuFitOptionsDisplay');
set(hPopupmenuFitOptionsDisplay,'value',find(cellfun(@(x)strcmpi(s.FitOptions.Display,x),get(hPopupmenuFitOptionsDisplay,'string'))));
hPopupmenuFitOptionsAlgorithm = findall(hFig,'Tag','linefit_PopupmenuFitOptionsAlgorithm');
set(hPopupmenuFitOptionsAlgorithm,'value',find(cellfun(@(x)strcmpi(s.FitOptions.Algorithm,x),get(hPopupmenuFitOptionsAlgorithm,'string'))));
set(findall(hFig,'tag','linefit_EditFitOptionsTolFun'),'string',num2str(s.FitOptions.TolFun));
set(findall(hFig,'tag','linefit_EditFitOptionsTolX'),'string',num2str(s.FitOptions.TolX));
set(findall(hFig,'tag','linefit_EditFitOptionsMaxFunEvals'),'string',num2str(s.FitOptions.MaxFunEvals));
set(findall(hFig,'tag','linefit_EditFitOptionsMaxIter'),'string',num2str(s.FitOptions.MaxIter));
set(findall(hFig,'tag','linefit_PopupmenuFlagNonNegBkgd'),'value',s.FlagNonNegBkgd+1);
set(findall(hFig,'tag','linefit_PopupmenuFlagLogScale'),'value',s.FlagLogScale+1);
% set "set mult-params"
hPopupmenuSetMultiParams = findall(hFig,'tag','linefit_PopupmenuSetMultiParams');
set(hPopupmenuSetMultiParams,'string',num2str((1:s.ModelBase.CurveModel.NOfParams(1))',['P(%d,1:',num2str(s.NOfModelCurves),')']));
if get(hPopupmenuSetMultiParams,'value') > s.ModelBase.CurveModel.NOfParams(1)
    set(hPopupmenuSetMultiParams,'value',1);
end
updatetablefromobj([],[],hFig);

function updateobjfromfig(~,~,hFig)
% --- curve model index
hPopupmenuCurveModelIndex = findall(hFig,'Tag','linefit_PopupmenuCurveModelIndex');
curvemodel = get(hPopupmenuCurveModelIndex,'Value');
hEditCustomCurveModel = findall(hFig,'tag','linefit_EditCustomCurveModel');
String_CustomCurveModel = get(hEditCustomCurveModel,'String');
try
    eval_string = ['hFig.UserData.sdata.CustomCurveModel=hFig.UserData.sdata.createmodel(',String_CustomCurveModel,');'];
    eval(eval_string);
    hFig.UserData.String_CustomCurveModel = String_CustomCurveModel;
catch
 %   set(hEditCustomCurveModel,'String',hFig.UserData.String_CustomCurveModel);
end      
if curvemodel ~= hFig.UserData.sdata.CurveModelIndex+3    
    switch curvemodel
        case 1  % custom (-2)
            try
                hFig.UserData.sdata.CurveModelIndex = -2;
            catch
                %         set(hPopupmenuCurveModelIndex,'value',hFig.UserData.sdata.CurveModelIndex+3);
            end
        case 2  % multi-model (-1)
            try
                hFig.UserData.sdata.CurveModelIndex = -1;
            catch
                %           set(hPopupmenuCurveModelIndex,'value',hFig.UserData.sdata.CurveModelIndex+3);
            end
        case 3  % reseved (0)
            %       set(hPopupmenuCurveModelIndex,'value',hFig.UserData.sdata.CurveModelIndex+3);
        otherwise
            hFig.UserData.sdata.CurveModelIndex = curvemodel-3;
    end
end
%set(hPopupmenuCurveModelIndex,'value',hFig.UserData.sdata.CurveModelIndex+3);
% --- add curves
hEditAddCurves = findall(hFig,'tag','linefit_EditAddCurves');
v_EditAddCurves = str2double(get(hEditAddCurves,'string'));
if isnan(v_EditAddCurves) || floor(v_EditAddCurves) ~= v_EditAddCurves || v_EditAddCurves<0
    set(hEditAddCurves,'string',num2str(1));
end
hPopupmenuAddCurvesPos = findall(hFig,'tag','linefit_PopupmenuAddCurvesPos');
%v_PopupmenuAddCurvesPos = get(hPopupmenuAddCurvesPos,'value');
set(hPopupmenuAddCurvesPos,'String',num2str((1:hFig.UserData.sdata.NOfModelCurves)'));
%if v_PopupmenuAddCurvesPos>hFig.UserData.sdata.NOfModelCurves
set(hPopupmenuAddCurvesPos,'Value',hFig.UserData.sdata.NOfModelCurves);    
%end
% --- reduce curves
hEditReduceCurves = findall(hFig,'tag','linefit_EditReduceCurves');
v_EditReduceCurves = unique(str2num(get(hEditReduceCurves,'string'))); %#ok<ST2NM>
if isempty(v_EditReduceCurves) || nnz(ismember(v_EditReduceCurves,1:hFig.UserData.sdata.NOfModelCurves)) ~= length(v_EditReduceCurves)
    set(hEditReduceCurves,'string','1');
end
% % --- sort row
% hPopupmenuSortCurvesRow = findall(hFig,'tag','linefit_PopupmenuSortCurvesRow');
% %v_PopupmenuSortCurvesRow = get(hPopupmenuSortCurvesRow,'value');
% set(hPopupmenuSortCurvesRow,'String',num2str((1:hFig.UserData.sdata.ModelBase.CurveModel.NOfParams(1))'));
% %if v_PopupmenuSortCurvesRow>hFig.UserData.sdata.ModelBase.CurveModel.NOfParams(1)
% set(hPopupmenuSortCurvesRow,'value',1);
% %end
% --- apply found peaks
h_EditApplyPeaks = findall(hFig,'tag','linefit_EditApplyPeaks');
v_EditApplyPeaks = unique(str2num(get(h_EditApplyPeaks,'string'))); %#ok<ST2NM>
if isempty(v_EditApplyPeaks) || numel(v_EditApplyPeaks)~=2 || nnz(ismember(v_EditApplyPeaks,1:hFig.UserData.sdata.ModelBase.CurveModel.NOfParams(1))) ~= numel(v_EditApplyPeaks)
    set(h_EditApplyPeaks,'string','[1,2]');
end
% --- background model
hPopupmenuBkgdModelIndex = findall(hFig,'Tag','linefit_PopupmenuBkgdModelIndex');
hEditCustomBkgdModel = findall(hFig,'tag','linefit_EditCustomBkgdModel');
h_EditBkgdModelN = findall(hFig,'tag','linefit_EditBkgdModelN');
bkgdmodel = get(hPopupmenuBkgdModelIndex,'Value');
String_CustomBkgdModel = get(hEditCustomBkgdModel,'String');
try
    eval_string = ['hFig.UserData.sdata.CustomBkgdModel=hFig.UserData.sdata.createmodel(',String_CustomBkgdModel,');'];
    eval(eval_string);
    hFig.UserData.String_CustomBkgdModel = String_CustomBkgdModel;
catch
 %   set(hEditCustomBkgdModel,'String',hFig.UserData.String_CustomBkgdModel);
end
set(h_EditBkgdModelN,'Enable','off');
if bkgdmodel == 1   % custom bkgd model (-2)
    try
        hFig.UserData.sdata.BkgdModelIndex = -2;
    catch
%         if hFig.UserData.sdata.BkgdModelIndex < 4   
%             set(hPopupmenuBkgdModelIndex,'value',hFig.UserData.sdata.BkgdModelIndex+3);
%         else
%             set(hPopupmenuBkgdModelIndex,'value',7);            
%             set(h_EditBkgdModelN,'Enable','on'); 
%         end
    end
elseif bkgdmodel == 7
    set(h_EditBkgdModelN,'Enable','on');    
    v_EditBkgdModelN = str2double(get(h_EditBkgdModelN,'string'));
    if isnan(v_EditBkgdModelN) || floor(v_EditBkgdModelN)~=v_EditBkgdModelN || v_EditBkgdModelN<4
        v_EditBkgdModelN = 4;
    end
 %   set(h_EditBkgdModelN,'string',num2str(v_EditBkgdModelN));
    hFig.UserData.sdata.BkgdModelIndex = v_EditBkgdModelN;
else
    hFig.UserData.sdata.BkgdModelIndex = bkgdmodel-3;
end
% --- fit options
hPopupmenuFitOptionsDisplay = findall(hFig,'Tag','linefit_PopupmenuFitOptionsDisplay');
s_PopupmenuFitOptionsDisplay = get(hPopupmenuFitOptionsDisplay,'string');
hFig.UserData.sdata.FitOptions.Display = s_PopupmenuFitOptionsDisplay{get(hPopupmenuFitOptionsDisplay,'value')};
hPopupmenuFitOptionsAlgorithm = findall(hFig,'Tag','linefit_PopupmenuFitOptionsAlgorithm');
s_PopupmenuFitOptionsAlgorithm = get(hPopupmenuFitOptionsAlgorithm,'string');
hFig.UserData.sdata.FitOptions.Algorithm = s_PopupmenuFitOptionsAlgorithm{get(hPopupmenuFitOptionsAlgorithm,'value')};
h_EditFitOptionsTolFun = findall(hFig,'Tag','linefit_EditFitOptionsTolFun');
h_EditFitOptionsTolX = findall(hFig,'Tag','linefit_EditFitOptionsTolX');
h_EditFitOptionsMaxIter = findall(hFig,'Tag','linefit_EditFitOptionsMaxIter');
h_EditFitOptionsMaxFunEvals = findall(hFig,'Tag','linefit_EditFitOptionsMaxFunEvals');
v_EditFitOptionsTolFun = str2double(get(h_EditFitOptionsTolFun,'String'));
v_EditFitOptionsTolX = str2double(get(h_EditFitOptionsTolX,'String'));
v_EditFitOptionsMaxIter = str2double(get(h_EditFitOptionsMaxIter,'String'));
v_EditFitOptionsMaxFunEvals = str2double(get(h_EditFitOptionsMaxFunEvals,'String'));
if ~isnan(v_EditFitOptionsTolFun) && v_EditFitOptionsTolFun>0 
    hFig.UserData.sdata.FitOptions.TolFun = v_EditFitOptionsTolFun;
end
if ~isnan(v_EditFitOptionsTolX) && v_EditFitOptionsTolX>0 
    hFig.UserData.sdata.FitOptions.TolX = v_EditFitOptionsTolX;
end
if ~isnan(v_EditFitOptionsMaxIter) && v_EditFitOptionsMaxIter>0 && floor(v_EditFitOptionsMaxIter) == v_EditFitOptionsMaxIter
    hFig.UserData.sdata.FitOptions.MaxIter = v_EditFitOptionsMaxIter;
end
if ~isnan(v_EditFitOptionsMaxFunEvals) && v_EditFitOptionsMaxFunEvals>0 && floor(v_EditFitOptionsMaxFunEvals) == v_EditFitOptionsMaxFunEvals
    hFig.UserData.sdata.FitOptions.MaxFunEvals = v_EditFitOptionsMaxFunEvals;
end   
% --- non-neg background
hFig.UserData.sdata.FlagNonNegBkgd = get(findall(hFig,'tag','linefit_PopupmenuFlagNonNegBkgd'),'value')-1;
% --- log scale
hFig.UserData.sdata.FlagLogScale = get(findall(hFig,'tag','linefit_PopupmenuFlagLogScale'),'value')-1;
updatefigfromobj([],[],hFig);

function linefit_PushbuttonListModelsFcn(~,~,hFig)
base_name = ['LineFit',num2str(hFig.Number),'_ModelList'];
assignin('base',base_name,hFig.UserData.sdata.getmodellist);
evalin('base',['openvar(''',base_name,''');']);

function linefit_PushbuttonAddCurvesFcn(~,~,hFig)
hEditAddCurves = findall(hFig,'tag','linefit_EditAddCurves');
v_EditAddCurves = str2double(get(hEditAddCurves,'string'));
hPopupmenuAddCurves = findall(hFig,'tag','linefit_PopupmenuAddCurves');
v_PopupmenuAddCurves = get(hPopupmenuAddCurves,'value');
hPopupmenuAddCurvesPos = findall(hFig,'tag','linefit_PopupmenuAddCurvesPos');
v_PopupmenuAddCurvesPos = get(hPopupmenuAddCurvesPos,'value');
if v_PopupmenuAddCurves==1 
    pos = -v_PopupmenuAddCurvesPos;
else
    pos = v_PopupmenuAddCurvesPos;
end
hFig.UserData.sdata = hFig.UserData.sdata.addcurves(v_EditAddCurves,pos);
updatefigfromobj([],[],hFig);

function linefit_PushbuttonReduceCurvesFcn(~,~,hFig)
hEditReduceCurves = findall(hFig,'tag','linefit_EditReduceCurves');
v_EditReduceCurves = unique(str2num(get(hEditReduceCurves,'string'))); %#ok<ST2NM>
try
    hFig.UserData.sdata = hFig.UserData.sdata.reducecurves(v_EditReduceCurves);   
catch
    return;
end
updatefigfromobj([],[],hFig);

function linefit_PushbuttonSortCurvesFcn(~,~,hFig)
hPopupmenuSortCurvesRow = findall(hFig,'tag','linefit_PopupmenuSortCurvesRow');
v_PopupmenuSortCurvesRow = get(hPopupmenuSortCurvesRow,'value');
hPopupmenuSortCurvesOrder = findall(hFig,'tag','linefit_PopupmenuSortCurvesOrder');
s_PopupmenuSortCurvesOrder = get(hPopupmenuSortCurvesOrder,'string');
v_PopupmenuSortCurvesOrder = get(hPopupmenuSortCurvesOrder,'value');
hFig.UserData.sdata = hFig.UserData.sdata.sortcurves(v_PopupmenuSortCurvesRow,s_PopupmenuSortCurvesOrder{v_PopupmenuSortCurvesOrder});
updatefigfromobj([],[],hFig);

function linefit_PushbuttonFindPeakFcn(~,~,hFig)
try
    if isequal(get(gcbo,'tag'),'linefit_PushbuttonFindPeakAuto')
        hFig.UserData.sdata = findpeakauto(hFig.UserData.sdata);
    else
        hFig.UserData.sdata = findpeakmanual(hFig.UserData.sdata);
    end
catch
    return;
end

function linefit_PushbuttonApplyPeaksFcn(~,~,hFig)
h_EditApplyPeaks = findall(hFig,'tag','linefit_EditApplyPeaks');
v_EditApplyPeaks = unique(str2num(get(h_EditApplyPeaks,'string'))); %#ok<ST2NM>
try
    hFig.UserData.sdata = applypeaks(hFig.UserData.sdata,v_EditApplyPeaks);
catch
    return;
end     
updatefigfromobj([],[],hFig);

function linefit_PushbuttonPlotPreviewFcn(~,~,hFig)
if ~isempty(hFig.UserData.sdata.Data)
    plot(hFig.UserData.sdata);
end

function linefit_PushbuttonPlotFitFcn(~,~,hFig)
if ~isempty(fieldnames(hFig.UserData.sdata.FitOutput))
    plot(hFig.UserData.sdata,'fit');
end

function linefit_PushbuttonStartFitFcn(~,~,hFig)
if isempty(hFig.UserData.sdata.Data) || ...
    (nnz(hFig.UserData.sdata.Model.CurveModel.FitFlags)==0 && ...
     nnz(hFig.UserData.sdata.Model.BkgdModel.FitFlags)==0)
    return;
end
hFig.UserData.sdata = startfit(hFig.UserData.sdata);
linefit_PushbuttonPlotFitFcn([],[],hFig);
% --- update Fitted in table
s = acceptfit(hFig.UserData.sdata);
hTable = findall(hFig,'tag','linefit_Table');
if s.BkgdModelIndex == 0
    fitted = num2cell(s.Model.CurveModel.StartParams(:));
    fitflag = logical(s.Model.CurveModel.FitFlags(:));
else
    fitted = num2cell([s.Model.CurveModel.StartParams(:);s.Model.BkgdModel.StartParams(:)]);
    fitflag = logical([s.Model.CurveModel.FitFlags(:);s.Model.BkgdModel.FitFlags(:)]);    
end
fitted(~fitflag) = {[]};
hTable.Data(:,4) = fitted;


function linefit_PushbuttonAcceptFitFcn(~,~,hFig)
if isempty(fieldnames(hFig.UserData.sdata.FitOutput))
    return;
end
hTable = findall(hFig,'tag','linefit_Table');
fitflag     = logical(cell2mat(hTable.Data(:,1)));
acceptflag  = logical(cell2mat(hTable.Data(:,2)));
flag = fitflag & acceptflag;
% --- remove not accepted
if nnz(flag)==0
    return;
end
oldmodel = hFig.UserData.sdata.Model;
FitOutput = hFig.UserData.sdata.FitOutput;
hFig.UserData.sdata = acceptfit(hFig.UserData.sdata);
NOfParamsCurve = prod(hFig.UserData.sdata.Model.CurveModel.NOfParams);
hFig.UserData.sdata.Model.CurveModel.StartParams(~flag(1:NOfParamsCurve)) = oldmodel.CurveModel.StartParams(~flag(1:NOfParamsCurve));
hFig.UserData.sdata.Model.CurveModel.FitStdErrors(~flag(1:NOfParamsCurve)) = oldmodel.CurveModel.FitStdErrors(~flag(1:NOfParamsCurve));
hFig.UserData.sdata.FitOutput = FitOutput;
updatetablefromobj([],[],hFig);

function updatetablefromobj(~,~,hFig)
hTable = findall(hFig,'tag','linefit_Table');
% get row names
s = hFig.UserData.sdata;
% --- get curve data
NOfParams = s.Model.CurveModel.NOfParams;
NOfParamsCurve = prod(NOfParams);
[col,row] = meshgrid(1:NOfParams(2),1:NOfParams(1));
rowname_curve = cellfun(@(x,y)['P(',num2str(x),',',num2str(y),')'],num2cell(row),num2cell(col),'UniformOutput',false);
data_curve = [num2cell(logical(s.Model.CurveModel.FitFlags(:))),num2cell(true(NOfParamsCurve,1)),...
    num2cell(s.Model.CurveModel.StartParams(:)),...
    repmat({[]},NOfParamsCurve,1),...
    num2cell([s.Model.CurveModel.LowerBounds(:),s.Model.CurveModel.UpperBounds(:),...
    s.Model.CurveModel.FitStdErrors(:)]) ];
% --- get bkgd data
if s.BkgdModelIndex == 0
    rowname_bkgd = {};
    data_bkgd = {};
else
    NOfParamsBkgd = s.Model.BkgdModel.NOfParams(1);
    rowname_bkgd = cellfun(@(x)['BKGD(',num2str(x),')'],num2cell((1:NOfParamsBkgd)'),'UniformOutput',false);
    data_bkgd = [num2cell(logical(s.Model.BkgdModel.FitFlags(:))),num2cell(true(NOfParamsBkgd,1)),...
        num2cell(s.Model.BkgdModel.StartParams(:)),...
        repmat({[]},NOfParamsBkgd,1),...
        num2cell([s.Model.BkgdModel.LowerBounds(:),s.Model.BkgdModel.UpperBounds(:),...
        s.Model.BkgdModel.FitStdErrors(:)]) ];
end
% --- assemble
hTable.RowName = [rowname_curve(:);rowname_bkgd(:)];
hTable.Data = [data_curve;data_bkgd];

function linefit_TableCellEditFcn(hTable,callbackdata,hFig)
if callbackdata.Indices(2) == 2
    return;
end
updateobjfromtable(hTable,[],hFig);

function linefit_TableUIMenuFcn(hobj,~,hFig,hTable)
ind = get(hTable,'UserData');
s = get(hTable,'Data');
ind_1D = (ind(:,2)-1)*size(s,1)+ind(:,1);
if strcmpi(hobj.Label,'&Copy')
    data = cell2mat(s(ind_1D));
    clipboard('copy',data);
elseif strcmpi(hobj.Label,'&Paste')
    data = str2num(clipboard('paste')); %#ok<ST2NM>
    if length(ind_1D) ~= length(data)
        return;
    end
    hTable.Data(ind_1D) = num2cell(data);
    updateobjfromtable(hTable,[],hFig);
else
    return;
end

function linefit_EditSetMultiParamsFcn(~,~,~)
hobj = gcbo;
string = str2double(get(hobj,'string')); 
if isnan(string)
    set(hobj,'string','0');
    return;
end

function linefit_PushbuttonSetMultiParamsFcn(~,~,hFig)
ind = get(findall(hFig,'tag','linefit_PopupmenuSetMultiParams'),'value');
value = str2double(get(findall(hFig,'tag','linefit_EditSetMultiParams'),'string')); 
hFig.UserData.sdata.Model.CurveModel.StartParams(ind,:) = value;
updatetablefromobj([],[],hFig);

function linefit_PushbuttonToggleFitAllFcn(~,~,hFig)
hTable = findall(hFig,'tag','linefit_Table');
flag = cell2mat(hTable.Data(:,1));
switch nnz(flag)
    case 0
        flag(:) = true;
    case length(flag)
        flag(:) = false;
    otherwise
        flag(:) = true;
end
hTable.Data(:,1) = num2cell(flag);
updateobjfromtable(hTable,[],hFig);

function linefit_PushbuttonToggleAcceptAllFcn(~,~,hFig)
hTable = findall(hFig,'tag','linefit_Table');
flag = cell2mat(hTable.Data(:,2));
switch nnz(flag)
    case 0
        flag(:) = true;
    case length(flag)
        flag(:) = false;
    otherwise
        flag(:) = true;
end
hTable.Data(:,2) = num2cell(flag);

function linefit_PushbuttonShowFitOutputFcn(~,~,hFig)
if isempty(fieldnames(hFig.UserData.sdata.FitOutput))
   return;
end
base_name = ['LineFit',num2str(hFig.Number),'_FitOutput'];
assignin('base',base_name,hFig.UserData.sdata.FitOutput);
evalin('base',['openvar(''',base_name,''');']);

function linefit_PopupmenuEvaluateModelFcn(~,~,hFig)
if get(gcbo,'value') == 1
    set(findall(hFig,'tag','linefit_EditEvaluateModel'),'enable','off');
else
    set(findall(hFig,'tag','linefit_EditEvaluateModel'),'enable','on');
end

function linefit_EditEvaluateModelFcn(~,~,~)
hobj = gcbo;
string = str2num(get(hobj,'string')); %#ok<ST2NM>
if isempty(string)
    set(hobj,'string','');
    return;
end

function linefit_PushbuttonEvaluateModelFcn(hobj,~,hFig)
if get(findall(hFig,'tag','linefit_PopupmenuEvaluateModel'),'value') == 1
    if isempty(hFig.UserData.sdata.Data)
        return;
    end
    xdata = hFig.UserData.sdata.Data(:,1);
    [y,iy,bk] = evalmodel(hFig.UserData.sdata);
else
    xdata = str2num(get(findall(hFig,'tag','linefit_EditEvaluateModel'),'string')); %#ok<ST2NM>
    if isempty(xdata)
        return;
    end
    xdata = xdata(:);
    [y,iy,bk] = evalmodel(hFig.UserData.sdata,xdata);
end
linefit_evaluation = [xdata,y,iy,bk];
base_name = ['LineFit',num2str(hFig.Number),'_ModelEvaluation'];
if strcmpi(get(hobj,'tag'),'linefit_PushbuttonEvaluateModelToWorkspace')
    assignin('base',base_name,linefit_evaluation);
    evalin('base',['openvar(''',base_name,''');']);
else
    uiputfile_str = {'*.dat','ASCII data files (*.dat)';...
                    '*.txt','ASCII text files (*.txt)';
                    '*.mat','MAT-files (*.mat)'};
    [filename,filepath,filterindex] = uiputfile(uiputfile_str,'Save Model Evaluation to File',fullfile(pwd,base_name));
    if isequal(filename,0), return; end
    f = fullfile(filepath,filename);    
    [~,~,ext] = fileparts(f);
    ext_template = uiputfile_str{filterindex,1}(2:end);
    if ~strcmpi(ext,ext_template), f = [f,ext_template]; end
    switch filterindex
        case {1,2}
            save(f,'linefit_evaluation','-ascii','-double','-tabs');
        case 3
            save(f,'linefit_evaluation','-mat');            
        otherwise
            return;
    end    
end

function linefit_PopupmenuGetModelPropsFcn(~,~,hFig)
if get(gcbo,'value') == 1
    set(findall(hFig,'tag','linefit_EditGetModelProps'),'enable','off');
else
    set(findall(hFig,'tag','linefit_EditGetModelProps'),'enable','on');
end

function linefit_EditGetModelPropsFcn(~,~,~)
hobj = gcbo;
string = str2num(get(hobj,'string')); %#ok<ST2NM>
if isempty(string)
    set(hobj,'string','');
    return;
end

function linefit_PushbuttonGetModelPropsFcn(~,~,hFig)
if get(findall(hFig,'tag','linefit_PopupmenuGetModelProps'),'value') == 1
    if isempty(hFig.UserData.sdata.Data)
        return;
    end
    props = getmodelprops(hFig.UserData.sdata);
else
    xdata = str2num(get(findall(hFig,'tag','linefit_EditGetModelProps'),'string')); %#ok<ST2NM>
    if isempty(xdata)
        return;
    end
    xdata = xdata(:);
    props = getmodelprops(hFig.UserData.sdata,xdata);
end
base_name = ['LineFit',num2str(hFig.Number),'_ModelProperties'];
assignin('base',base_name,props);
evalin('base',['openvar(''',base_name,''');']);

function updateobjfromtable(hTable,~,hFig)
Data = hTable.Data;
FitFlags = cell2mat(Data(:,1));
StartParams = cell2mat(Data(:,3));
LowerBounds = cell2mat(Data(:,5));
UpperBounds = cell2mat(Data(:,6));
NOfParamsCurve = prod(hFig.UserData.sdata.Model.CurveModel.NOfParams);
hFig.UserData.sdata.Model.CurveModel.StartParams(:)  = StartParams(1:NOfParamsCurve);
hFig.UserData.sdata.Model.CurveModel.LowerBounds(:) = LowerBounds(1:NOfParamsCurve);
hFig.UserData.sdata.Model.CurveModel.UpperBounds(:) = UpperBounds(1:NOfParamsCurve);
hFig.UserData.sdata.Model.CurveModel.FitFlags(:)    = FitFlags(1:NOfParamsCurve);
if hFig.UserData.sdata.BkgdModelIndex ~= 0
    hFig.UserData.sdata.Model.BkgdModel.StartParams(:)  = StartParams(NOfParamsCurve+1:end);
    hFig.UserData.sdata.Model.BkgdModel.LowerBounds(:) = LowerBounds(NOfParamsCurve+1:end);
    hFig.UserData.sdata.Model.BkgdModel.UpperBounds(:) = UpperBounds(NOfParamsCurve+1:end);
    hFig.UserData.sdata.Model.BkgdModel.FitFlags(:)    = FitFlags(NOfParamsCurve+1:end);
end

function linefit_PushbuttonSaveFcn(hobj,~,hFig)
linefit_obj = hFig.UserData.sdata;  
base_name = ['LineFit',num2str(hFig.Number)];
if strcmpi(get(hobj,'tag'),'linefit_PushbuttonSaveToFile')
    uiputfile_str = {'*.mat','MAT-files (*.mat)'};
    [filename,filepath,filterindex] = uiputfile(uiputfile_str,'Save to MAT File',fullfile(pwd,base_name));
    if isequal(filename,0), return; end
    f = fullfile(filepath,filename);    
    [~,~,ext] = fileparts(f);
    ext_template = uiputfile_str{filterindex,1}(2:end);
    if ~strcmpi(ext,ext_template), f = [f,ext_template]; end
    switch filterindex
        case 1
            save(f,'linefit_obj');
        otherwise
            return;
    end
else
    var = inputdlg({'Saving current LineFit job to Workspace. Enter a variable name:'},'Save to Workspace',1,{base_name});
    if isempty(var) || isempty(var{1}), return; end
    assignin('base',matlab.lang.makeValidName(var{1}),linefit_obj);
end

function linefit_PushbuttonCloseFiguresFcn(~,~,~)
hfs = findall(0,'type','figure');
name = {hfs.Name};
handle = {hfs.HandleVisibility};
ind = cell2mat(cellfun(@(x,y)(isempty(strfind(x,'LineFitGUI - ')) & strcmpi(y,'on')),name,handle,'UniformOutput',false));
close(hfs(ind));

function linefit_CloseRequestFcn(~,~,hFig)
% delete brush fig
hFigBrush = findall(0,'Name',['LineFitGUI Data Exclusion/Inclusion -',num2str(hFig.Number)]);
if ishandle(hFigBrush), delete(hFigBrush); end
% delete main fig
delete(hFig);