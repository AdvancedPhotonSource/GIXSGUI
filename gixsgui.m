function gixsgui
% ***********************************************
% Copyright (c) 2020 UChicago Argonne, LLC
% See LICENSE file.
% ***********************************************
%
% GIXSGUI Display and process GIXSDATA interactively in GIXSGUI.
%   GIXSGUI is a straightfoward tool to display and process linecut on x-ray
%   scattering data taken either in transmission or grazing-incidence
%   geometry. Currently supported image types include TIF (TIFF), MAT, CBF,
%   FITS, EDF.
%
%   Operations in GIXSGUI can also be done in the command window or through
%   a script by calling the methods defined in GIXSDATA class.
%
%   See also GIXSDATA

%   Zhang Jiang @8ID/APS/ANL
%   $Revision: 1.0 $  $Date: 2011/01/18 $
%   $Revision: 1.1 $  $Date: 2011/03/01 $
%       (1)GUI for image statistics and plot histgram. See also changes in
%       GIXSDATA. (ZJ)
%       (2) Use default mask in default parameters (if exists) for new
%       images. (ZJ)    
%       (3) Option export image to tif (int32) or mat files. Function
%       IMWRITE2TIF needs to be called. (ZJ)
%       (4) GUI flat field correction. See also changes in GIXSDATA. (ZJ
%       and Joe Strzalka)
%       (5) Enable batch mode to apply flat field and save image back to
%       tif files. (ZJ)
%       (6) Add efficienty correction. See also changes in GIXSDATA. (ZJ
%       and JS)
%       (7) Add GUI to selected data to plot (corrected or not). (ZJ)
%       (8) Add reshape function to convert image axis to Cartesian
%       coordinate. See also changes in GIXSDATA. (ZJ)
%       (9) Add gap fill function. (ZJ and JS)
%       (10) Add sumimg function to sum or average images. (ZJ)
%   $Revision: 1.2.0 $  $Date: 2011/07/25 $
%       (1) Redesign GUI layout. Move linecut and reshape tools to a
%       separate GUI.
%       (2) Split free cut to interactive cut and defined cut.
%       (3) Remove 'Plot in single/separate' from free linecut.
%       (4) Add overlay function to superimpose linecuts.
%       (5) Allow mirror and rotation operations. (suggested by JS)
%   $Revision: 1.2.1 $  $Date: 2011/08/31 $
%       (1) Add pushbuttons for CLims.
%   $Revision: 1.2.2 $  $Date: 2011/09/06 $
%       (1) Add contour plot to Data Processing.
%   $Revision: 1.3.0 $  $Date: 2011/09/16 $
%       (1) Redesign Data Processing sub-figure layout using uitab.
%       (2) Add peak finder.
%   $Revision: 1.3.1 $  $Date: 2011/10/07 $
%       (1) Add property PhiMode to GIXSDATA and its GUI.
%   $Revision: 1.3.2 $  $Date: 2011/10/10 $
%       (1) Add beam polarization corrections to GIXSDATA and
%       their GUI.
%   $Revision: 1.3.3 $  $Date: 2011/12/09 $
%       (1) Modify mask tools to include or exclude regions.
%   $Revision: 1.3.4 $  $Data: 2012/02/23 $
%       (1) Add pushbutton for help.
%       (2) Add remove_dummy_axis function.
%       (3) Add PhiMode = 3 and 4 options to GIXSDATA and GIXSGUI
%   $Revision: 1.3.5 $  $Data: 2012/07/17 $
%       (1) Allow the number of points in the constrained linecut to be
%       one.
%       (2) Fix the problem of displaying Image Processing GUI out of the
%       screen when main GUI is near the right edge of the current screen.
%       New function check_figure_minitor is added to determine where to
%       place the GUI figure.
%       (3) Add the plot of data count for reshaped image.
%       (4) Speed up reshaping image. See GIXSDATA for details.
%       (5) Initialize GIXSGUI path using pwd during start.
%       (6) Fix the problem of attempt to refer to the non-existing field 
%       udata.gdata.ImFileName when Remove button is clicked after a double
%       click at the empty list box of the image space.
%       (7) Display RawData in the datatip.
%       (8) Fix export problems of using uiputfile when filname contains a
%       non-extension-separation dot. Use filterindex to decide extension.
%       (9) Use udata.path instead of pwd to export parameter and image.
%       (10) Add option to display RawData. See GIXSDATA for changes.
%       (11) Initialize/clear maps when exporting to parameter files.
%       (12) Update maps each time when the image is loaded to avoid the
%       possibility of mis-use of maps in the default parameter.
%   $Revision: 1.4 $  $Data: 2012/08/15 $
%       (1) Add GUI to calculate diffraction positions via DWBA theory.
%       (2) Assign +/- sign to QrMap in GIXSDATA. Contour plot is still 
%       based on absolute values of QrMap.
%   $Revision: 1.4.1 $  $Data: 2012/11/01 $
%       (1) FITS image format is supported. $2012/11/01$
%   $Revision: 1.5 $  $Data: 2013/1/27 $
%       (1) Move gixsdatacursor function to a separate file for useage of
%       GIXSDATA.
%       (2) Add ChiMap (polar angle) to GIXSDATA.
%       (3) Add roiscangui (calling roican.m)
%       (4) Add an option to calculate all maps for LINECUT. See GIXSDATA
%       for changes. $2013/02/20$
%       (5) Add find center of mass (COM) pushbutton. $2013/02/27$
%       (6) Add SDD calibration (using reflections). $2013/03/18$
%   $Revision: 1.5.1 $  $Date: 2014/4/03 $
%       (1) Use peak position for Get Specular
%   $Revision: 1.5.2 $  $Date: 2014/6/11 $
%       (1) Add support for .edf image format (from CHZ)
%   $Revision: 1.6.0 $  $Date: 2014/10/28 $
%       (1) Can pass linecut to Matlab Curve Fitting toolbox $2014/10/25$
%       (2) Add SDD Calbiration GUI to use reflections from a surface to 
%       calibration $2014/10/27$
%       (3) Update documention; add demostrations and script mode
%       templates; reorganize files and folders; journal paper about 
%       GIXSGUI submitted.
%   $Revision: 1.6.1 $  $Date: 2014/12/1 $
%       (1) Add Lorentz correction
%       (2) Add custome correction
%       (3) Add boundary lines on the image for masked region via contour
%   $Revision: 1.6.2 $  $Date: 2015/3/7 $
%       (1) Resolve graphical compatibility issue in Matlab R2014b
%   $Revision: 1.6.3 $  $Date: 2015/12/16 $
%       (1) Add angle calibration.
%   $Revision: 1.6.4 $  $Release Date: 2016/05/08 $
%       (1) Include scaling in linecut overlay. $Date: 2016/03/26 $
%       (2) Fix the bug of AND/OR on linecut constraints in both
%       gixsdata.m $Date: 2016/04/19 $
%       (3) Use pmedf_read.m by Petr Mikulik to read EDF files 
%       $Date: 2016/05/08 $
%       (4) Able to displaly EDF header $Date: 2016/05/08 $
%   $Revision: 1.6.5 $  
%       (1) See sumimggui.m for update details. $Date: 2016/06/20 $
%       (2) Add NOFPIXELS for linecut function. $Date: 2016/08/01 $
%   $Revision: 1.7 $  
%       (1) Add line fit for data analysis. $Date: 2016/10/17 $
%       (2) Fix gixsdiffpos.m for correct exit angles. When qz (BA) is less
%       than minimum that can be achieve for positive ext angles, the
%       calculated exit angle should be negative. $Date: 2017/01/10 $
%   $Revision: 1.7.1 $  
%       (1) Allow manual tick label. $Date: 2017/05/05 $
%   $Revision: 1.7.2 $  
%       (1) Allow inpainting after image reshaping. $Date: 2017/11/09 $
%       (2) Use cmask for contour plot in Contrained Image. $Date:
%       2017/11/28 $
%       (3) Fix reflection conditions for space group 220, 228, and 230.
%       $Date: 2018/01/24 $ 
%       (4) Enable plotting diffraction of Born approximation. $Date:
%       2018/02/07 $  
%   $Revision: 1.7.3 $
%       (1) Automatically add subfolder paths to Matlab. $Date: 2019/06/02 $
%       (2) Enable Lambda and Eiger detectors. $Date: 2019/08/23 $
%       (3) Read .imm file (8IDI at APS) with openmultiimm.m $Date:
%       2019/08/23 $ 

addpath(genpath(fileparts(which('gixsgui'))));

hFigGIXS = findall(0,'Tag','gixs_fig');
if ~isempty(hFigGIXS)
    figure(hFigGIXS); 
    return;
end

%% main figure properites
figureSize = [750 755];
monitorPos = get(0,'MonitorPositions');
monitorPos = monitorPos(1,:);
figurePos  = [10 monitorPos(4)-figureSize(2)-35 figureSize];
hFigGIXS = figure(...
    'BackingStore','on',...
    'Units','pixels',...
    'Position',figurePos,...
    'DockControls','off',...
    'Resize','off',...
    'PaperOrient','portrait',...
    'PaperPositionMode','auto',...
    'HandleVisibility','callback',...
    'IntegerHandle','off',...
    'NumberTitle','off',...
    'MenuBar','none',...
    'Toolbar','none',...
    'CloseRequestFcn',@gixs_CloseRequestFcn,...
    'Name','GIXSGUI - 1.7.3 (Developed at 8ID/APS/ANL)',...
    'WindowStyle','normal',...
    'Tag','gixs_fig','UserData',[]);
backgroundcolor = get(hFigGIXS,'color');
panelcolor = backgroundcolor;
hPanel1 = uipanel('Parent',hFigGIXS,...
    'BackgroundColor',panelcolor,...
    'units','norm',...
    'Position',[0.005 0.05 0.41 0.95],...
    'Title','Import & Export',...
    'TitlePosition','centertop');
SizePanel1 = get(hPanel1,'position'); SizePanel1 = SizePanel1(3:4).*figureSize;
hPanel2 = uipanel('Parent',hFigGIXS,...
    'BackgroundColor',panelcolor,...
    'units','norm',...
    'Position',[0.42 0.115 0.575 0.885],...
    'Title','Image Space',...
    'TitlePosition','centertop');
SizePanel2 = get(hPanel2,'position'); SizePanel2 = SizePanel2(3:4).*figureSize;
hPanel3 = uipanel('Parent',hFigGIXS,...
    'BackgroundColor',panelcolor,...
    'units','norm',...
    'Position',[0.42 0.005 0.575 0.11],...
    'Title','Misc Tools',...
    'TitlePosition','centertop');
SizePanel3 = get(hPanel3,'position'); SizePanel3 = SizePanel3(3:4).*figureSize;

% --- panel 1 ---
uicontrol('Parent',hPanel1,'style','Text','Units','pixel',...
    'backgroundcolor',panelcolor,...
    'String','Load parameter file and image path',...
    'TooltipString','Use buttons below to load parameter file and image path',...
    'HorizontalAlignment','left',...
    'Position',[5,SizePanel1(2)-35,SizePanel1(1)-12,15],...
    'Tag','gixs_TextPath');
% load params
uicontrol('Parent',hPanel1,'style','pushbutton','unit','pixel',...
    'String','Load Params ...',...
    'Position',[5,SizePanel1(2)-60,95,20],...
    'Tag','gixs_PushbuttonLoadParams',...
    'TooltipString','Load .mat or .par (for gisaxsviewer MAR165) parameter file',...
    'callback',@gixs_PushbuttonLoadParamsFcn);
uicontrol('Parent',hPanel1,'style','pushbutton','unit','pixel',...
    'String','Set As Default',...
    'Position',[105,SizePanel1(2)-60,95,20],...
    'Tag','gixs_PushbuttonParamsDefault',...
    'TooltipString','Set currently displayed parameters as default',...
    'callback',@gixs_PushbuttonParamsDefaultFcn);
uicontrol('Parent',hPanel1,'style','pushbutton','unit','pixel',...
    'String','Export Params ...',...
    'Position',[205,SizePanel1(2)-60,95,20],...
    'Tag','gixs_PushbuttonParamsExport',...
    'TooltipString','Export currently displayed (not default) parameters to .mat file',...
    'callback',@gixs_PushbuttonParamsExportFcn);
% load image path
uicontrol('Parent',hPanel1,'style','pushbutton','unit','pixel',...
    'String','Load Path ...',...
    'Position',[5,SizePanel1(2)-85,95,20],...
    'Tag','gixs_PushbuttonLoadPath',...
    'TooltipString','Load image path',...
    'callback',@gixs_PushbuttonLoadPathFcn);
uicontrol('Parent',hPanel1,'style','Text','Units','pixel',...
    'backgroundcolor',panelcolor,...
    'String','Sort files by ',...
    'HorizontalAlignment','right',...
    'Position',[105,SizePanel1(2)-85,95,15]);
uicontrol('Parent',hPanel1,'Style','Popupmenu','unit','pixel',...
    'Position',[205 SizePanel1(2)-85  95 20],...
    'HorizontalAlignment','right',...
    'backgroundcolor','w',...
    'String',{'time','name'},...
    'value',1,'Enable','on',...
    'callback',@gixs_PopupmenuSortFcn,...
    'Tag','gixs_PopupmenuSort');
uicontrol('Parent',hPanel1,'Style','listbox','Units','pixel',...
    'Position',[1 250 SizePanel1(1)-4 SizePanel1(2)-340],...
    'HorizontalAlignment','left','backgroundcolor','w',...
    'Tooltipstring','Double click to add to image space',...
    'Min',1,'Max',0,'String','','Enable','on','value',0,...
    'Tag','gixs_ListboxPathFile',...
    'callback',@gixs_ListboxPathFileFcn);

uicontrol('Parent',hPanel1,'style','pushbutton','String','Refresh',...
    'unit','pixel','Position',[80,225,70,20],...
    'Tag','gixs_PushbuttonPathRefresh',...
    'TooltipString','Refresh path',...
    'callback',@gixs_PushbuttonRefreshFcn);
uicontrol('Parent',hPanel1,'style','pushbutton','unit','pixel',...
    'String','Add',...
    'Position',[155,225,70,20],...
    'Tag','gixs_PushbuttonLoadImage',...
    'TooltipString','Add to image space',...
    'callback',@gixs_PushbuttonLoadImageFcn);

uicontrol('Parent',hPanel1,'Style','listbox','Units','pixel',...
    'Position',[1 30 SizePanel1(1)-4 190],...
    'HorizontalAlignment','left','backgroundcolor','w',...
    'Min',1,'Max',0,'value',0,'String','','Enable','on',...
    'Tooltipstring','Double click to plot or bring figure to front. Single click ''Ctrl''+click on figure frame to select curent image.',...
    'Tag','gixs_ListboxImage',...
    'callback',@gixs_ListboxImageFcn);

uicontrol('Parent',hPanel1,'style','pushbutton','unit','pixel',...
    'String','Up','Position',[5,5,70,20],...
    'Tag','gixs_PushbuttonImageUp',...
    'Tooltipstring','Move selected image upward',...
    'callback',@gixs_PushbuttonImageUpFcn);
uicontrol('Parent',hPanel1,'style','pushbutton','unit','pixel',...
    'String','Down','Position',[80,5,70,20],...
    'Tooltipstring','Move selected image downward',...
    'Tag','gixs_PushbuttonImageDown',...
    'callback',@gixs_PushbuttonImageDownFcn);
uicontrol('Parent',hPanel1,'style','pushbutton','unit','pixel',...
    'String','Remove','Position',[155,5,70,20],...
    'Tag','gixs_PushbuttonRemoveImage',...
    'TooltipString','Remove selected image from image space. This does not delete the source image file.',...
    'callback',@gixs_PushbuttonRemoveImageFcn);
uicontrol('Parent',hPanel1,'style','pushbutton','unit','pixel',...
    'String','Remove All','Position',[230,5,70,20],...
    'Tag','gixs_PushbuttonRemoveAllImage',...
    'TooltipString','Remove all images from image space',...
    'callback',@gixs_PushbuttonRemoveAllImageFcn);

% --- panel 2
% --- setup parameter
uicontrol('Parent',hPanel2,'style','Text','Units','pixel',...
    'backgroundcolor',panelcolor,'HorizontalAlignment','left',...
    'String','Setup Parameters:',...
    'Position',[5,SizePanel2(2)-35,100,15]);
uicontrol('Parent',hPanel2,'style','pushbutton','unit','pixel',...
    'String','Recalculate Map',...
    'Position',[SizePanel2(1)-105*3,SizePanel2(2)-38,205,20],...
    'Tag','gixs_PushbuttonRecaculate Map',...
    'Tooltipstring','Recalculation is sometimes necessary when setup parameters are modifed in script mode rather than through GUI.',...
    'callback',@gixs_PushbuttonGetQMapFcn);
% camera
uicontrol('Parent',hPanel2,'style','Text','Units','pixel',...
    'backgroundcolor',panelcolor,'HorizontalAlignment','right',...
    'String','Select camera ',...
    'Position',[SizePanel2(1)-105*4,SizePanel2(2)-60,100,15]);
uicontrol('Parent',hPanel2,'Style','Popupmenu','unit','pixel',...
    'Position',[SizePanel2(1)-105*3 SizePanel2(2)-60  100 20],...
    'HorizontalAlignment','right','backgroundcolor','w',...
    'String',{'Pilatus','MAR165','Lambda (Si)','Eiger (Si)','Other'},...
    'value',1,'Enable','on',...
    'callback',@updateparamsFcn,...
    'Tag','gixs_PopupmenuCamera');
% Pixel Size
uicontrol('Parent',hPanel2,'style','Text','Units','pixel',...
    'backgroundcolor',panelcolor,'HorizontalAlignment','right',...
    'String','Pixel size ',...
    'Position',[SizePanel2(1)-105*2,SizePanel2(2)-60,100,15]);
uicontrol('Parent',hPanel2,'style','Text','Units','pixel',...
    'backgroundcolor',panelcolor,'HorizontalAlignment','center',...
    'String','H',...
    'Position',[SizePanel2(1)-100,SizePanel2(2)-40,40,15]);
uicontrol('Parent',hPanel2,'style','Edit','Units','pixel',...
    'backgroundcolor','w','HorizontalAlignment','left','Enable','on',...
    'String','0.172',...
    'Position',[SizePanel2(1)-105, SizePanel2(2)-60,50,20],...
    'Tag','gixs_EditPixelX',...
    'callback',@updateparamsFcn);
uicontrol('Parent',hPanel2,'style','Text','Units','pixel',...
    'backgroundcolor',panelcolor,'HorizontalAlignment','center',...
    'String','V',...
    'Position',[SizePanel2(1)-45,SizePanel2(2)-40,40,15]);
uicontrol('Parent',hPanel2,'style','Edit','Units','pixel',...
    'backgroundcolor','w','HorizontalAlignment','left','Enable','on',...
    'String','0.172',...
    'Position',[SizePanel2(1)-55, SizePanel2(2)-60,50,20],...
    'Tag','gixs_EditPixelY',...
    'callback',@updateparamsFcn);
% Energy
uicontrol('Parent',hPanel2,'style','Text','Units','pixel',...
    'backgroundcolor',panelcolor,'HorizontalAlignment','right',...
    'String','Energy (KeV) ',...
    'Position',[SizePanel2(1)-105*4,SizePanel2(2)-85,100,15]);
uicontrol('Parent',hPanel2,'style','Edit','Units','pixel',...
    'backgroundcolor','w','HorizontalAlignment','left','Enable','on',...
    'String','10.86',... 
    'Position',[SizePanel2(1)-105*3 SizePanel2(2)-85  100 20],...
    'Tag','gixs_EditEnergy',...
    'callback',@updateparamsFcn);
% Dimension
uicontrol('Parent',hPanel2,'style','Text','Units','pixel',...
    'backgroundcolor',panelcolor,'HorizontalAlignment','right',...
    'String','Image dimension ',... 
    'Position',[SizePanel2(1)-105*2,SizePanel2(2)-85,100,15]);
uicontrol('Parent',hPanel2,'style','Edit','Units','pixel',...
    'backgroundcolor','w','HorizontalAlignment','left',...
    'String','0',...
    'Enable','inactive',...
    'Position',[SizePanel2(1)-105, SizePanel2(2)-85,50,20],...
    'Tag','gixs_EditDimX',...
    'callback',@updateparamsFcn);
uicontrol('Parent',hPanel2,'style','Edit','Units','pixel',...
    'backgroundcolor','w','HorizontalAlignment','left',...
    'String','0',...
    'Enable','inactive',...
    'Position',[SizePanel2(1)-55, SizePanel2(2)-85,50,20],...
    'Tag','gixs_EditDimY',...
    'callback',@updateparamsFcn);
% SDD
uicontrol('Parent',hPanel2,'style','Text','Units','pixel',...
    'backgroundcolor',panelcolor,'HorizontalAlignment','right',...
    'String','SDD (mm) ',...
    'Tooltipstring','Sample-to-detector distance',...
    'Position',[SizePanel2(1)-105*4,SizePanel2(2)-110,100,15]);
uicontrol('Parent',hPanel2,'style','Edit','Units','pixel',...
    'backgroundcolor','w','HorizontalAlignment','left','Enable','on',...
    'String','NaN',...
    'Position',[SizePanel2(1)-105*3 SizePanel2(2)-110  100 20],...
    'Tag','gixs_EditSDD',...
    'callback',@updateparamsFcn);
% beam0
uicontrol('Parent',hPanel2,'style','Pushbutton','Units','pixel',...
    'String','Beam0','HorizontalAlignment','right',...
    'Tooltipstring','Show beam zero',...
    'Position',[SizePanel2(1)-105*2,SizePanel2(2)-110,100,20],...
    'tag','gixs_PushbuttonShowBeam0',...
    'callback',@beam0specularlabelFcn);
uicontrol('Parent',hPanel2,'style','Edit','Units','pixel',...
    'backgroundcolor','w','HorizontalAlignment','left','Enable','on',...
    'String','NaN',...
    'Position',[SizePanel2(1)-105, SizePanel2(2)-110,50,20],...
    'Tag','gixs_EditBeam0X',...
    'callback',@updateparamsFcn);
uicontrol('Parent',hPanel2,'style','Edit','Units','pixel',...
    'backgroundcolor','w','HorizontalAlignment','left','Enable','on',...
    'String','NaN',...
    'Position',[SizePanel2(1)-55, SizePanel2(2)-110,50,20],...
    'Tag','gixs_EditBeam0Y',...
    'callback',@updateparamsFcn);
% geometry
uicontrol('Parent',hPanel2,'style','Text','Units','pixel',...
    'backgroundcolor',panelcolor,'HorizontalAlignment','right',...
    'String','Geometry ',...
    'Position',[SizePanel2(1)-105*4,SizePanel2(2)-135,100,15]);
uicontrol('Parent',hPanel2,'Style','Popupmenu','unit','pixel',...
    'Position',[SizePanel2(1)-105*3 SizePanel2(2)-135  100 20],...
    'HorizontalAlignment','right','backgroundcolor','w',...
    'String',{'Transmission','Reflection'},...
    'value',2,'Enable','on',...
    'Tag','gixs_PopupmenuGeometry',...
    'callback',@updateparamsFcn);
% Specular
uicontrol('Parent',hPanel2,'style','Pushbutton','Units','pixel',...
    'String','Specular',...
    'HorizontalAlignment','right',...
    'Tooltipstring','Show specular beam for reflection geometry',...
    'Position',[SizePanel2(1)-105*2,SizePanel2(2)-135,100,20],...
    'tag','gixs_PushbuttonShowSpecular',...
    'callback',@beam0specularlabelFcn);
uicontrol('Parent',hPanel2,'style','Edit','Units','pixel',...
    'backgroundcolor','w','HorizontalAlignment','left','Enable','on',...
    'String','NaN',...
    'Position',[SizePanel2(1)-105, SizePanel2(2)-135,50,20],...
    'Tag','gixs_EditSpecularX',...
    'callback',@updateparamsFcn);
uicontrol('Parent',hPanel2,'style','Edit','Units','pixel',...
    'backgroundcolor','w','HorizontalAlignment','left','Enable','on',...
    'String','NaN',...
    'Position',[SizePanel2(1)-55, SizePanel2(2)-135,50,20],...
    'Tag','gixs_EditSpecularY',...
    'callback',@updateparamsFcn);
uicontrol('Parent',hPanel2,'style','Text','Units','pixel',...
    'backgroundcolor',panelcolor,...
    'String','Phi mode ',...
    'HorizontalAlignment','right',...
    'Position',[SizePanel2(1)-105*4,SizePanel2(2)-160,100,15]);
uicontrol('Parent',hPanel2,'Style','Popupmenu','unit','pixel',...
    'Position',[SizePanel2(1)-105*3 SizePanel2(2)-160  100 20],...
    'HorizontalAlignment','right','backgroundcolor','w',...
    'String',{'(-180,180]','[0,360)','[-270,90)','[-90,270)'},...
    'value',1,'Enable','on',...
    'Tag','gixs_PopupmenuPhiMode',...
    'callback',@updateparamsFcn);
% grazing angle
uicontrol('Parent',hPanel2,'style','Text','Units','pixel',...
    'backgroundcolor',panelcolor,'HorizontalAlignment','right',...
    'String','Incident angle (deg) ',...
    'Tooltipstring','For reflection only',...
    'Position',[SizePanel2(1)-105*2,SizePanel2(2)-160,100,15]);
uicontrol('Parent',hPanel2,'style','Edit','Units','pixel',...
    'backgroundcolor','w','HorizontalAlignment','left','Enable','on',...
    'String','NaN',...
    'Position',[SizePanel2(1)-105 SizePanel2(2)-160  100 20],...
    'Tag','gixs_EditIncidentAngle',...
    'callback',@updateparamsFcn);

% --- calibratio tools
PosCalib = [5,SizePanel2(2)-185,100,15];
uicontrol('Parent',hPanel2,'style','Text','Units','pixel',...
    'backgroundcolor',panelcolor,'HorizontalAlignment','left',...
    'String','Setup Calibration:',...
    'Position',PosCalib);
uicontrol('Parent',hPanel2,'style','pushbutton','unit','pixel',...
    'String','Get Beam0',...
    'Position',[SizePanel2(1)-105*3,PosCalib(2),100,20],...
    'Tag','gixs_PushbuttonGetBeam0',...
    'TooltipString','Draw a rectangle to determine beam0 coordinate',...
    'callback',@gixs_PushbuttonGetBeam0COMFcn);
uicontrol('Parent',hPanel2,'style','pushbutton','unit','pixel',...
    'String','Get SDD',...
    'Position',[SizePanel2(1)-105*2,PosCalib(2),100,20],...
    'Tag','gixs_PushbuttonGetSDD',...
    'TooltipString','Left click for at least 3 points on silver behenate (AgBE) (001) ring. If not exists, beam0 will be updated to circle center value. ''Backspace'' to remove previous point. ''Enter'' to finish.',...
    'callback',@gixs_PushbuttonGetSDDFcn);
uicontrol('Parent',hPanel2,'style','pushbutton','unit','pixel',...
    'String','Get Specular',...
    'Position',[SizePanel2(1)-105,PosCalib(2),100,20],...
    'Tag','gixs_PushbuttonGetSpecular',...
    'TooltipString','Left click twice to draw a line across the diffuse rod to determine specular coordinate. ''Backspace'' to remove previous point. ''Enter'' to finish.',...
    'callback',@gixs_PushbuttonGetSpecularFcn);

% --- image corrections
PosCorrection = [5,SizePanel2(2)-205,100,15];
uicontrol('Parent',hPanel2,'style','Text','Units','pixel',...
    'backgroundcolor',panelcolor,'HorizontalAlignment','left',...
    'String','Image Corrections:',...
    'Position',PosCorrection);
% efficiency
uicontrol('Parent',hPanel2,'style','pushbutton','unit','pixel',...
    'String','Efficiency',...
    'Position',[SizePanel2(1)-105*4,PosCorrection(2)-25,100,20],...
    'Tag','gixs_PushbuttonEfficiency',...
    'TooltipString','Show current efficiency correction map',...
    'callback',@gixs_PushbuttonShowEfficiencyFcn);
uicontrol('Parent',hPanel2,'style','Text','Units','pixel',...
    'backgroundcolor',panelcolor,...
    'String','Formula','HorizontalAlignment','center',...
    'tooltipstring','Material chemical formula. ''N78O21Ar1'' for air; ''N/A'' to disable.',...
    'Position',[SizePanel2(1)-215,PosCorrection(2),60,15]);
uicontrol('Parent',hPanel2,'style','Text','Units','pixel',...
    'backgroundcolor',panelcolor,'HorizontalAlignment','center',...
    'String','Density',...
    'tooltipstring','Mass density. Unit: g/cm^3',...
    'Position',[SizePanel2(1)-145,PosCorrection(2),70,15]);
uicontrol('Parent',hPanel2,'style','Text','Units','pixel',...
    'backgroundcolor',panelcolor,'HorizontalAlignment','center',...
    'String','Length (mm)',...
    'tooltipstring','Unit: mm',...
    'Position',[SizePanel2(1)-75,PosCorrection(2),70,15]);
uicontrol('Parent',hPanel2,'style','Text', 'Units','pixel',...
    'backgroundcolor',panelcolor,'HorizontalAlignment','right',...
    'String','Camera sensor ',...
    'Position',[SizePanel2(1)-105*3,PosCorrection(2)-50,90,15]);
uicontrol('Parent',hPanel2,'style','Text','Units','pixel',...
    'backgroundcolor',panelcolor,'HorizontalAlignment','right',...
    'String','X-ray path ',...
    'Position',[SizePanel2(1)-105*3,PosCorrection(2)-25,90,15]);
uicontrol('Parent',hPanel2,'style','Edit','Units','pixel',...
    'backgroundcolor','w','HorizontalAlignment','left','Enable','on',...
    'String','N78O21Ar',...
    'Position',[SizePanel2(1)-220,PosCorrection(2)-25,70,20],...
    'Tag','gixs_EditEffc11',...
    'callback',@updateparamsFcn);
uicontrol('Parent',hPanel2,'style','Edit','Units','pixel',...
    'backgroundcolor','w','HorizontalAlignment','left',...
    'String','0.0011839','Enable','on',...
    'Position',[SizePanel2(1)-145,PosCorrection(2)-25,70,20],...
    'Tag','gixs_EditEffc12',...
    'callback',@updateparamsFcn);
uicontrol('Parent',hPanel2,'style','Edit','Units','pixel',...
    'backgroundcolor','w','HorizontalAlignment','left','Enable','on',...
    'String','0',...
    'Position',[SizePanel2(1)-75,PosCorrection(2)-25,70,20],...
    'Tag','gixs_EditEffc13',...
    'callback',@updateparamsFcn);
uicontrol('Parent',hPanel2,'style','Edit','Units','pixel',...
    'backgroundcolor','w','HorizontalAlignment','left','Enable','on',...
    'String','Si',...
    'Position',[SizePanel2(1)-220,PosCorrection(2)-50,70,20],...
    'Tag','gixs_EditEffc21',...
    'callback',@updateparamsFcn);
uicontrol('Parent',hPanel2,'style','Edit','Units','pixel',...
    'backgroundcolor','w','HorizontalAlignment','left','Enable','on',...
    'String','2.33',...
    'Position',[SizePanel2(1)-145,PosCorrection(2)-50,70,20],...
    'Tag','gixs_EditEffc22',...
    'callback',@updateparamsFcn);
uicontrol('Parent',hPanel2,'style','Edit','Units','pixel',...
    'backgroundcolor','w','HorizontalAlignment','left','Enable','on',...
    'String','0.32',...
    'Position',[SizePanel2(1)-75,PosCorrection(2)-50,70,20],...
    'Tag','gixs_EditEffc23',...
    'callback',@updateparamsFcn);
% --- polarization field
uicontrol('Parent',hPanel2,'style','pushbutton','unit','pixel',...
    'String','Polarization',...
    'Position',[SizePanel2(1)-105*4,PosCorrection(2)-75,100,20],...
    'Tag','gixs_PushbuttonShowPolarization',...
    'TooltipString','Show polarization correction map',...
    'callback',@gixs_PushbuttonShowPolarizationFcn);
uicontrol('Parent',hPanel2,'Style','Popupmenu','unit','pixel',...
    'Position',[SizePanel2(1)-105*3 PosCorrection(2)-75  100 20],...
    'HorizontalAlignment','right','backgroundcolor','w',...
    'String',{'None','Horizontal','Vertical','Unpolarized (lab source)'},...
    'value',2,'Enable','on',...
    'Tag','gixs_PopupmenuPolarization',...
    'callback',@updateparamsFcn);
uicontrol('Parent',hPanel2,'style','Text','Units','pixel',...
    'backgroundcolor',panelcolor,...
    'String','Horizontal polarization fraction',...
    'HorizontalAlignment','right',...
    'Position',[SizePanel2(1)-105*2-2,PosCorrection(2)-75,150,15]);
uicontrol('Parent',hPanel2,'style','Edit','Units','pixel',...
    'backgroundcolor','w','HorizontalAlignment','left','Enable','on',...
    'String','1',...
    'Position',[SizePanel2(1)-55,PosCorrection(2)-75,50,20],...
    'Tag','gixs_EditHPF',...
    'TooltipString','Value between [0,1]. This only applies to horizontal and vertical polarizations. A value of 0.5 is equivalent to unpolarized.',...
    'callback',@updateparamsFcn);
% --- Lorentz correction
uicontrol('Parent',hPanel2,'style','pushbutton','unit','pixel',...
    'String','Lorentz Factor',...
    'Position',[SizePanel2(1)-105*4,PosCorrection(2)-100,100,20],...
    'Tag','gixs_PushbuttonShowLF',...
    'TooltipString','Show Lorentz factor correction matrix',...
    'callback',@gixs_PushbuttonShowLFFcn);
uicontrol('Parent',hPanel2,'style','Text','Units','pixel',...
    'backgroundcolor',panelcolor,'HorizontalAlignment','right',...
    'String','Configuration ',...
    'TooltipString','See manual for details of choosing the right configuration',...
    'Position',[SizePanel2(1)-105*3,PosCorrection(2)-100,100,15]);
lorentzfactortype_str = {...
    '1: No Lorentz correction',...
    '2: In-plane randomly oriented 3D structures (for reflection only)',...
    '3: In-plane randomly oriented 2D structures (for reflection only)',...
    '4: Randomly oriented objects'};
uicontrol('Parent',hPanel2,'Style','Popupmenu','unit','pixel',...
    'Position',[SizePanel2(1)-105*2,PosCorrection(2)-100,205,20],...
    'HorizontalAlignment','right','backgroundcolor','w',...
    'String',lorentzfactortype_str,...
    'value',1,'Enable','on',...
    'Tag','gixs_PopupmenuLorentzFactorType',...
    'callback',@updateparamsFcn);

% --- flat field
uicontrol('Parent',hPanel2,'style','pushbutton','unit','pixel',...
    'String','Flat Field',...
    'Position',[SizePanel2(1)-105*4,PosCorrection(2)-125,100,20],...
    'Tag','gixs_PushbuttonShowFF',...
    'TooltipString','Show current flat field',...
    'callback',@gixs_PushbuttonShowFFFcn);
uicontrol('Parent',hPanel2,'style','pushbutton','unit','pixel',...
    'String','Remove FF',...
    'Position',[SizePanel2(1)-105*3,PosCorrection(2)-125,100,20],...
    'Tag','gixs_PushbuttonRemoveFF',...
    'TooltipString','Remove flat field correction',...
    'callback',@gixs_PushbuttonRemoveFFFcn);
uicontrol('Parent',hPanel2,'style','pushbutton','unit','pixel',...
    'String','Default FF',...
    'Position',[SizePanel2(1)-105*2,PosCorrection(2)-125,100,20],...
    'Tag','gixs_PushbuttonRestoreFF',...
    'TooltipString','Restore to default flat field',...
    'callback',@gixs_PushbuttonRestoreFFFcn);
uicontrol('Parent',hPanel2,'style','pushbutton','unit','pixel',...
    'String','Load FF File...',...
    'Position',[SizePanel2(1)-105*1,PosCorrection(2)-125,100,20],...
    'Tag','gixs_PushbuttonLoadFF',...
    'TooltipString','Load flat field .tif or .mat mask file. Correction is performed by multiplication.',...
    'callback',@gixs_PushbuttonLoadFFFcn);

% --- custom correction
uicontrol('Parent',hPanel2,'style','pushbutton','unit','pixel',...
    'String','Custom Correction',...
    'Position',[SizePanel2(1)-105*4,PosCorrection(2)-150,100,20],...
    'Tag','gixs_PushbuttonShowCC',...
    'TooltipString','Show current custom correction',...
    'callback',@gixs_PushbuttonShowCCFcn);
uicontrol('Parent',hPanel2,'style','pushbutton','unit','pixel',...
    'String','Remove CC',...
    'Position',[SizePanel2(1)-105*3,PosCorrection(2)-150,100,20],...
    'Tag','gixs_PushbuttonRemoveCC',...
    'TooltipString','Remove custom correction',...
    'callback',@gixs_PushbuttonRemoveCCFcn);
uicontrol('Parent',hPanel2,'style','pushbutton','unit','pixel',...
    'String','Default CC',...
    'Position',[SizePanel2(1)-105*2,PosCorrection(2)-150,100,20],...
    'Tag','gixs_PushbuttonRestoreCC',...
    'TooltipString','Restore to default custom correction',...
    'callback',@gixs_PushbuttonRestoreCCFcn);
uicontrol('Parent',hPanel2,'style','pushbutton','unit','pixel',...
    'String','Load CC File...',...
    'Position',[SizePanel2(1)-105*1,PosCorrection(2)-150,100,20],...
    'Tag','gixs_PushbuttonLoadCC',...
    'TooltipString','Load custom correction .tif or .mat file. Correction is performed by multiplication.',...
    'callback',@gixs_PushbuttonLoadCCFcn);

% --- plot parameters
PosPP = [5,SizePanel2(2)-375,100,15];
uicontrol('Parent',hPanel2,'style','Text','Units','pixel',...
    'backgroundcolor',panelcolor,'HorizontalAlignment','left',...
    'String','Plot Settings:',...
    'Position',PosPP);
% Scale
uicontrol('Parent',hPanel2,'style','Text','Units','pixel',...
    'backgroundcolor',panelcolor,'HorizontalAlignment','right',...
    'String','Data to display ',...
    'TooltipString','Selection does not affect data analysis such as linecut, which uses the fully corrected data.',...
    'Position',[SizePanel2(1)-105*4,PosPP(2)-25,100,15]);
uicontrol('Parent',hPanel2,'Style','Popupmenu','unit','pixel',...
    'Position',[SizePanel2(1)-105*3 PosPP(2)-25  100 20],...
    'HorizontalAlignment','right','backgroundcolor','w',...
    'String',{'Masked w/ FF','Fully Corrected','Raw Data'},...
    'value',1,'Enable','on',...
    'Tag','gixs_PopupmenuPlotImageFlag',...
    'callback',@updateparamsFcn);
% Scale
uicontrol('Parent',hPanel2,'style','Text','Units','pixel',...
    'backgroundcolor',panelcolor,'HorizontalAlignment','right',...
    'String','Image scale ',...
    'Position',[SizePanel2(1)-105*4,PosPP(2)-50,100,15]);
uicontrol('Parent',hPanel2,...
    'Style','Popupmenu',...
    'unit','pixel',...
    'Position',[SizePanel2(1)-105*3 PosPP(2)-50  100 20],...
    'HorizontalAlignment','right',...
    'backgroundcolor','w',...
    'String',{'linear','log'},...
    'value',2,...
    'Enable','on',...
    'Tag','gixs_PopupmenuPlotScale',...
    'callback',@updateparamsFcn);
% axis type
uicontrol('Parent',hPanel2,...
    'style','Text',...
    'Units','pixel',...
    'backgroundcolor',panelcolor,...
    'String','Axis label ',...
    'HorizontalAlignment','right',...
    'Position',[SizePanel2(1)-105*4,PosPP(2)-75,100,15]);
uicontrol('Parent',hPanel2,...
    'Style','Popupmenu',...
    'unit','pixel',...
    'Position',[SizePanel2(1)-105*3 PosPP(2)-75  100 20],...
    'HorizontalAlignment','right',...
    'backgroundcolor','w',...
    'String',{'pixel','q (reflection only)','angle (reflection only)'},...
    'value',1,...
    'Enable','on',...
    'Tag','gixs_PopupmenuPlotAxisLabel',...
    'callback',@updateparamsFcn);
uicontrol('Parent',hPanel2,...
    'style','pushbutton',...
    'String','Reset Axis',...
    'unit','pixel',...
    'Position',[SizePanel2(1)-105*3,PosPP(2)-100,100,20],...
    'Tag','gixs_PushbuttonResetAxis',...
    'callback',@gixs_PushbuttonResetAxisFcn);
% - Color settings
uicontrol('Parent',hPanel2,...
    'style','Text',...
    'Units','pixel',...
    'backgroundcolor',panelcolor,...
    'String','Color limits set mode ',...
    'HorizontalAlignment','right',...
    'Position',[SizePanel2(1)-105*2,PosPP(2)-25,100,15]);
uicontrol('Parent',hPanel2,...
    'Style','Popupmenu',...
    'unit','pixel',...
    'Position',[SizePanel2(1)-105 ,PosPP(2)-25  100 20],...
    'HorizontalAlignment','right',...
    'backgroundcolor','w',...
    'String',{'Manual','Automatic'},...
    'value',1,...
    'Enable','on',...
    'Tag','gixs_PopupmenuPlotCLimsType',...
    'callback',@updateparamsFcn);
% CLims1
uicontrol('Parent',hPanel2,...
    'style','Text',...
    'Units','pixel',...
    'backgroundcolor',panelcolor,...
    'String','CLim min ',...
    'HorizontalAlignment','right',...
    'Position',[SizePanel2(1)-105*2,PosPP(2)-50,50,15]);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','pixel',...
    'backgroundcolor','w',...
    'String','1',...
    'HorizontalAlignment','left',...
    'Enable','on',...
    'Position',[SizePanel2(1)-105-2.5, PosPP(2)-50,50,20],...
    'Tag','gixs_EditPlotCLims1',...
    'callback',@updateparamsFcn);
uicontrol('Parent',hPanel2,...
    'style','pushbutton',...
    'String','<<',...
    'unit','pixel',...
    'Position',[SizePanel2(1)-105-50-5,PosPP(2)-50,25,20],...
    'Tag','gixs_PushbuttonCLims1MM',...
    'callback',@gixs_PushbuttonCLimsFcn);
uicontrol('Parent',hPanel2,...
    'style','pushbutton',...
    'String','<',...
    'unit','pixel',...
    'Position',[SizePanel2(1)-105-25-5,PosPP(2)-50,25,20],...
    'Tag','gixs_PushbuttonCLims1M',...
    'callback',@gixs_PushbuttonCLimsFcn);
uicontrol('Parent',hPanel2,...
    'style','pushbutton',...
    'String','>',...
    'unit','pixel',...
    'Position',[SizePanel2(1)-105+50,PosPP(2)-50,25,20],...
    'Tag','gixs_PushbuttonCLims1P',...
    'callback',@gixs_PushbuttonCLimsFcn);
uicontrol('Parent',hPanel2,...
    'style','pushbutton',...
    'String','>>',...
    'unit','pixel',...
    'Position',[SizePanel2(1)-105+75,PosPP(2)-50,25,20],...
    'Tag','gixs_PushbuttonCLims1PP',...
    'callback',@gixs_PushbuttonCLimsFcn);
% CLims2
uicontrol('Parent',hPanel2,...
    'style','Text',...
    'Units','pixel',...
    'backgroundcolor',panelcolor,...
    'String','CLim max ',...
    'HorizontalAlignment','right',...
    'Position',[SizePanel2(1)-105*2,PosPP(2)-75,50,15]);
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','pixel',...
    'backgroundcolor','w',...
    'String','2000',...
    'HorizontalAlignment','left',...
    'Enable','on',...
    'Position',[SizePanel2(1)-105-2.5, PosPP(2)-75,50,20],...
    'Tag','gixs_EditPlotCLims2',...
    'callback',@updateparamsFcn);
uicontrol('Parent',hPanel2,...
    'style','pushbutton',...
    'String','<<',...
    'unit','pixel',...
    'Position',[SizePanel2(1)-105-50-5,PosPP(2)-75,25,20],...
    'Tag','gixs_PushbuttonCLims2MM',...
    'callback',@gixs_PushbuttonCLimsFcn);
uicontrol('Parent',hPanel2,...
    'style','pushbutton',...
    'String','<',...
    'unit','pixel',...
    'Position',[SizePanel2(1)-105-25-5,PosPP(2)-75,25,20],...
    'Tag','gixs_PushbuttonCLims2M',...
    'callback',@gixs_PushbuttonCLimsFcn);
uicontrol('Parent',hPanel2,...
    'style','pushbutton',...
    'String','>',...
    'unit','pixel',...
    'Position',[SizePanel2(1)-105+50,PosPP(2)-75,25,20],...
    'Tag','gixs_PushbuttonCLims2P',...
    'callback',@gixs_PushbuttonCLimsFcn);
uicontrol('Parent',hPanel2,...
    'style','pushbutton',...
    'String','>>',...
    'unit','pixel',...
    'Position',[SizePanel2(1)-105+75,PosPP(2)-75,25,20],...
    'Tag','gixs_PushbuttonCLims2PP',...
    'callback',@gixs_PushbuttonCLimsFcn);
uicontrol('Parent',hPanel2,...
    'style','pushbutton',...
    'String','Colormap Editor',...
    'unit','pixel',...
    'Position',[SizePanel2(1)-105,PosPP(2)-100,100,20],...
    'Tag','gixs_PushbuttonColormapEditor',...
    'callback',@gixs_PushbuttonColormapEditorFcn);
% manual tick label
uicontrol('Parent',hPanel2,...
    'style','Text',...
    'Units','pixel',...
    'backgroundcolor',panelcolor,...
    'String','Manual tick label ',...
    'HorizontalAlignment','right',...
    'Position',[SizePanel2(1)-105*4,PosPP(2)-125,100,15]); 
uicontrol('Parent',hPanel2,...
    'Style','Popupmenu',...
    'unit','pixel',...
    'Position',[SizePanel2(1)-105*3 PosPP(2)-125 100 20],...
    'HorizontalAlignment','right',...
    'backgroundcolor','w',...
    'String',{'Horizontal axis','Vertical axis'},...
    'value',1,...
    'Enable','on',...
    'Tag','gixs_PopupmenuManualTickLabel');
uicontrol('Parent',hPanel2,...
    'style','Edit',...
    'Units','pixel',...
    'backgroundcolor','w',...
    'Tooltipstring','Provide an array of tick values such as -1:0.1:1, [1,3,4], etc. Empty or invalid array hides ticks.',...
    'String','',...
    'HorizontalAlignment','left',...
    'Enable','on',...
    'Position',[SizePanel2(1)-105*2, PosPP(2)-125,100,20],...
    'Tag','gixs_EditManualTickLabel');
uicontrol('Parent',hPanel2,...
    'style','pushbutton',...
    'String','Label Ticks',...
    'unit','pixel',...
    'Position',[SizePanel2(1)-105,PosPP(2)-125,100,20],...
    'Tag','gixs_PushbuttonManualTickLabel',...
    'callback',@gixs_PushbuttonManualTickLabelFcn);

% --- mask parameters
PosMask = [5,SizePanel2(2)-525,100,15];
uicontrol('Parent',hPanel2,...
    'style','Text',...
    'Units','pixel',...
    'backgroundcolor',panelcolor,...
    'String','Mask Tools:',...
    'HorizontalAlignment','left',...
    'Position',PosMask);
uicontrol('Parent',hPanel2,...
    'style','pushbutton',...
    'String','Show Mask',...
    'unit','pixel',...
    'Position',[SizePanel2(1)-105*4,PosMask(2)-25,100,20],...
    'Tag','gixs_PushbuttonShowMask',...
    'TooltipString','Show current mask in a seperate figure',...
    'callback',@gixs_PushbuttonShowMaskFcn);
uicontrol('Parent',hPanel2,...
    'style','pushbutton',...
    'String','Include ...',...
    'unit','pixel',...
    'Position',[SizePanel2(1)-105*3,PosMask(2),100,20],...
    'Tag','gixs_PushbuttonIncludeMask',...
    'TooltipString','Include region interactively',...
    'callback',@gixs_PushbuttonAddMaskFcn);
uicontrol('Parent',hPanel2,...
    'style','pushbutton',...
    'String','Exclude ...',...
    'unit','pixel',...
    'Position',[SizePanel2(1)-105*2,PosMask(2),100,20],...
    'Tag','gixs_PushbuttonExcludeMask',...
    'TooltipString','Exclude region interactively',...
    'callback',@gixs_PushbuttonAddMaskFcn);
uicontrol('Parent',hPanel2,...
    'style','pushbutton',...
    'String','Load Mask File...',...
    'unit','pixel',...
    'Position',[SizePanel2(1)-105,PosMask(2),100,20],...
    'Tag','gixs_PushbuttonLoadMask',...
    'TooltipString','Add additional mask from .tif or .mat mask file (1/0 binary)',...
    'callback',@gixs_PushbuttonLoadMaskFcn);
uicontrol('Parent',hPanel2,...
    'style','pushbutton',...
    'String','Clear Mask',...
    'unit','pixel',...
    'Position',[SizePanel2(1)-105*3,PosMask(2)-25,100,20],...
    'Tag','gixs_PushbuttonClearMask',...
    'TooltipString','Clear mask',...
    'callback',@gixs_PushbuttonClearMaskFcn);
uicontrol('Parent',hPanel2,...
    'style','pushbutton',...
    'String','Default',...
    'unit','pixel',...
    'Position',[SizePanel2(1)-210,PosMask(2)-25,100,20],...
    'Tag','gixs_PushbuttonRestoreMask',...
    'TooltipString','Restore to default mask',...
    'callback',@gixs_PushbuttonRestoreMaskFcn);
uicontrol('Parent',hPanel2,...
    'style','pushbutton',...
    'String','Export Mask ...',...
    'unit','pixel',...
    'Position',[SizePanel2(1)-105,PosMask(2)-25,100,20],...
    'Tag','gixs_PushbuttonExportMask',...
    'TooltipString','Export current mask to .mat or .tif mask file',...
    'callback',@gixs_PushbuttonExportMaskFcn);

% --- image orientaion
PosOrientation = [5,SizePanel2(2)-570,300,15];
uicontrol('Parent',hPanel2,...
    'style','Text',...
    'Units','pixel',...
    'backgroundcolor',panelcolor,...
    'String','Image Orientation:',...
    'HorizontalAlignment','left',...
    'Position',PosOrientation);
uicontrol('Parent',hPanel2,...
    'style','Text',...
    'Units','pixel',...
    'backgroundcolor',panelcolor,...
    'String','Mirror',...
    'HorizontalAlignment','center',...
    'Position',[SizePanel2(1)-105*3 PosOrientation(2) 100 15]);
uicontrol('Parent',hPanel2,...
    'style','Text',...
    'Units','pixel',...
    'backgroundcolor',panelcolor,...
    'String','Rotation (deg)',...
    'TooltipString','Clockwise',...
    'HorizontalAlignment','center',...
    'Position',[SizePanel2(1)-105*2 PosOrientation(2) 100 15]);
uicontrol('Parent',hPanel2,...
    'Style','Popupmenu',...
    'unit','pixel',...
    'Position',[SizePanel2(1)-105*3 PosOrientation(2)-25  100 20],...
    'HorizontalAlignment','right',...
    'backgroundcolor','w',...
    'String',{'None','Left-right','Up-down'},...
    'value',1,...
    'Enable','on',...
    'callback',@updateparamsFcn,...
    'Tag','gixs_PopupmenuOrientationFlip');
uicontrol('Parent',hPanel2,...
    'Style','Popupmenu',...
    'unit','pixel',...
    'Position',[SizePanel2(1)-105*2 PosOrientation(2)-25  100 20],...
    'HorizontalAlignment','left',...
    'backgroundcolor','w',...
    'String',{'0','90','180','270'},...
    'value',1,...
    'Enable','on',...
    'callback',@updateparamsFcn,...
    'Tag','gixs_PopupmenuOrientationRotation');
uicontrol('Parent',hPanel2,...
    'style','pushbutton',...
    'String','Apply',...
    'unit','pixel',...
    'Position',[SizePanel2(1)-105 PosOrientation(2)-25  100 20],...
    'Tag','gixs_PushbuttonOrientationApply',...
    'TooltipString','Apply orientation changes to the current image. This may take a few seconds to a minute. One should do this after flat field and mask are applied.',...
    'callback',@gixs_PushbuttonOrientationApply);

% --- image data processing tools
PosProcessing = [5,SizePanel2(2)-615,300,15];
uicontrol('Parent',hPanel2,...
    'style','Text',...
    'Units','pixel',...
    'backgroundcolor',panelcolor,...
    'String','Image Information and Data Processing/Analysis Tools:',...
    'HorizontalAlignment','left',...
    'Position',PosProcessing);
uicontrol('Parent',hPanel2,...
    'style','pushbutton',...
    'String',' Data Processing ...',...
    'unit','pixel',...
    'Position',[SizePanel2(1)-105*4,PosProcessing(2)-25,100,20],...
    'Tag','gixs_PushbuttonImanaTools',...
    'TooltipString','Image data processing and analysis tools such linecut, reshaping, simulation, etc.',...
    'callback',@gixsimana);
uicontrol('Parent',hPanel2,...
    'style','pushbutton',...
    'String','Calibrate Angles ...',...
    'unit','pixel',...
    'Position',[SizePanel2(1)-105*4,PosProcessing(2)-50,100,20],...
    'Tag','gixs_PushbuttonCalibrateAngles',...
    'TooltipString','Calculate incident and tilt angles via specular reflection',...
    'callback',@gixs_PushbuttonGetBeam0COMFcn);
uicontrol('Parent',hPanel2,...
    'style','pushbutton',...
    'String','Copy to WS',...
    'unit','pixel',...
    'Position',[SizePanel2(1)-105*3,PosProcessing(2)-25,100,20],...
    'Tag','gixs_PushbuttonCopyToWorkSpace',...
    'TooltipString','Copy gixsdata of current image to Matlab workspace',...
    'callback',@gixs_PushbuttonCopyToWorkspaceFcn);
uicontrol('Parent',hPanel2,...
    'style','pushbutton',...
    'String','Export Image',...
    'unit','pixel',...
    'Position',[SizePanel2(1)-105*3,PosProcessing(2)-50,100,20],...
    'Tag','gixs_PushbuttonExportImage',...
    'TooltipString','Export current masked image (flat field corrected if the correction exists) to .tif (int32 with header saved) or .mat (no header) format. Unmasked pixles will be assinged with -3.',...
    'callback',@gixs_PushbuttonExportImageFcn);
uicontrol('Parent',hPanel2,...
    'style','pushbutton',...
    'String','Image Header',...
    'unit','pixel',...
    'Position',[SizePanel2(1)-105*2,PosProcessing(2)-25,100,20],...
    'Tag','gixs_PushbuttonImageHeader',...
    'TooltipString','Display header of current image',...
    'callback',@gixs_PushbuttonImageHeaderFcn);
uicontrol('Parent',hPanel2,...
    'style','pushbutton',...
    'String','Image Stats',...
    'unit','pixel',...
    'Position',[SizePanel2(1)-105*2,PosProcessing(2)-50,100,20],...
    'Tag','gixs_PushbuttonImageStats',...
    'TooltipString','Display statistics of current masked image',...
    'callback',@gixs_PushbuttonImageStatsFcn);
uicontrol('Parent',hPanel2,...
    'style','pushbutton',...
    'String','Find COM',...
    'unit','pixel',...
    'Position',[SizePanel2(1)-105,PosProcessing(2)-25,100,20],...
    'Tag','gixs_PushbuttonFindCOM',...
    'TooltipString','Find center of mass',...
    'callback',@gixs_PushbuttonGetBeam0COMFcn);
uicontrol('Parent',hPanel2,...
    'style','pushbutton',...
    'String','Find Circle Center',...
    'unit','pixel',...
    'Position',[SizePanel2(1)-105,PosProcessing(2)-50,100,20],...
    'Tag','gixs_PushbuttonFindCircleCenter',...
    'TooltipString','Left clicks for at least 3 points to determine circle center coordinates and radius. ''Backspace'' to remove previous point. ''Enter'' to finish.',...
    'callback',@gixs_PushbuttonFindCircleCenterFcn);


% --- panel 3 ---
uicontrol('Parent',hPanel3,...
    'style','pushbutton',...
    'String','Gap Fill ...',...
    'unit','pixel',...
    'Position',[SizePanel3(1)-105*4,SizePanel3(2)-40,95,20],...
    'Tag','gixs_PushbuttonPatch',...
    'TooltipString','Gap fill for Pilatus 1MF (8ID) images',...
    'callback','gapfillgui');
uicontrol('Parent',hPanel3,...
    'style','pushbutton',...
    'String','Batch FF ...',...
    'unit','pixel',...
    'Position',[SizePanel3(1)-105*3,SizePanel3(2)-40,95,20],...
    'Tag','gixs_PushbuttonBatchFF',...
    'TooltipString','Apply flat field in batch mode for image files and save back to .tif files',...
    'callback','batchff');
uicontrol('Parent',hPanel3,...
    'style','pushbutton',...
    'String','Sum Images ...',...
    'unit','pixel',...
    'Position',[SizePanel3(1)-105*2,SizePanel3(2)-40,95,20],...
    'Tag','gixs_PushbuttonSumImages',...
    'TooltipString','Sum Images',...
    'callback','sumimggui');
uicontrol('Parent',hPanel3,...
    'style','pushbutton',...
    'String','SDD Calibration ...',...
    'unit','pixel',...
    'Position',[SizePanel3(1)-105,SizePanel3(2)-40,95,20],...
    'Tag','gixs_PushbuttonSDD',...
    'TooltipString','Calibrate SDD and incident angle offset using specular reflections.',...
    'callback','sddcalibgui');
uicontrol('Parent',hPanel3,...
    'style','pushbutton',...
    'String','ROI Scan ...',...
    'unit','pixel',...
    'Position',[SizePanel3(1)-105*4,SizePanel3(2)-65,95,20],...
    'Tag','gixs_PushbuttonROIScan',...
    'TooltipString','Get ROI Scan',...
    'callback','roiscangui');
% uicontrol('Parent',hPanel3,...
%     'style','pushbutton',...
%     'String','Merge Scans ...',...
%     'unit','pixel',...
%     'Position',[SizePanel3(1)-105*3,SizePanel3(2)-65,95,20],...
%     'Tag','gixs_PushbuttonMergeScans',...
%     'TooltipString','Merge Line Scans',...
%     'callback','roiscan');
uicontrol('Parent',hPanel3,...
    'style','pushbutton',...
    'String','Line Fit ...',...
    'unit','pixel',...
    'Position',[SizePanel3(1)-105,SizePanel3(2)-65,95,20],...
    'Tag','gixs_PushbuttonLineFitGUI',...
    'TooltipString','Start LineFitGUI for 1D line fitting',...
    'callback','linefitgui');


% --- main figure
uicontrol('Parent',hFigGIXS,...
    'style','pushbutton',...
    'String','Quit',...
    'unit','pixel',...
    'Position',[5,5,70,20],...
    'Tag','gixs_PushbuttonQuit',...
    'TooltipString','Quit GIXSGUI',...
    'callback',@gixs_CloseRequestFcn);
uicontrol('Parent',hFigGIXS,...
    'style','pushbutton',...
    'String','Close All',...
    'unit','pixel',...
    'Position',[80,5,70,20],...
    'Tag','gixs_PushbuttonCloseAll',...
    'TooltipString','Close all figures',...
    'callback',@gixs_PushbuttonCloseAllFcn);
uicontrol('Parent',hFigGIXS,...
    'style','pushbutton',...
    'String','Help',...
    'unit','pixel',...
    'Position',[240,5,70,20],...
    'Tag','gixs_PushbuttonDoc',...
    'TooltipString','Open documentation file in Adobe Acrobat',...
    'callback','try, open(''doc.pdf''); end;');

initialize(hFigGIXS);
return;
end

function initialize(hFigGIXS)
%udata.path = '';
udata.path = pwd;   % use the current path;
udata.flist = {};
udata.sortby = 1;
udata.selection = 0;
udata.gdata = [];
% default params
udata.paramsDefault = gixsdata;
% linecut
udata.linecutParams.PlotScale = 1;
udata.linecutParams.FigureStyle = 1;
udata.linecutParams.FreeCutX = 9;
udata.linecutParams.FreeCutPixels = [1 1;1 1;];
udata.linecutParams.X = 9;
udata.linecutParams.NOfPts = 100;
udata.linecutParams.Constraint = [...
    1,10,1,100; ...
    1,12,NaN, NaN;...
    1,12,NaN, NaN;...
    1,12,NaN, NaN;];
udata.linecutParams.DataFlag = 2; %1/2: use MaskedData or Solidanglecorreted data
udata.linecutResult.ImFileName = {};
udata.linecutResult.XVarName = {};
udata.linecutResult.XData = [];
udata.linecutResult.YData = [];
udata.linecutResult.MapData = [];
udata.linecutResult.Constraint = [];
% reshape
udata.reshapeParams.X = 6;
udata.reshapeParams.Y = 3;
udata.reshapeParams.XNOfPts = 100;
udata.reshapeParams.YNOfPts = 100;
udata.reshapeParams.XRange = [0,2];
udata.reshapeParams.YRange = [0,2];
udata.reshapeParams.Inpaint = 2;
udata.reshapeParams.InpaintMethod = 0;

udata.reshapeResult.ImFileName = {};
udata.reshapeResult.XVarName = {};
udata.reshapeResult.YVarName = {};
udata.reshapeResult.XData = [];
udata.reshapeResult.YData = [];
udata.reshapeResult.ImData = [];
udata.reshapeResult.CountData = [];
udata.reshapeResult.ImDataInpaint = [];
udata.reshapeResult.InpaintMethod = 0;

udata.peakFinder = {};
udata.diffractionPos.Lattice = [100,173,Inf,90,90,90];
udata.diffractionPos.SGUVW = 12;
udata.diffractionPos.Orientation = [0,1,0];
udata.diffractionPos.OrientationMethod = 2;
udata.diffractionPos.Miller.H = [-4:4];
udata.diffractionPos.Miller.K = [-4:4];
udata.diffractionPos.Miller.L = [0];
udata.diffractionPos.AlphaC = 0.17;
udata.diffractionPos.Mu = 0;
udata.diffractionPos.QDeadband = 1e-8;
udata.diffractionPos.QCutoff = 1e-6;
udata.diffractionPos.result = [];
% save
set(hFigGIXS,'UserData',udata);
% update path;
updatepath(hFigGIXS);
end

function updatepath(hFigGIXS)
udata = get(hFigGIXS,'UserData');
if isempty(udata.path), return; end;
% --- get folders
a_dir = dir(udata.path);
a_dir = a_dir(cell2mat({a_dir(:).isdir}));
if length(a_dir) == 2
    dirlist = {'.';'..'};
else
    dirlist = {a_dir(3:end).name}';
    dirtime = {a_dir(3:end).datenum}';
    if udata.sortby == 1
        dirtime = cell2mat(dirtime);
        [~,ix] = sort(dirtime);
        dirlist = dirlist(ix);
    elseif udata.sortby == 2
        dirlist = sort(dirlist);
    end
    dirlist = ['.';'..';dirlist];
end
% --- get files
a = [dir(fullfile(udata.path,'*.tif'));
    dir(fullfile(udata.path,'*.tiff'));
    dir(fullfile(udata.path,'*.mat'));
    dir(fullfile(udata.path,'*.cbf'));
    dir(fullfile(udata.path,'*.fits'));
    dir(fullfile(udata.path,'*.edf'));
    dir(fullfile(udata.path,'*.imm'))];
if isempty(a)
    flist = {};
else
    flist = {a.name}';
    ftime = {a.datenum}';
    if udata.sortby == 1
        ftime = cell2mat(ftime);
        [~,ix] = sort(ftime);
        flist = flist(ix);
    elseif udata.sortby == 2
        flist = sort(flist);
    end
end
udata.flist = [dirlist;flist];
set(findobj(hFigGIXS,'tag','gixs_TextPath'),'String',udata.path,'TooltipString',udata.path);
% change file subfolder string color
flist_color = udata.flist;
for ii=1:length(dirlist)
    flist_color{ii} = ['<HTML><FONT color="blue">',flist_color{ii},'</FONT></HTML>'];
end
set(findall(hFigGIXS,'tag','gixs_ListboxPathFile'),'String',flist_color,'Value',length(udata.flist));
set(hFigGIXS,'UserData',udata);
end

function plotimage(gdata)
% hf = figure('tag','gixs_data_fig',...
%     'integerHandle','off',...
%     'NumberTitle','off',...
%     'UserData',gdata,...
%     'ButtonDownFcn',@plotimage_ButtonDownFcn);
% hc = datacursormode(hf);
% set(hc,'UpdateFcn',@gixsdatacursor);
hf = figure('tag','gixs_data_fig',...
    'integerHandle','off',...
    'NumberTitle','off',...
    'ButtonDownFcn',@plotimage_ButtonDownFcn);
imagesc(gdata);
end

function plotimage_ButtonDownFcn(~,~)
if strcmp(get(gcbf,'SelectionType'),'alt')
    gdata = get(gcbf,'UserData');
    if isempty(gdata) || ~isvalid(gdata),
        set(gcbf,'UserData',[]);
        set(gcbf,'ButtonDownFcn','');
        return;
    end
    hFigGIXS = findall(0,'Tag','gixs_fig');
    udata = get(hFigGIXS,'UserData');
    if verLessThan('matlab','8.4')    
        hfigs = cell2mat({udata.gdata.FigHandle}');
        udata.selection = find(hfigs==gcbf);
    else
        hfigs = {udata.gdata.FigHandle}';
        udata.selection = find(cellfun(@(x)eq(x,gcbf),hfigs)~=0);       
    end
    set(hFigGIXS,'UserData',udata);
    set(findall(hFigGIXS,'tag','gixs_ListboxImage'),'value',udata.selection);
    updateparamsGUI(hFigGIXS,gdata);
end
end

% function output_txt =  gixsdatacursor(~,event_obj)
% gdata = get(gcbf,'UserData');
% if isempty(gdata) || ~isvalid(gdata)
%     set(gcbf,'UserData',[]);
%     output_txt = {'Image handle has been removed.';'Please delete all datatips to reset.'};
%     hc = datacursormode(gcbf);
%     set(hc,'UpdateFcn',[]);
%     return;
% end
% himg = get(event_obj,'target');
% xdata = get(himg,'xdata');
% ydata = get(himg,'ydata');
% pos = get(event_obj,'position');
% %[~,n]=min(abs(xdata-pos(1))); n=n(1);
% %[~,m]=min(abs(ydata-pos(2))); m=m(1);
% n = round(gu_axes2pix(gdata.ImDim(1),xdata,pos(1)));
% m = round(gu_axes2pix(gdata.ImDim(2),ydata,pos(2)));
% % construct output text
% output_txt = {['[x,y] = [',num2str(n),',',num2str(m),']']};
% output_txt = [output_txt;['I_raw          = ',num2str(gdata.RawData(m,n))]];
% output_txt = [output_txt;['I_masked    = ',num2str(gdata.MaskedData(m,n))]];
% if ~isempty(gdata.SolidAngleCorrectedData)
%     output_txt = [output_txt;['I_corrected = ',num2str(gdata.SolidAngleCorrectedData(m,n))]];
% end
% if isempty(gdata.QMap),return; end
% output_txt = [output_txt;['q          = ',num2str(gdata.QMap(m,n))]];
% output_txt = [output_txt;['phi        = ',num2str(gdata.PhiMap(m,n))]];
% if isempty(gdata.QzMap), return; end
% output_txt = [output_txt;['qz         = ',num2str(gdata.QzMap(m,n))]];
% output_txt = [output_txt;['qx         = ',num2str(gdata.QxMap(m,n))]];
% output_txt = [output_txt;['qy         = ',num2str(gdata.QyMap(m,n))]];
% output_txt = [output_txt;['qr         = ',num2str(gdata.QrMap(m,n))]];
% output_txt = [output_txt;['2Theta = ',num2str(gdata.TwoThetaMap(m,n))]];
% output_txt = [output_txt;['Alphaf = ',num2str(gdata.AlphafMap(m,n))]];
% output_txt = [output_txt;['Chi    = ',num2str(gdata.ChiMap(m,n))]];

function updateparamsGUI(hFigGIXS,p)
% set cameara
if strcmpi(p.Camera,'Pilatus')
    v = 1;
elseif strcmpi(p.Camera,'MAR165')
    v = 2;
elseif strcmpi(p.Camera,'Lambda (Si)')
    v = 3;
elseif strcmpi(p.Camera,'Eiger (Si)')
    v = 4;    
elseif strcmpi(p.Camera,'Other')
    v = 5;
end
set(findall(hFigGIXS,'tag','gixs_PopupmenuCamera'),'value',v);
% set pixel size
set(findall(hFigGIXS,'tag','gixs_EditPixelX'),'string',p.PixelSize(1));
set(findall(hFigGIXS,'tag','gixs_EditPixelY'),'string',p.PixelSize(2));
% set energy
set(findall(hFigGIXS,'tag','gixs_EditEnergy'),'string',p.XEnergy);
% set image dimension
set(findall(hFigGIXS,'tag','gixs_EditDimX'),'string',p.ImDim(1));
set(findall(hFigGIXS,'tag','gixs_EditDimY'),'string',p.ImDim(2));
% set SDD
set(findall(hFigGIXS,'tag','gixs_EditSDD'),'string',p.SDD);
% set beam0
set(findall(hFigGIXS,'tag','gixs_EditBeam0X'),'string',p.Beam0(1));
set(findall(hFigGIXS,'tag','gixs_EditBeam0Y'),'string',p.Beam0(2));
% set geometry
set(findall(hFigGIXS,'tag','gixs_PopupmenuGeometry'),'Value',p.Geometry);
% set specular
set(findall(hFigGIXS,'tag','gixs_EditSpecularX'),'string',p.Specular(1));
set(findall(hFigGIXS,'tag','gixs_EditSpecularY'),'string',p.Specular(2));
% set phi mode
set(findall(hFigGIXS,'tag','gixs_PopupmenuPhiMode'),'Value',p.PhiMode);
% set incident angle
set(findall(hFigGIXS,'tag','gixs_EditIncidentAngle'),'string',p.IncidentAngle);
% set efficency correction parameters
set(findall(hFigGIXS,'tag','gixs_EditEffc11'),'string',p.EfficiencyCorrection{1,1});
set(findall(hFigGIXS,'tag','gixs_EditEffc12'),'string',num2str(p.EfficiencyCorrection{1,2}));
set(findall(hFigGIXS,'tag','gixs_EditEffc13'),'string',num2str(p.EfficiencyCorrection{1,3}));
set(findall(hFigGIXS,'tag','gixs_EditEffc21'),'string',p.EfficiencyCorrection{2,1});
set(findall(hFigGIXS,'tag','gixs_EditEffc22'),'string',num2str(p.EfficiencyCorrection{2,2}));
set(findall(hFigGIXS,'tag','gixs_EditEffc23'),'string',num2str(p.EfficiencyCorrection{2,3}));
% set polariztion mode
set(findall(hFigGIXS,'tag','gixs_PopupmenuPolarization'),'Value',p.PolarizationMode);
% set hpf
set(findall(hFigGIXS,'tag','gixs_EditHPF'),'string',num2str(p.HorizontalPolarizationFraction));
if p.PolarizationMode == 1 || p.PolarizationMode == 4
    set(findall(hFigGIXS,'tag','gixs_EditHPF'),'Enable','off');
else
    set(findall(hFigGIXS,'tag','gixs_EditHPF'),'Enable','on');    
end
% set lorentz
set(findall(hFigGIXS,'tag','gixs_PopupmenuLorentzFactorType'),'value',p.LorentzFactorType);
% set plot image flag
set(findall(hFigGIXS,'tag','gixs_PopupmenuPlotImageFlag'),'Value',p.PlotImageFlag);
% set plot scale
set(findall(hFigGIXS,'tag','gixs_PopupmenuPlotScale'),'Value',p.PlotScale);
% set axis label
set(findall(hFigGIXS,'tag','gixs_PopupmenuPlotAxisLabel'),'Value',p.PlotAxisLabel);
% set plot clims type
set(findall(hFigGIXS,'tag','gixs_PopupmenuPlotCLimsType'),'Value',p.PlotCLimsType);
% set plot clims
set(findall(hFigGIXS,'tag','gixs_EditPlotCLims1'),'string',p.PlotCLims(1));
set(findall(hFigGIXS,'tag','gixs_EditPlotCLims2'),'string',p.PlotCLims(2));
end

function updateparamsFcn(~,~)
hFigGIXS = gcbf;
hObj = gcbo;
udata = get(hFigGIXS,'UserData');
if isempty(udata.gdata)
    p = udata.paramsDefault;
else
    p = udata.gdata(udata.selection);
end
% get camera
hCamera = findall(hFigGIXS,'tag','gixs_PopupmenuCamera');
sCamera = get(hCamera,'string');
p.Camera = sCamera{get(hCamera,'value')};
% get pixel size
hPX = findall(hFigGIXS,'tag','gixs_EditPixelX');
hPY = findall(hFigGIXS,'tag','gixs_EditPixelY');
if get(hCamera,'value') ==  5
    p.PixelSize = [str2double(get(hPX,'string')),str2double(get(hPY,'string'))];
else
    set(hPX,'String',p.PixelSize(1));
    set(hPY,'String',p.PixelSize(2));
end
% get energy
p.XEnergy = str2double(get(findall(hFigGIXS,'tag','gixs_EditEnergy'),'string'));
% get SDD
p.SDD = str2double(get(findall(hFigGIXS,'tag','gixs_EditSDD'),'string'));
% get beam0
p.Beam0 = [...
    str2double(get(findall(hFigGIXS,'tag','gixs_EditBeam0X'),'string')),...
    str2double(get(findall(hFigGIXS,'tag','gixs_EditBeam0Y'),'string'))];
% get geometry
p.Geometry = get(findall(hFigGIXS,'tag','gixs_PopupmenuGeometry'),'Value');
% get specular
p.Specular = [...
    str2double(get(findall(hFigGIXS,'tag','gixs_EditSpecularX'),'string')),...
    str2double(get(findall(hFigGIXS,'tag','gixs_EditSpecularY'),'string'))];
% get phi mode
p.PhiMode = get(findall(hFigGIXS,'tag','gixs_PopupmenuPhiMode'),'Value');
% get incident angle
p.IncidentAngle = str2double(get(findall(hFigGIXS,'tag','gixs_EditIncidentAngle'),'string'));
%  get image correction paramters
p.EfficiencyCorrection{1,1} = get(findall(hFigGIXS,'tag','gixs_EditEffc11'),'string');
p.EfficiencyCorrection{1,2} = str2double(get(findall(hFigGIXS,'tag','gixs_EditEffc12'),'string'));
p.EfficiencyCorrection{1,3} = str2double(get(findall(hFigGIXS,'tag','gixs_EditEffc13'),'string'));
% get detector efficiency parameters
hEfficiencyCorrection21 = findall(hFigGIXS,'tag','gixs_EditEffc21');
hEfficiencyCorrection22 = findall(hFigGIXS,'tag','gixs_EditEffc22');
hEfficiencyCorrection23 = findall(hFigGIXS,'tag','gixs_EditEffc23');
if strcmpi(p.Camera,'Other')    % for Other camera
    p.EfficiencyCorrection{2,1} = get(hEfficiencyCorrection21,'string');
    p.EfficiencyCorrection{2,2} = str2double(get(hEfficiencyCorrection22,'string'));
    p.EfficiencyCorrection{2,3} = str2double(get(hEfficiencyCorrection23,'string'));
else
    set(hEfficiencyCorrection21,'String',p.EfficiencyCorrection{2,1});
    set(hEfficiencyCorrection22,'String',num2str(p.EfficiencyCorrection{2,2}));
    set(hEfficiencyCorrection23,'String',num2str(p.EfficiencyCorrection{2,3}));
end

p.EfficiencyCorrection{2,1} = get(findall(hFigGIXS,'tag','gixs_EditEffc21'),'string');
p.EfficiencyCorrection{2,2} = str2double(get(findall(hFigGIXS,'tag','gixs_EditEffc22'),'string'));
p.EfficiencyCorrection{2,3} = str2double(get(findall(hFigGIXS,'tag','gixs_EditEffc23'),'string'));
% get polarization mode
p.PolarizationMode = get(findall(hFigGIXS,'tag','gixs_PopupmenuPolarization'),'Value');
% get hpf
hEditHPF = findall(hFigGIXS,'tag','gixs_EditHPF');
hpf = str2double(get(hEditHPF,'string'));
if hpf >=0 && hpf <=1
    p.HorizontalPolarizationFraction = hpf;
else
    set(hEditHPF,'string',num2str(p.HorizontalPolarizationFraction));
end
% get lorentz factor
hPopupmenuLorentzFactorType = findall(hFigGIXS,'tag','gixs_PopupmenuLorentzFactorType');
p.LorentzFactorType = get(hPopupmenuLorentzFactorType,'value');
% return values
if isempty(udata.gdata)
    udata.paramsDefault = p;
else
    if strcmpi(get(hObj,'tag'),'gixs_PopupmenuCamera') || ...
            strcmpi(get(hObj,'tag'),'gixs_EditPixelX') || ...
            strcmpi(get(hObj,'tag'),'gixs_EditPixelY') || ...
            strcmpi(get(hObj,'tag'),'gixs_EditEnergy') || ...
            strcmpi(get(hObj,'tag'),'gixs_EditSDD') || ...
            strcmpi(get(hObj,'tag'),'gixs_EditBeam0X') || ...
            strcmpi(get(hObj,'tag'),'gixs_EditBeam0Y') || ...
            strcmpi(get(hObj,'tag'),'gixs_PopupmenuGeometry') || ...
            strcmpi(get(hObj,'tag'),'gixs_PopupmenuPhiMode') || ...            
            strcmpi(get(hObj,'tag'),'gixs_EditSpecularX') || ...
            strcmpi(get(hObj,'tag'),'gixs_EditSpecularY') || ...
            strcmpi(get(hObj,'tag'),'gixs_EditIncidentAngle') || ...
            strcmpi(get(hObj,'tag'),'gixs_EditEffc11') || ...
            strcmpi(get(hObj,'tag'),'gixs_EditEffc12') || ...
            strcmpi(get(hObj,'tag'),'gixs_EditEffc13') || ...
            strcmpi(get(hObj,'tag'),'gixs_EditEffc21') || ...
            strcmpi(get(hObj,'tag'),'gixs_EditEffc22') || ...
            strcmpi(get(hObj,'tag'),'gixs_EditEffc23') || ...
            strcmpi(get(hObj,'tag'),'gixs_PopupmenuPolarization') || ...
            strcmpi(get(hObj,'tag'),'gixs_EditHPF') || ...
            strcmpi(get(hObj,'tag'),'gixs_PopupmenuLorentzFactorType')
        p = updateqmaps(p);
        updateparamsGUI(hFigGIXS,p);
    end
    udata.gdata(udata.selection) = p;
end
% --- get plot parameters
% get plot image flag for uncorrected or corrected image plot
hPlotImageFlag = findall(hFigGIXS,'tag','gixs_PopupmenuPlotImageFlag');
if isempty(p.SolidAngleCorrectedData)
    set(hPlotImageFlag,'value',1);
end
p.PlotImageFlag = get(hPlotImageFlag,'Value');
%updateparamsGUI(hFigGIXS,p);
% get plot scale
p.PlotScale = get(findall(hFigGIXS,'tag','gixs_PopupmenuPlotScale'),'Value');
% get axis label
hAxisLabel = findall(hFigGIXS,'tag','gixs_PopupmenuPlotAxisLabel');
if p.Geometry == 1 || (p.Geometry == 2 && ~isempty(udata.gdata) && isempty(p.QMap))
    p.PlotAxisLabel = 1;
    set(hAxisLabel,'value',p.PlotAxisLabel);
else
    p.PlotAxisLabel = get(hAxisLabel,'value');
end
% get CLims type
hPlotCLimsType = findall(hFigGIXS,'tag','gixs_PopupmenuPlotCLimsType');
p.PlotCLimsType = get(hPlotCLimsType,'Value');
% get CLims;
hCLims1 = findall(hFigGIXS,'tag','gixs_EditPlotCLims1');
hCLims2 = findall(hFigGIXS,'tag','gixs_EditPlotCLims2');
CLims1 = str2double(get(hCLims1,'string'));
CLims2 = str2double(get(hCLims2,'string'));
if get(hPlotCLimsType,'value') ==  1 && ~isnan(CLims1) && ~isnan(CLims2) && CLims2 > CLims1
    p.PlotCLims = [CLims1,CLims2];
else
    set(hCLims1,'String',p.PlotCLims(1));
    set(hCLims2,'String',p.PlotCLims(2));
end
% save udata
set(hFigGIXS,'UserData',udata);
% replot the figure
replot(udata);
end

function gixs_PushbuttonCLimsFcn(~,~)
hFigGIXS = gcbf;
hObj = gcbo;
udata = get(hFigGIXS,'UserData');
if isempty(udata.gdata)
    p = udata.paramsDefault;
else
    p = udata.gdata(udata.selection);
end
%cStepMin = (p.PlotCLims(2) - p.PlotCLims(1))*0.01;
%cStepMax = (p.PlotCLims(2) - p.PlotCLims(1))*0.1;
diffCLims = p.PlotCLims(2) - p.PlotCLims(1);
order10 = 10^floor(log10(diffCLims));
if diffCLims/order10>=5, order10 = order10*10; end
cStepMin = order10*0.05;
cStepMax = order10*0.25;
switch get(hObj,'tag')
    case 'gixs_PushbuttonCLims1MM'
        p.PlotCLims(1) = p.PlotCLims(1)-cStepMax;
    case 'gixs_PushbuttonCLims1M'
        p.PlotCLims(1) = p.PlotCLims(1)-cStepMin;
    case 'gixs_PushbuttonCLims1P'
        p.PlotCLims(1) = min(p.PlotCLims(1)+cStepMin,p.PlotCLims(2));
    case 'gixs_PushbuttonCLims1PP'
        p.PlotCLims(1) = min(p.PlotCLims(1)+cStepMax,p.PlotCLims(2));
    case 'gixs_PushbuttonCLims2MM'
        p.PlotCLims(2) = max(p.PlotCLims(2)-cStepMax,p.PlotCLims(1));
    case 'gixs_PushbuttonCLims2M'
        p.PlotCLims(2) = max(p.PlotCLims(2)-cStepMin,p.PlotCLims(1));
    case 'gixs_PushbuttonCLims2P'
        p.PlotCLims(2) = p.PlotCLims(2)+cStepMin;
    case 'gixs_PushbuttonCLims2PP'
        p.PlotCLims(2) = p.PlotCLims(2)+cStepMax;
end
updateparamsGUI(hFigGIXS,p);
set(hFigGIXS,'UserData',udata);
replot(udata);
end

function gixs_PushbuttonGetQMapFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0), return; end
gdata = udata.gdata(udata.selection);
updateqmaps(gdata);
replot(udata);
end

function gdata = updateqmaps(gdata)
pause(0.1);         % add pause to prevent GUI update lag.
%hwarndlg = warndlg('Please wait while processing q maps ...','Q Map Warning','modal');
qmaps(gdata);

%gdata.solidangle_correction(gdata);
%delete(hwarndlg);
end

function gixs_PushbuttonLoadParamsFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
oldpath = pwd;
if ~isempty(udata.path), cd(udata.path); end
[filename,pathname] = uigetfile({'*.mat','MAT-files (*.mat)';'*.par','gisaxsviewer parameter files for MAR165 (*.par)';'*.*','All files (*.*)'},'Load Parameter File');
cd(oldpath);
if isequal(filename,0), return; end
f = fullfile(pathname, filename);
[~,~,ext] = fileparts(f);
if strcmpi(ext,'.par')
    [Camera,SDD,XEnergy,Beam0] = load_gisaxsviewer_par(f);
    udata.paramsDefault = gixsdata;
    udata.paramsDefault.Camera = Camera;
    udata.paramsDefault.SDD = SDD;
    udata.paramsDefault.XEnergy = XEnergy;
    udata.paramsDefault.Beam0 = Beam0;
elseif strcmpi(ext,'.mat')
    p = load(f);
    if ~isstruct(p), return; end;
    tmp = fieldnames(p); p = p.(tmp{1});
    if ~strcmpi(class(p),'gixsdata'),return; end
    udata.paramsDefault = copyhobj(p);
else
    return;
end
set(hFigGIXS,'UserData',udata);
if isempty(udata.gdata)
    updateparamsGUI(hFigGIXS,udata.paramsDefault);
end
end

function [Camera,SDD,XEnergy,Beam0] = load_gisaxsviewer_par(f)
[fid,~] = fopen(f,'r');
A=textscan(fid,'%s'); A=A{1};
fclose(fid);
Camera = 'MAR165';
SDD = str2double(A{3});
XEnergy = 12.3984171668278/str2double(A{15});
Beam0 = [str2double(A{21}),2049-str2double(A{28})];
end

function gixs_PushbuttonParamsDefaultFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if isempty(udata.gdata), return; end
udata.paramsDefault = copyhobj(udata.gdata(get(findall(hFigGIXS,'tag','gixs_ListboxImage'),'value')));
udata.paramsDefault.RawData = [];
set(hFigGIXS,'UserData',udata);
end

function gixs_PushbuttonParamsExportFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if isempty(udata.gdata)
    params = copyhobj(udata.paramsDefault);
else
    params = copyhobj(udata.gdata(get(findall(hFigGIXS,'tag','gixs_ListboxImage'),'value')));
end
params.RawData = [];
params.qmaps_initialize(params);    % clear maps
[filename,filepath] = uiputfile('*.mat','Export Parameters As',fullfile(udata.path,'gixs_params.mat'));
if isequal(filename,0), return; end
save(fullfile(filepath,filename),'params');
end

function gixs_PushbuttonLoadPathFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if isempty(udata.path), oldpath = pwd; else oldpath = udata.path; end
path = uigetdir(oldpath,'Select Image Directory to Open');
if path == 0, return; else udata.path = path; end
set(hFigGIXS,'UserData',udata);
updatepath(hFigGIXS);
end

function gixs_PopupmenuSortFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
udata.sortby = get(gcbo,'value');
set(hFigGIXS,'UserData',udata);
updatepath(hFigGIXS);
end

function gixs_ListboxPathFileFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if ~strcmpi(get(gcbf,'selectionType'),'open') || isempty(udata.path), return; end
feval(get(findall(gcbf,'tag','gixs_PushbuttonLoadImage'),'callback'));
end

function gixs_PushbuttonRefreshFcn(~,~)
updatepath(gcbf);
end

function gixs_PushbuttonLoadImageFcn(~,~)
hFigGIXS = gcbf;
selected = get(findall(hFigGIXS,'tag','gixs_ListboxPathFile'),'value');
if isequal(selected,0) || isempty(selected)
    return;
end
udata = get(hFigGIXS,'UserData');
if selected == 1
    updatepath(hFigGIXS);
    return;
elseif selected == 2
    udata.path = fileparts(udata.path);
    set(hFigGIXS,'UserData',udata);
    updatepath(hFigGIXS);
    return;
elseif isdir(fullfile(udata.path,udata.flist{selected}))
    udata.path = fullfile(udata.path,udata.flist{selected});
    set(hFigGIXS,'UserData',udata);
    updatepath(hFigGIXS);
    return;
end
imFile = fullfile(udata.path,udata.flist{selected});
if exist(imFile,'file') ~=2
    updatepath(hFigGIXS);
    return;
end
gdata0 = copyhobj(udata.paramsDefault);
try
    if isempty(gdata0.QMap)
        hwarndlg = warndlg('Please wait while loading data and processing q maps ...','Warning: Loading Data and Q Mapping','modal');
    end
    [~,fname,ext] = fileparts(imFile);
    % --- deal with imm file 
    if strcmpi(ext,'.imm') % for imm file containing multiple images 
        [idx_imm,load_choice] = select_imm_dlg(fname);
        % - load image
        if isnan(idx_imm)
            if exist('hwarndlg','var'), delete(hwarndlg); end
            return;
        end
        for ii=1:length(idx_imm)
            cc = openmultiimm(imFile,idx_imm(ii));            
            if ii==1    % initialize img
                img = nan(size(cc.imm,1),size(cc.imm,2),length(idx_imm));
            end
            img(:,:,ii) = cc.imm;            
        end
        if load_choice == 1 || load_choice == 3  % plot invididual images
            for ii = 1:length(idx_imm)
                if ii<=20   % only plot upto 20 images
                    gdata = copyhobj(gdata0);
                    gdata.RawData = img(:,:,ii);
                    gdata.ImFileName = [fname,': ',num2str(idx_imm(ii))];
                    udata.gdata = [udata.gdata;gdata];
                end
            end
        end
        if load_choice == 2 || load_choice == 3     % plot summed image
            gdata = copyhobj(gdata0);
            gdata.RawData = sum(img,3);
            gdata.ImFileName = [fname,': ',num2str(idx_imm(1)),'-',num2str(idx_imm(end))];
            udata.gdata = [udata.gdata;gdata];
        end
    else %for image file containing single image (non-imm file)
        gdata = copyhobj(gdata0);        
        gdata.ImFile = imFile;
        udata.gdata = [udata.gdata;gdata];
    end
    if exist('hwarndlg','var'), delete(hwarndlg); end
catch
    if exist('hwarndlg','var'), delete(hwarndlg); end
    %error('Loading file failed.');
    return;
end
delete(gdata0);
% gdata = updateqmaps(gdata);
% if isequal(size(udata.paramsDefault.Mask),size(gdata.Mask))     % pass default mask;
%     gdata.Mask = udata.paramsDefault.Mask & gdata.Mask;
% end
udata.selection = length(udata.gdata);
set(findall(hFigGIXS,'tag','gixs_ListboxImage'),'string',{udata.gdata.ImFileName},'value',udata.selection);
set(hFigGIXS,'UserData',udata);
updateparamsGUI(hFigGIXS,gdata);
plotimage(gdata);
end

function gixs_PushbuttonRemoveImageFcn(~,~)
hFigGIXS = gcbf;
selected = get(findall(hFigGIXS,'tag','gixs_ListboxImage'),'value');
if isequal(selected,0) || isempty(selected), return; end
udata = get(hFigGIXS,'UserData');
delete(udata.gdata(selected));
udata.gdata(selected) = [];
udata.selection = length(udata.gdata);
set(findall(hFigGIXS,'tag','gixs_ListboxImage'),'string',{udata.gdata.ImFileName},'value',udata.selection);
set(hFigGIXS,'UserData',udata);
if udata.selection == 0
    updateparamsGUI(hFigGIXS,udata.paramsDefault);
else
    updateparamsGUI(hFigGIXS,udata.gdata(end));
end
end

function gixs_PushbuttonRemoveAllImageFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
delete(udata.gdata(:));
udata.gdata = [];
udata.selection = length(udata.gdata);
set(findall(hFigGIXS,'tag','gixs_ListboxImage'),'string','','value',udata.selection);
set(hFigGIXS,'UserData',udata);
updateparamsGUI(hFigGIXS,udata.paramsDefault);
end

function gixs_ListboxImageFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if isempty(udata.gdata), return; end
udata.selection = get(findall(hFigGIXS,'tag','gixs_ListboxImage'),'value');
gdata = udata.gdata(udata.selection);
set(hFigGIXS,'UserData',udata);
updateparamsGUI(hFigGIXS,gdata);
if strcmpi(get(hFigGIXS,'selectionType'),'open')
    replot(udata);
    figure(gdata.FigHandle);
end
end


function gixs_PushbuttonImageUpFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0) || isequal(udata.selection,1), return; end
hlist = findall(hFigGIXS,'tag','gixs_ListboxImage');
list = get(hlist,'string');
tmp_str = list{udata.selection-1};
list{udata.selection-1} = list{udata.selection};
list{udata.selection} = tmp_str;
set(hlist,'string',list);
set(hlist,'value',udata.selection-1);
tmp_gdata = udata.gdata(udata.selection-1);
udata.gdata(udata.selection-1) = udata.gdata(udata.selection);
udata.gdata(udata.selection) = tmp_gdata;
udata.selection = udata.selection-1;
set(hFigGIXS,'UserData',udata);
end

function gixs_PushbuttonImageDownFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0) || isequal(udata.selection,length(udata.gdata)), return; end
hlist = findall(hFigGIXS,'tag','gixs_ListboxImage');
list = get(hlist,'string');
tmp_str = list{udata.selection+1};
list{udata.selection+1} = list{udata.selection};
list{udata.selection} = tmp_str;
set(hlist,'string',list);
set(hlist,'value',udata.selection+1);
tmp_gdata = udata.gdata(udata.selection+1);
udata.gdata(udata.selection+1) = udata.gdata(udata.selection);
udata.gdata(udata.selection) = tmp_gdata;
udata.selection = udata.selection+1;
set(hFigGIXS,'UserData',udata);
end

function gixs_PushbuttonCopyToWorkspaceFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0), return; end
gdata2 = copyhobj(udata.gdata(udata.selection));
assignin('base',assignin_base_name_check(udata.gdata(udata.selection).ImFileName),gdata2);
end

function gixs_PushbuttonExportImageFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0), return; end
gdata = udata.gdata(udata.selection);
imgdata = gdata.MaskedData;
uiputfile_str = {...
    '*.tif','TIFF files (*.tif)';...
    '*.mat','MAT-files (*.mat)'};
[filename,filepath,filterindex] = uiputfile(uiputfile_str,'Export Current Flat Field Corrected Image (If Field Exists) to File',['img_',gdata.ImFileName]);
if isequal(filename,0), return; end
f = fullfile(filepath,filename);
[~,~,ext] = fileparts(f);
ext_template = uiputfile_str{filterindex,1}(2:end);
if ~strcmpi(ext,ext_template), f = [f,ext_template]; end
switch filterindex
    case 1
        imgdata(isnan(imgdata))  = -3;  % converted NaN to -3
        header = gdata.ImFileInfo;
        if ~isstruct(header), header=[]; end
        imwrite2tif(imgdata,header,f,'int32');
    case 2
        save(f,'imgdata');
    otherwise
        return;
end
end

function gixs_PushbuttonFindCircleCenterFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0), return; end
gdata = udata.gdata(udata.selection);
replot(udata);
try
    [x0,y0,r0,~,~] = get_circle(gdata);
catch
    remove_dummy_axis;
    return;
end
msg_str = ['Circle center = [',num2str(x0),',',num2str(y0),']. Radius = ',num2str(r0)];
msgbox(msg_str,'Circle Define Message','non-modal');
end

function gixs_PushbuttonImageHeaderFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0), return; end
gdata = udata.gdata(udata.selection);
info_str = getinfo(gdata);
delete(findall(0,'tag','gixs_data_fig_imageheader'));
figPos_gixs = get(hFigGIXS,'position');
figSize = [400, 650];
figPos = [figPos_gixs(1)+figPos_gixs(3)/2-figSize(1)/2,...
    figPos_gixs(2)+figPos_gixs(4)/2-figSize(2)/2,...
    figSize];
hFigImageHeader = figure(...
    'DockControls','off',...
    'Resize','off',...
    'position',figPos,...
    'PaperOrient','portrait',...
    'PaperPositionMode','auto',...
    'IntegerHandle','off',...
    'NumberTitle','off',...
    'MenuBar','none',...
    'Toolbar','none',...
    'Name',['Image Header: ',gdata.ImFileName],...
    'Tag','gixs_data_fig_imageheader','UserData',[]);
uicontrol('Parent',hFigImageHeader,...
    'style','edit',...
    'Units','pixel',...
    'backgroundcolor','w',...
    'String',info_str,...
    'HorizontalAlignment','left',...
    'Max',2,...
    'Min',0,...
    'Enable','inactive',...
    'Position',[5 35 figPos(3)-10 figPos(4)-40]);
base_name = ['header_',gdata.ImFileName];
uicontrol('Parent',hFigImageHeader,...
    'style','pushbutton',...
    'String','Copy to Workspace',...
    'unit','pixel',...
    'Position',[figPos(3)/2-2.5-140,5,140,20],...
    'TooltipString','Copy image header to Matlab workspace',...
    'callback',{@gixs_imageheader_copyFcn,base_name,gdata.ImFileInfo});
uicontrol('Parent',hFigImageHeader,...
    'style','pushbutton',...
    'String','Close',...
    'unit','pixel',...
    'Position',[figPos(3)/2+2.5,5,140,20],...
    'callback','delete(gcbf);');
end

function gixs_PushbuttonImageStatsFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0), return; end
gdata = udata.gdata(udata.selection);
stats = gdata.MaskedDataStats;
% --- construct stats strings
stats_str = {...
    ['Min value = ',num2str(stats.MinValue),' @ pixel [',num2str(stats.MinPixel(1,:)),']'];
    ['Max value = ',num2str(stats.MaxValue),' @ pixel [',num2str(stats.MaxPixel(1,:)),']'];
    ['Total = ',num2str(stats.TotalValue)];
    ['Mean = ',num2str(stats.MeanValue)];
    ['STD = ',num2str(stats.STDValue)];
    ['Median = ',num2str(stats.MedianValue)];
    ['Number of pixels of none zero value = ',num2str(stats.NumOfNonZeros)];
    [' '];
    ['Note: Multiple pixels of min or max values may exist. But only the first is displayed. Copy to workspace to view all pixels.'];
    };
delete(findall(0,'Tag','gixs_data_fig_imagestats'));
figPos_gixs = get(hFigGIXS,'position');
figSize = [400, 260];
figPos = [figPos_gixs(1)+figPos_gixs(3)/2-figSize(1)/2,...
    figPos_gixs(2)+figPos_gixs(4)/2-figSize(2)/2,...
    figSize];
hFigImageStats = figure(...
    'DockControls','off',...
    'Resize','off',...
    'position',figPos,...
    'PaperOrient','portrait',...
    'PaperPositionMode','auto',...
    'IntegerHandle','off',...
    'NumberTitle','off',...
    'MenuBar','none',...
    'Toolbar','none',...
    'Name',['Masked Image Statistics: ',gdata.ImFileName],...
    'Tag','gixs_data_fig_imagestats','UserData',gdata.MaskedData(gdata.Mask));
backgroundcolor = get(hFigImageStats,'color');
% stats
uicontrol('Parent',hFigImageStats,...
    'style','edit',...
    'Units','pixel',...
    'backgroundcolor','w',...
    'String',stats_str,...
    'HorizontalAlignment','left',...
    'Max',2,...
    'Min',0,...
    'Enable','inactive',...
    'Position',[5 figPos(4)-180 figPos(3)-10 175]);
% hist
uicontrol('Parent',hFigImageStats,...
    'style','Text',...
    'backgroundcolor',backgroundcolor,...
    'Units','pixel',...
    'String','Histogram:',...
    'HorizontalAlignment','left',...
    'Position',[5,figPos(4)-180-20,100,15]);
uicontrol('Parent',hFigImageStats,...
    'style','pushbutton',...
    'String','Plot',...
    'unit','pixel',...
    'Position',[5,figPos(4)-180-45,90,20],...
    'Tag','gixs_PushbuttonImageStatsHist',...
    'callback',{@gixs_PushbuttonImageStatsHistFcn,gdata.ImFileName});
uicontrol('Parent',hFigImageStats,...
    'style','text',...
    'Units','pixel',...
    'backgroundcolor',backgroundcolor,...
    'String','Bin cente min',...
    'HorizontalAlignment','center',...
    'Position',[100, figPos(4)-180-20,95,15])
uicontrol('Parent',hFigImageStats,...
    'style','Edit',...
    'Units','pixel',...
    'backgroundcolor','w',...
    'String',num2str(stats.MinValue),...
    'HorizontalAlignment','left',...
    'Enable','on',...
    'Position',[100, figPos(4)-180-45,95,20],...
    'Tag','gixs_stats_min');
uicontrol('Parent',hFigImageStats,...
    'style','text',...
    'Units','pixel',...
    'backgroundcolor',backgroundcolor,...
    'String','Bin center max',...
    'HorizontalAlignment','center',...
    'Position',[200, figPos(4)-180-20,95,15])
uicontrol('Parent',hFigImageStats,...
    'style','Edit',...
    'Units','pixel',...
    'backgroundcolor','w',...
    'String',num2str(stats.MaxValue),...
    'HorizontalAlignment','left',...
    'Enable','on',...
    'Position',[200, figPos(4)-180-45,95,20],...
    'Tag','gixs_stats_max');
uicontrol('Parent',hFigImageStats,...
    'style','text',...
    'Units','pixel',...
    'backgroundcolor',backgroundcolor,...
    'String','Bin size',...
    'HorizontalAlignment','center',...
    'Position',[300, figPos(4)-180-20,95,15])
uicontrol('Parent',hFigImageStats,...
    'style','Edit',...
    'Units','pixel',...
    'backgroundcolor','w',...
    'String',num2str(round(stats.MaxValue/100)),...
    'HorizontalAlignment','left',...
    'Enable','on',...
    'Position',[300, figPos(4)-180-45,95,20],...
    'Tag','gixs_stats_step');
base_name = ['stats_',gdata.ImFileName];
uicontrol('Parent',hFigImageStats,...
    'style','pushbutton',...
    'String','Copy to Workspace',...
    'unit','pixel',...
    'Position',[figPos(3)/2-2.5-140,5,140,20],...
    'TooltipString','Copy image statistics to Matlab workspace',...
    'callback',{@gixs_imageheader_copyFcn,base_name,stats});
uicontrol('Parent',hFigImageStats,...
    'style','pushbutton',...
    'String','Close',...
    'unit','pixel',...
    'Position',[figPos(3)/2+2.5,5,140,20],...
    'callback','delete(gcbf);');
end

function gixs_PushbuttonImageStatsHistFcn(~,~,imfile)
hFigImageStats = gcbf;
maskedData1D = get(hFigImageStats,'UserData');
xmin = str2double(get(findall(hFigImageStats,'tag','gixs_stats_min'),'string'));
xstep = str2double(get(findall(hFigImageStats,'tag','gixs_stats_step'),'string'));
xmax = str2double(get(findall(hFigImageStats,'tag','gixs_stats_max'),'string'));
x = xmin:xstep:xmax;
figure('Name',['Masked Image Histgram : ',imfile],'tag','gixs_data_fig_imagestats_hist')
hist(maskedData1D,x);
ph = get(gca,'children');
vn = get(ph,'Vertices');
vn(:,2) = vn(:,2) + 1;
set(ph,'Vertices',vn);
set(gca,'yscale','log');
set(gca,'xlim',[xmin-xstep/2,xmax+xstep/2]);
xlabel('Intensity');
ylabel('Count of pixels');
end

function gixs_imageheader_copyFcn(~,~,base_name,var)
assignin('base',assignin_base_name_check(base_name),var);
end

function info_str = getinfo(gdata)
if strcmpi(gdata.ImFileExt,'.cbf')
    info_str = gdata.ImFileInfo;
elseif strcmpi(gdata.ImFileExt,'.mat')
    info_str = {'No image information for .mat file.'};
elseif strcmpi(gdata.ImFileExt,'.tif') || strcmpi(gdata.ImFileExt,'.tiff') || strcmpi(gdata.ImFileExt,'.fits')
    a=fieldnames(gdata.ImFileInfo);
    info_str = {};
    for ii=1:length(a)
        b = gdata.ImFileInfo.(a{ii});
        if ischar(b)
            info_str = [info_str; a{ii},': ',b];
        elseif isnumeric(b)
            info_str = [info_str; a{ii},': ',num2str(b(:)')];
        else
            info_str = [info_str; a{ii},': ','This field cannot be displayed.'];
        end
    end
elseif strcmpi(gdata.ImFileExt,'.edf')
    info_str = gdata.ImFileInfo;
else
    info_str = {'No image informaion.'};
end
end


function [x0,y0,r0,x,y] = get_circle(gdata)
[x,y] = gu_getpts(gdata.FigHandle);
if isempty(x) || isempty(y) || length(x)<3 || length(y)<3
    errordlg('Need at least three points.','Circle Define Error','modal');
    return;
end
cxlim = get(gca,'xlim');
cylim = get(gca,'ylim');
if sum(x>cxlim(2) | x<cxlim(1) | y>cylim(2) | y<cylim(1)) ~=0
    errordlg('Selected point(s) is(are) out of the image range.','Circle Define Error','modal');
    return;
end
cc = CircleFitByTaubin([x,y]);
x0 = cc(1); y0=cc(2); r0=cc(3);
line([x0;x],[y0;y],...
    'tag',['gixsdata:beam0speclabel:',gdata.ImFileName],...
    'Parent',get(findall(gdata.FigHandle,'tag',['gixsdata:img:',gdata.ImFileName]),'parent'),...
    'Marker','x','Markersize',10,'linestyle','none','linewidth',1.5,'color','r');
[xc,yc] = get_circle_pts([x0,y0],r0);
line(xc,yc,...
    'tag',['gixsdata:beam0speclabel:',gdata.ImFileName],...
    'Parent',get(findall(gdata.FigHandle,'tag',['gixsdata:img:',gdata.ImFileName]),'parent'),...
    'linestyle','-','linewidth',1.5,'color','k');
end

function [X,Y] = get_circle_pts(center,radius)
% Adpated from Matlab File Exchange ID: #2876
NOP = max(200,round(pi*radius));
THETA=linspace(0,2*pi,NOP);
RHO=ones(1,NOP)*radius;
[X,Y] = pol2cart(THETA,RHO);
X=X+center(1);
Y=Y+center(2);
end

function beam0specularlabelFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0), return; end
gdata = udata.gdata(udata.selection);
if nnz(isnan(gdata.Beam0))~=0, return; end
replot(udata); figure(gdata.FigHandle);
if strcmpi(get(gcbo,'tag'),'gixs_PushbuttonShowBeam0')
    bs = gdata.Beam0;
elseif strcmpi(get(gcbo,'tag'),'gixs_PushbuttonShowSpecular')
    if gdata.Geometry == 1 || nnz(isnan([gdata.Specular,gdata.IncidentAngle]))~=0, return; end
    tmp_r2 = (gdata.AlphafMap-gdata.IncidentAngle).^2 + gdata.TwoThetaMap.^2;
    [r2_ind,ind] = min(tmp_r2(:));
    if r2_ind > min([abs(diff(gdata.Alphaf1DList)),abs(diff(gdata.TwoTheta1DList))])^2, return; end
    [sy,sx] = ind2sub(size(gdata.AlphafMap),ind); bs = [sx,sy];
else
    return;
end
if bs(1)<1 || bs(1)>gdata.ImDim(1) || bs(2)<1 || bs(2)>gdata.ImDim(2), return; end
line(bs(1),bs(2),...
    'tag',['gixsdata:beam0speclabel:',gdata.ImFileName],...
    'Parent',get(findall(gdata.FigHandle,'tag',['gixsdata:img:',gdata.ImFileName]),'parent'),...
    'Marker','x','Markersize',10,'linewidth',1.5,'color','r');
end

function gixs_PushbuttonResetAxisFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0), return; end
replot(udata);
p = udata.gdata(udata.selection);
hf = p.FigHandle;
himg = findall(hf,'tag',['gixsdata:img:',p.ImFileName]);
axis(get(himg,'parent'),'image');
zoom(hf,'reset');
replot(udata);
end

function gixs_PushbuttonColormapEditorFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if ~isequal(udata.selection,0)
    replot(udata);
    figure(udata.gdata(udata.selection).FigHandle);
end
colormapeditor;
end

function gixs_PushbuttonManualTickLabelFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0), return; end
gdata = udata.gdata(udata.selection);
figure(gdata.FigHandle);
himg = findall(gdata.FigHandle,'tag',['gixsdata:img:',gdata.ImFileName]);
haxes = get(himg,'parent');
xlist_pixel = 1:gdata.ImDim(1);
ylist_pixel = 1:gdata.ImDim(2);
switch gdata.PlotAxisLabel
    case 1  % pixel
        xlist = xlist_pixel;
        ylist = ylist_pixel;        
    case 2  % q
        xlist = gdata.Qy1DList;
        ylist = gdata.Qz1DList;
    case 3  % angle
        xlist = gdata.TwoTheta1DList;
        ylist = gdata.Alphaf1DList;
end
hPopupmenuManualTickLabel = findall(hFigGIXS,'Tag','gixs_PopupmenuManualTickLabel');
hEditManualTickLabel = findall(hFigGIXS,'Tag','gixs_EditManualTickLabel');
ticks = str2num(get(hEditManualTickLabel,'string'));
if get(hPopupmenuManualTickLabel,'value') == 1 % label horizontal axis
    [xtickpos,indpos] = sort(interp1(xlist,xlist_pixel,ticks,'linear','extrap'));
    set(haxes,'xtick',xtickpos,'xticklabel',ticks(indpos));
else    % label vertical axis
    [ytickpos,indpos] = sort(interp1(ylist,ylist_pixel,ticks,'linear','extrap'));
    set(haxes,'ytick',ytickpos,'yticklabel',ticks(indpos) );    
end
end

function gixs_PushbuttonShowMaskFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0)
    p = udata.paramsDefault;
    figure_name_str = 'Mask: Default';
else
    p = udata.gdata(udata.selection);
    figure_name_str = ['Mask: ',p.ImFileName];
end
if isempty(p.Mask), return; end
figure('Name',figure_name_str,'tag','gixs_data_fig'); imagesc(p.Mask,[0,1]); axis image; xlabel('x pixel'); ylabel('y pixel');
end

function gixs_PushbuttonLoadMaskFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0)
    p = udata.paramsDefault;
else
    p = udata.gdata(udata.selection);
end
oldpath = pwd;
if ~isempty(udata.path), cd(udata.path); end
[filename,pathname] = uigetfile({'*.tif;*.tiff;*.mat'},'Load Binary Mask File');
cd(oldpath);
if isequal(filename,0), return; end
f = fullfile(pathname,filename);
[~,~,ext] = fileparts(f);
if strcmpi(ext,'.tif') || strcmpi(ext,'.tiff')
    mask = logical(imread(f));
elseif strcmpi(ext,'.mat')
    mask = load(f); tmp = fieldnames(mask); mask = logical(mask.(tmp{1}));
else
    return;
end
if isempty(p.Mask)
    p.Mask = mask;
elseif isequal(size(p.Mask),size(mask))
    p.Mask = p.Mask & mask;
else
    return;
end
set(hFigGIXS,'UserData',udata);
replot(udata);
end

function gixs_PushbuttonAddMaskFcn(~,~)
hFigGIXS = gcbf;
hPushbuttonMask = gcbo;
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0), return; end
gdata = udata.gdata(udata.selection);
set(findall(hFigGIXS,'tag','gixs_PopupmenuPlotAxisLabel'),'value',1);
feval(get(findall(hFigGIXS,'tag','gixs_PopupmenuPlotAxisLabel'),'callback'));
replot(udata);
figure(gdata.FigHandle);
try
    [x,y]=gu_getline(gdata.FigHandle);
catch
    remove_dummy_axis;
    return;
end
x = round(x'); y = round(y');
xpoly = [x, x(1)]; ypoly = [y,y(1)];
cxlim = get(gca,'xlim');
cylim = get(gca,'ylim');
if length(x)<3 || length(y)<3 || polyarea(x,y)==0 || sum(x>cxlim(2) | x<cxlim(1) | y>cylim(2) | y<cylim(1)) ~=0
    errordlg('Invlaid polygon.','Include/Exclude Mask Error','modal');
    return;
end
line(xpoly,ypoly,...
    'tag',['gixsdata:beam0speclabel:',gdata.ImFileName],...
    'Parent',get(findall(gdata.FigHandle,'tag',['gixsdata:img:',gdata.ImFileName]),'parent'),...
    'linewidth',1,'color','r');
hwarndlg = warndlg('Please wait while generating mask ...','Include/Exclude Mask Warning','modal');
[xgrid,ygrid] = meshgrid(1:gdata.ImDim(1),1:gdata.ImDim(2));
in = inpolygon(xgrid(:),ygrid(:),xpoly,ypoly);
delete(hwarndlg);
BW = reshape(in,size(gdata.RawData));
%BW = roipoly;
%if isempty(BW), return; end
switch get(hPushbuttonMask,'tag')
    case 'gixs_PushbuttonIncludeMask' 
        gdata.Mask = udata.gdata(udata.selection).Mask & BW;
    case 'gixs_PushbuttonExcludeMask'
        gdata.Mask = udata.gdata(udata.selection).Mask & (~BW);
end
set(hFigGIXS,'UserData',udata);
replot(udata);
end

function gixs_PushbuttonClearMaskFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0), return; end
replot(udata);
gdata = udata.gdata(udata.selection);
gdata.mask_initialize(gdata);
set(hFigGIXS,'UserData',udata);
replot(udata);
end

function gixs_PushbuttonRestoreMaskFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0), return; end
replot(udata);
udata.gdata(udata.selection).Mask = udata.paramsDefault.Mask;
set(hFigGIXS,'UserData',udata);
replot(udata);
end

function gixs_PushbuttonExportMaskFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0)
    p = udata.paramsDefault;
else
    p = udata.gdata(udata.selection);
end
if isempty(p.Mask), return; else mask = p.Mask; end;
uiputfile_str = {...
    '*.tif','TIFF files (*.tif)';...
    '*.mat','MAT-files (*.mat)'};
[filename,filepath,filterindex] = uiputfile(uiputfile_str,'Export Current Mask to Binary File',fullfile(udata.path,'mask'));
if isequal(filename,0), return; end
f = fullfile(filepath,filename);
[~,~,ext] = fileparts(f);
ext_template = uiputfile_str{filterindex,1}(2:end);
if ~strcmpi(ext,ext_template), f = [f,ext_template]; end
switch filterindex
    case 1
        imwrite(mask,f,'tif');
    case 2
        save(f,'mask');
    otherwise
        return;
end
end

% function gixs_PushbuttonShowCorrectedImageFcn(~,~)
% hFigGIXS = gcbf;
% udata = get(hFigGIXS,'UserData');
% if isequal(udata.selection,0), return; end
% gdata = udata.gdata(udata.selection);
% imgdata = gdata.SolidAngleCorrectedData;
% if isempty(imgdata),
%     errordlg('Invalid setup or correction parameters.','Correction Error','modal');
%     return;
% end
% hf = figure('Name',['Corrected Image: ',gdata.ImFileName],...
%     'tag','gixs_data_fig',...
%     'UserData',gdata,...
%     'ButtonDownFcn',@plotimage_ButtonDownFcn);
% if gdata.PlotScale == 1
%     imagesc(imgdata,gdata.PlotCLims);
% else
%     imgdata(~gdata.Mask) = NaN;
%     imgdata = log10(imgdata);
%     imgdata(isnan(imgdata)) = -Inf;
%     imagesc(imgdata,log10(gdata.PlotCLims));
% end
% axis image; xlabel('x pixel'); ylabel('y pixel');
% hc = datacursormode(hf);
% set(hc,'UpdateFcn',@gixsdatacursor);

function gixs_PushbuttonShowEfficiencyFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0), return; end
gdata = udata.gdata(udata.selection);
if isempty(gdata.QMap), return; end
effc = gdata.efficiency_correction(gdata);
if ~isempty(effc)
    figure('Name',['Efficiency Correction Map: ',gdata.ImFileName],'tag','gixs_data_fig');
    imagesc(effc); axis image; xlabel('x pixel'); ylabel('y pixel');
end
end

function gixs_PushbuttonShowPolarizationFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0), return; end
gdata = udata.gdata(udata.selection);
if isempty(gdata.QMap), return; end
polardata = gdata.polarization_correction(gdata);
if ~isempty(polardata)
    figure('Name',['Polarization Correction Map: ',gdata.ImFileName],'tag','gixs_data_fig');
    imagesc(polardata); axis image; xlabel('x pixel'); ylabel('y pixel');
end
end

function gixs_PushbuttonShowLFFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0) 
    return;
else
    p = udata.gdata(udata.selection);
    figure_name_str = ['Lorentz Factor: ',p.ImFileName];
end
if isempty(p.SolidAngleCorrectedData)
    return;
end
lf = p.lorentzfactor;
figure('Name',figure_name_str,'tag','gixs_data_fig');
imagesc(lf);
%imagesc(lf,[min(lf(:)),5*mean(lf(:))]); %,[0.9 1.1]);
axis image; xlabel('x pixel'); ylabel('y pixel');
end

function gixs_PushbuttonShowFFFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0)
    p = udata.paramsDefault;
    figure_name_str = 'Flat Field: Default';
else
    p = udata.gdata(udata.selection);
    figure_name_str = ['Flat Field: ',p.ImFileName];
end
if isempty(p.FlatField), return; end
figure('Name',figure_name_str,'tag','gixs_data_fig');
imagesc(p.FlatField,[0.9 1.1]);
axis image; xlabel('x pixel'); ylabel('y pixel');
end

function gixs_PushbuttonShowCCFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0)
    p = udata.paramsDefault;
    figure_name_str = 'Custom Correction: Default';
else
    p = udata.gdata(udata.selection);
    figure_name_str = ['Custom Correction: ',p.ImFileName];
end
if isempty(p.CustomCorrection), return; end
figure('Name',figure_name_str,'tag','gixs_data_fig');
imagesc(p.CustomCorrection);
axis image; xlabel('x pixel'); ylabel('y pixel');
end

function gixs_PushbuttonLoadFFFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0)
    p = udata.paramsDefault;
else
    p = udata.gdata(udata.selection);
end
oldpath = pwd;
if ~isempty(udata.path), cd(udata.path); end
[filename,pathname] = uigetfile({'*.tif;*.tiff;*.mat'},'Load Flat Field File');
cd(oldpath);
if isequal(filename,0), return; end
f = fullfile(pathname,filename);
[~,~,ext] = fileparts(f);
if strcmpi(ext,'.tif') || strcmpi(ext,'.tiff')
    ff = single(imread(f));
elseif strcmpi(ext,'.mat')
    f = load(f); tmp = fieldnames(f); ff = single(f.(tmp{1}));
else
    return;
end
p.FlatField = ff;
set(hFigGIXS,'UserData',udata);
replot(udata);
end

function gixs_PushbuttonLoadCCFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0)
    p = udata.paramsDefault;
else
    p = udata.gdata(udata.selection);
end
oldpath = pwd;
if ~isempty(udata.path), cd(udata.path); end
[filename,pathname] = uigetfile({'*.tif;*.tiff;*.mat'},'Load Custom Correction File');
cd(oldpath);
if isequal(filename,0), return; end
f = fullfile(pathname,filename);
[~,~,ext] = fileparts(f);
if strcmpi(ext,'.tif') || strcmpi(ext,'.tiff')
    cc = single(imread(f));
elseif strcmpi(ext,'.mat')
    f = load(f); tmp = fieldnames(f); cc = single(f.(tmp{1}));
else
    return;
end
p.CustomCorrection = cc;
set(hFigGIXS,'UserData',udata);
replot(udata);
end

function gixs_PushbuttonRemoveFFFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0), return; end
replot(udata);
gdata = udata.gdata(udata.selection);
gdata.FlatField = single(ones(size(gdata.RawData)));
set(hFigGIXS,'UserData',udata);
replot(udata);
end

function gixs_PushbuttonRemoveCCFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0), return; end
replot(udata);
gdata = udata.gdata(udata.selection);
gdata.CustomCorrection = single(ones(size(gdata.RawData)));
set(hFigGIXS,'UserData',udata);
replot(udata);
end

function gixs_PushbuttonRestoreFFFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0), return; end
replot(udata);
udata.gdata(udata.selection).FlatField = udata.paramsDefault.FlatField;
set(hFigGIXS,'UserData',udata);
replot(udata);
end

function gixs_PushbuttonRestoreCCFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0), return; end
replot(udata);
udata.gdata(udata.selection).CustomCorrection = udata.paramsDefault.CustomCorrection;
set(hFigGIXS,'UserData',udata);
replot(udata);
end

function gixs_PushbuttonGetBeam0COMFcn(~,~)
hFigGIXS = gcbf;
hGCBO = gcbo;
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0), return; end
gdata = udata.gdata(udata.selection);
if strcmpi(get(hGCBO,'tag'),'gixs_PushbuttonCalibrateAngles') && ...
    nnz(isnan([gdata.Beam0,gdata.PixelSize,gdata.SDD])) ~= 0 % need valid Beam0, PixelSize and SDD for angle calibration
    errordlg('Need valid Beam0, PixelSize, and SDD','Angle Calibration Error','modal');
    return;
end
if gdata.PlotAxisLabel ~= 1
    gdata.PlotAxisLabel=1;
    updateparamsGUI(hFigGIXS,gdata);
end
replot(udata);
figure(gdata.FigHandle);
try
    rect = gu_getrect(gdata.FigHandle);
catch
    remove_dummy_axis;
    return;
end
x(1) = rect(1); y(1) = rect(2); x(2) = rect(1)+rect(3); y(2) = rect(2)+rect(4);
cxlim = get(gca,'xlim');
cylim = get(gca,'ylim');
x = round(x); y = round(y);
if x(1) == x(2) || y(1) == y(2) || x(1)<cxlim(1) || x(2)>cxlim(2) || ...
        x(1)<1 || x(2)>gdata.ImDim(1) || y(1)<1 || y(2)>gdata.ImDim(2) || ...
        y(1)<cylim(1) || y(2)>cylim(2)
    errordlg('Rectangle is out of the image range.','Selection Error','modal');
    return;
end
[x2d,y2d] = meshgrid(x(1):x(2),y(1):y(2));
cdataroi = double(gdata.MaskedData(y(1):y(2),x(1):x(2)));
comx = sum(sum(cdataroi.*x2d))/sum(cdataroi(:));
comy = sum(sum(cdataroi.*y2d))/sum(cdataroi(:));
line([x(1) x(2) x(2) x(1) x(1)],[y(1) y(1) y(2) y(2) y(1)],...
    'tag',['gixsdata:beam0speclabel:',gdata.ImFileName],...
    'Parent',get(findall(gdata.FigHandle,'tag',['gixsdata:img:',gdata.ImFileName]),'parent'),...
    'linewidth',1,'color','r');
line(comx,comy,...
    'tag',['gixsdata:beam0speclabel:',gdata.ImFileName],...
    'Parent',get(findall(gdata.FigHandle,'tag',['gixsdata:img:',gdata.ImFileName]),'parent'),...
    'Marker','x','Markersize',10,'linewidth',1.5,'color','r');
if strcmpi(get(hGCBO,'tag'),'gixs_PushbuttonGetBeam0')      % get beam0
    gdata.Beam0 = [comx,comy];
    updateparamsGUI(hFigGIXS,gdata);
    msgbox(['Beam0 = [',num2str(gdata.Beam0(1)),', ',num2str(gdata.Beam0(2)),'] has been updated.'],'Get Beam0 Message','non-modal');
    updateqmaps(gdata);
elseif strcmpi(get(hGCBO,'tag'),'gixs_PushbuttonFindCOM')   % find COM
    msgbox(['Center of mass (COM) = [',num2str(comx),', ',num2str(comy),']'],'Find COM Message','non-modal');    
elseif strcmpi(get(hGCBO,'tag'),'gixs_PushbuttonCalibrateAngles')   % Calibrate angles
    angle_chi = atand((gdata.Beam0(1)-comx)/(gdata.Beam0(2)-comy));
    angle_alphai = atand(sqrt(((gdata.Beam0(1)-comx)*gdata.PixelSize(1))^2 + ((gdata.Beam0(2)-comy)*gdata.PixelSize(2))^2)/gdata.SDD)/2;
    msgbox_str = {...
        ['Center of mass (COM) = [',num2str(comx),', ',num2str(comy),']'],...
        ['Tilt (Chi) angle is ',num2str(angle_chi),' deg'],...
        ['Incident angle is ',num2str(angle_alphai),' deg']};
    msgbox(msgbox_str,'Calibrate Angles Message','non-modal');        
end
end

function gixs_PushbuttonGetSDDFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0), return; end
gdata = udata.gdata(udata.selection);
if nnz(isnan([gdata.PixelSize,gdata.XEnergy]))~=0, return; end
if gdata.PlotAxisLabel ~= 1
    gdata.PlotAxisLabel=1;
    updateparamsGUI(hFigGIXS,gdata);
end
replot(udata);
figure(gdata.FigHandle);
try
    [x0,y0,r0,x,y] = get_circle(gdata);
catch
    return;
end
msg_str = {['Circle center = [',num2str(x0),', ',num2str(y0),']. Radius = ',num2str(r0),' (in pixel)']};
if nnz(isnan(gdata.Beam0))~=0
    gdata.Beam0 = [x0,y0];
    msg_str = [msg_str;'Beam0 has been updated to circle center.'];
end
db0 = sqrt(((x-gdata.Beam0(1))*gdata.PixelSize(1)).^2 + ((y-gdata.Beam0(2))*gdata.PixelSize(2)).^2);
dspacing = 58.378; % d spacing of silver behenate [A]
%dspacing = dspacing / 2; % for 2nd order ring
%dspacing = dspacing / 3; % for 3rd order ring
BraggAngle = asin(gdata.XWavelength/(2*dspacing));
gdata.SDD = mean(db0)/tan(2*BraggAngle);
updateparamsGUI(hFigGIXS,gdata);
msg_str = [msg_str; 'SDD = ',num2str(gdata.SDD),' mm has been updated.'];
msgbox(msg_str,'Get SDD Message','non-modal');
updateqmaps(gdata);
end

function gixs_PushbuttonGetSpecularFcn(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0), return; end
gdata = udata.gdata(udata.selection);
if gdata.PlotAxisLabel ~= 1
    gdata.PlotAxisLabel=1;
    updateparamsGUI(hFigGIXS,gdata);
end
replot(udata);
figure(gdata.FigHandle);
try
    [x,y]=gu_getline(gdata.FigHandle);
catch
    remove_dummy_axis;
    return;
end
cxlim = get(gca,'xlim');
cylim = get(gca,'ylim');
if length(x)~=2 || length(y)~=2 || (x(1)==x(2) && y(1)==y(2)) || sum(x>cxlim(2) | x<cxlim(1) | y>cylim(2) | y<cylim(1)) ~=0
    errordlg('Invlaid line or line is out of the image range.','Get Specular Error','modal');
    return;
end
line([x(1) x(2)],[y(1) y(2)],...
    'tag',['gixsdata:beam0speclabel:',gdata.ImFileName],...
    'Parent',get(findall(gdata.FigHandle,'tag',['gixsdata:img:',gdata.ImFileName]),'parent'),...
    'linewidth',1,'color','r');
[cx,cy,c] = gu_improfile(gdata.MaskedData,[x(1) x(2)],[y(1) y(2)],'nearest');
indNaN = isnan(c);
[xPeak,~,xFWHM] = params([cx(~indNaN),c(~indNaN)]);
[yPeak,~,yFWHM] = params([cy(~indNaN),c(~indNaN)]);
%X = xFWHM.center; Y = yFWHM.center;    % use FWHM
X = xPeak.X; Y = yPeak.X;               % use peak
gdata.Specular = [X,Y];
updateparamsGUI(hFigGIXS,gdata);
line([gdata.Beam0(1),gdata.Specular(1)],[gdata.Beam0(2),gdata.Specular(2)],...
    'tag',['gixsdata:beam0speclabel:',gdata.ImFileName],...
    'Parent',get(findall(gdata.FigHandle,'tag',['gixsdata:img:',gdata.ImFileName]),'parent'),...
    'linewidth',1,'color','r');
figure_name_str = ['Get Specular Linecut: ',gdata.ImFileName];
figure('Name',figure_name_str,'tag','gixs_data_fig');
subplot(2,1,1);  box on;
hold on;
plot(cx,c);
plot([X,X],ylim,'r-');
hold off;
title(['x @ ',num2str(X)]);
xlabel('x pixel'); ylabel('intensity');
subplot(2,1,2);
hold on;  box on;
plot(cy,c);
plot([Y,Y],ylim,'r-');
hold off;
title(['y @ ',num2str(Y)]);
xlabel('y pixel'); ylabel('intensity');
updateqmaps(gdata);
end

function gixs_PushbuttonOrientationApply(~,~)
hFigGIXS = gcbf;
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0), return; end
gdata = udata.gdata(udata.selection);
mirror = get(findall(hFigGIXS,'tag','gixs_PopupmenuOrientationFlip'),'value');
rotation = get(findall(hFigGIXS,'tag','gixs_PopupmenuOrientationRotation'),'value');
% --- get current values
RawData = gdata.RawData;
FlatField = gdata.FlatField;
%MaskedData = gdata.MaskedData;
Mask = gdata.Mask;
ImDim = gdata.ImDim;
Beam0 = gdata.Beam0;
PixelSize = gdata.PixelSize;
Specular = gdata.Specular;
% --- process orientation
switch mirror
    case 2
        RawData = fliplr(RawData);
        FlatField = fliplr(FlatField);
        Mask = fliplr(Mask);
        Beam0 = [ImDim(1)-Beam0(1)+1,Beam0(2)];
        Specular = [ImDim(1)-Specular(1)+1,Specular(2)];
    case 3
        RawData = flipud(RawData);
        FlatField = flipud(FlatField);
        Mask = flipud(Mask);
        Beam0 = [Beam0(1),ImDim(2)-Beam0(2)+1];
        Specular = [Specular(1),ImDim(2)-Specular(2)+1];
end
switch rotation
    case 2
        RawData = rot90(RawData,-1);
        FlatField = rot90(FlatField,-1);
        Mask = rot90(Mask,-1);
        Beam0 = [ImDim(2)-Beam0(2)+1,Beam0(1)];
        Specular = [ImDim(2)-Specular(2)+1,Specular(1)];
        PixelSize = fliplr(PixelSize);
    case 3
        RawData = rot90(RawData,-2);
        FlatField = rot90(FlatField,-2);
        Mask = rot90(Mask,-2);
        Beam0 = [ImDim(1)-Beam0(1)+1,ImDim(2)-Beam0(2)+1];
        Specular = [ImDim(1)-Specular(1)+1,ImDim(2)-Specular(2)+1];
    case 4
        RawData = rot90(RawData,-3);
        FlatField = rot90(FlatField,-3);
        Mask = rot90(Mask,-3);
        Beam0 = [Beam0(2),ImDim(1)-Beam0(1)+1];
        Specular = [Specular(2),ImDim(1)-Specular(1)+1];
        PixelSize = fliplr(PixelSize);
end
gdata.RawData = RawData;
gdata.FlatField = FlatField;
gdata.Mask = Mask;
gdata.Beam0 = Beam0;
gdata.Specular = Specular;
if strcmpi(gdata.Camera,'Other')
    gdata.PixelSize = PixelSize;
end
% change polarization mode for 90 or 270 rotations
if rotation == 2 || rotation == 4
    if gdata.PolarizationMode == 2
        gdata.PolarizationMode = 3;
    elseif gdata.PolarizationMode == 3
        gdata.PolarizationMode = 2;
    end
end
set(hFigGIXS,'UserData',udata);
gdata = updateqmaps(gdata);
updateparamsGUI(hFigGIXS,gdata);
gixs_PushbuttonResetAxisFcn;
end

function replot(udata)
remove_dummy_axis;  % remove dummy/background axes from gixsgui and analysis panel
if isequal(udata.selection,0), return; end
gdata = udata.gdata(udata.selection);
if isempty(gdata.FigHandle) || ~ishandle(gdata.FigHandle) || ...
        ~strcmpi(get(gdata.FigHandle,'type'),'figure') || ...
        ~strcmp(get(gdata.FigHandle,'Name'),[gdata.ImFileName,gdata.ImFileExt]);
    plotimage(gdata);
else
    delete(findall(gdata.FigHandle,'tag',['gixsdata:beam0speclabel:',gdata.ImFileName]));
    delete(findall(gdata.FigHandle,'tag',['gixsdata:contourlines:',gdata.ImFileName]));
    delete(findall(gdata.FigHandle,'tag',['gixsdata:roilabel:',gdata.ImFileName]));
    delete(findall(gdata.FigHandle,'tag',['gixsdata:diffpos:',gdata.ImFileName]));
    delete(findall(gdata.FigHandle,'tag',['gixsdata:hkllabel:',gdata.ImFileName]));
    gdata.post_imagesc(gdata);
end
end

function remove_dummy_axis
hFigGIXS = findall(0,'Tag','gixs_fig');
hFigImana = findall(0,'Tag','gixs_fig_imana');
if ishandle(hFigGIXS)
    delete(findall(hFigGIXS,'type','axes'));
end
if ishandle(hFigImana)
    delete(findall(hFigImana,'type','axes'));
end
end

function gixs_PushbuttonCloseAllFcn(~,~)
hfigs = findall(0,'type','figure');
tags = get(hfigs,'tag');
if ~iscell(tags), tags = {tags}; end
for ii=1:length(hfigs)
    if ~isempty(strfind(tags{ii},'gixs_data_fig')), delete(hfigs(ii)); end
end
end

function gixs_CloseRequestFcn(~,~)
hFigGIXS = findall(0,'Tag','gixs_fig');
udata = get(hFigGIXS,'UserData');
% delete some figures
delete(findall(0,'Tag','gixs_data_fig_imagestats'));
delete(findall(0,'Tag','gixs_data_fig_imageheader'));
delete(findall(0,'Tag','gixs_fig_imana'));
% delete gixsdata class
try delete(udata.parDefault); end
try delete(udata.gdata(:)); end
delete(hFigGIXS);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% --- new figure for image data processing tools
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function gixsimana(~,~)
hFigGIXS = findall(0,'Tag','gixs_fig');
if isempty(hFigGIXS)
    return;
end
hFigImana = findall(0,'Tag','gixs_fig_imana');
monitorPos = get(0,'MonitorPositions');
if ~isempty(hFigImana)
    if strcmpi(get(hFigImana,'visible'),'off')
        figurePos = get(hFigImana,'Position');
        figureSize = figurePos(3:4);
        figureGIXSPos = get(hFigGIXS,'position');
        figurePos  = [figureGIXSPos(1)+figureGIXSPos(3)+15, ...
            figureGIXSPos(2)+figureGIXSPos(4)-figureSize(2),...
            figureSize];
        monitorPos = monitorPos(check_figure_monitor(figurePos,monitorPos),:);        
        figurePos(1) = min(figurePos(1),monitorPos(3)-figurePos(3)-10);        
        set(hFigImana,'visible','on','position',figurePos);
    end
    figure(hFigImana);
    return;
end
% --- initialize figure
figureSize = [440 620];
figureGIXSPos = get(hFigGIXS,'position');
figurePos  = [figureGIXSPos(1)+figureGIXSPos(3)+15, ...
    figureGIXSPos(2)+figureGIXSPos(4)-figureSize(2),...
    figureSize];
monitorPos = monitorPos(check_figure_monitor(figurePos,monitorPos),:);
figurePos(1) = min(figurePos(1),monitorPos(3)-figurePos(3)-10);
hFigImana = figure(...
    'BackingStore','on',...
    'Units','pixels',...
    'Position',figurePos,...
    'DockControls','off',...
    'Resize','off',...
    'PaperOrient','portrait',...
    'PaperPositionMode','auto',...
    'HandleVisibility','callback',...
    'IntegerHandle','off',...
    'NumberTitle','off',...
    'MenuBar','none',...
    'Toolbar','none',...
    'CloseRequestFcn',@gixsimana_CloseRequestFcn,...
    'Name','Image Data Processing/Analysis Tools',...
    'WindowStyle','normal',...
    'Tag','gixs_fig_imana','UserData',[]);
backgroundcolor = get(hFigImana,'color');
panelcolor = backgroundcolor;

% --- define tab
msgid = 'MATLAB:uitabgroup:OldVersion';
warning('off',msgid);
if verLessThan('matlab','7.11')
    hTabGroup = uitabgroup('v0','Parent',hFigImana,'BackgroundColor',panelcolor);       
    hTabContour = uitab('v0','parent',hTabGroup,...
        'title','Contour',...
        'tag','gixs_TabControlContour');
    hTabLinecut = uitab('v0','parent',hTabGroup,...
        'title','Linecut',...
        'tag','gixs_TabControlLinecut');
    hTabReshape = uitab('v0','parent',hTabGroup,...
        'title','Reshape',...
        'tag','gixs_TabControlReshape');
    hTabPeakFinder = uitab('v0','parent',hTabGroup,...
        'title','Peak Finder',...
        'tag','gixs_TabControlPeakFinder');
    hTabDiffPos = uitab('parent',hTabGroup,...
        'title','Diffraction',...
        'tag','gixs_TabControlDiffPos');    
    set(hTabGroup,'SelectionChangeFcn',...  % Formerly SelectionChangeFcn
        @(obj,evt) gixs_TabSelectionChangeCbk(obj,evt));
    set(hTabGroup,'SelectedIndex',2);          % Replaces SelectedIndex property    
elseif verLessThan('matlab','8.4')
    hTabGroup = uitabgroup('Parent',hFigImana,'BackgroundColor',panelcolor);       
    hTabContour = uitab('parent',hTabGroup,...
        'title','Contour',...
        'tag','gixs_TabControlContour');
    hTabLinecut = uitab('parent',hTabGroup,...
        'title','Linecut',...
        'tag','gixs_TabControlLinecut');
    hTabReshape = uitab('parent',hTabGroup,...
        'title','Reshape',...
        'tag','gixs_TabControlReshape');
    hTabPeakFinder = uitab('parent',hTabGroup,...
        'title','Peak Finder',...
        'tag','gixs_TabControlPeakFinder');
    hTabDiffPos = uitab('parent',hTabGroup,...
        'title','Diffraction',...
        'tag','gixs_TabControlDiffPos');    
    set(hTabGroup,'SelectionChangeCallback',...  % Formerly SelectionChangeFcn
        @(obj,evt) gixs_TabSelectionChangeCbk(obj,evt));
    set(hTabGroup,'SelectedTab',hTabLinecut);          % Replaces SelectedIndex property    
else
    hTabGroup = uitabgroup(hFigImana,'Position',[-0.02 -0.02 1.04 1.02]);
    hTabContour = uitab('parent',hTabGroup,...
        'title','Contour',...
        'tag','gixs_TabControlContour');
    hTabLinecut = uitab('parent',hTabGroup,...
        'title','Linecut',...
        'tag','gixs_TabControlLinecut');
    hTabReshape = uitab('parent',hTabGroup,...
        'title','Reshape',...
        'tag','gixs_TabControlReshape');
    hTabPeakFinder = uitab('parent',hTabGroup,...
        'title','Peak Finder',...
        'tag','gixs_TabControlPeakFinder');
    hTabDiffPos = uitab('parent',hTabGroup,...
        'title','Diffraction',...
        'tag','gixs_TabControlDiffPos');    
    set(hTabGroup,'SelectedTab',hTabLinecut,...
        'SelectionChangedFcn',@gixs_TabSelectionChangeCbk);          % Replaces SelectedIndex property    
end
% size and locations of all panaels
hPanelContour = uipanel('Parent',hFigImana,...
    'units','norm',...
    'Position',[0.005 0.68 0.99 0.27],...
    'Title','Contour/2D Map Display',...
    'TitlePosition','centertop',...
    'visible','off',...
    'tag','gixs_gixsimana_PanelContour');
set(hTabContour,'UserData',hPanelContour);
SizePanelContour = get(hPanelContour,'position'); SizePanelContour = SizePanelContour(3:4).*figureSize;
hPanelLinecut = uipanel('Parent',hFigImana,...
    'BackgroundColor',panelcolor,...
    'units','norm',...
    'Position',[0.005 0.24 0.99 0.71],...
    'Title','Linecut Tools',...
    'TitlePosition','centertop',...
    'visible','on',...
    'tag','gixs_gixsimana_PanelLinecut');
set(hTabLinecut,'UserData',hPanelLinecut);
SizePanelLinecut = get(hPanelLinecut,'position'); SizePanelLinecut = SizePanelLinecut(3:4).*figureSize;
hPanelReshape = uipanel('Parent',hFigImana,...
    'BackgroundColor',panelcolor,...
    'units','norm',...
    'Position',[0.005 0.68 0.99 0.27],...
    'Title','Reshape Image',...
    'TitlePosition','centertop',...
    'visible','off',...
    'tag','gixs_gixsimana_PanelReshape');
set(hTabReshape,'UserData',hPanelReshape);
SizePanelReshape = get(hPanelReshape,'position'); SizePanelReshape = SizePanelReshape(3:4).*figureSize;
hPanelPeakFinder = uipanel('Parent',hFigImana,...
    'BackgroundColor',panelcolor,...
    'units','norm',...
    'Position',[0.005 0.18 0.99 0.77],...
    'Title','2D Peak Finder',...
    'TitlePosition','centertop',...
    'visible','off',...
    'tag','gixs_gixsimana_PanelPeakFinder');
set(hTabPeakFinder,'UserData',hPanelPeakFinder);
SizePanelPeakFinder = get(hPanelPeakFinder,'position'); SizePanelPeakFinder = SizePanelPeakFinder(3:4).*figureSize;
hPanelDiffPos = uipanel('Parent',hFigImana,...
    'BackgroundColor',panelcolor,...
    'units','norm',...
    'Position',[0.005 0.045 0.99 0.905],...
    'Title','Calculate GIX-Diffraction Positions (DWBA)',...
    'TitlePosition','centertop',...
    'visible','off',...
    'tag','gixs_gixsimana_PanelDiffPos');
set(hTabDiffPos,'UserData',hPanelDiffPos);
SizePanelDiffPos = get(hPanelDiffPos,'position'); SizePanelDiffPos = SizePanelDiffPos(3:4).*figureSize;

% --- Contour panel layout
uicontrol('Parent',hPanelContour,...
    'Style','text',...
    'unit','pixel',...
    'Position',[SizePanelContour(1)-105*3-110,SizePanelContour(2)-35,30,15],...
    'backgroundcolor',panelcolor,...
    'String','Label',...
    'HorizontalAlignment','left')
uicontrol('Parent',hPanelContour,...
    'Style','text',...
    'unit','pixel',...
    'Position',[SizePanelContour(1)-105*3-80,SizePanelContour(2)-35,25,15],...
    'backgroundcolor',panelcolor,...
    'String','Auto',...
    'HorizontalAlignment','center')
uicontrol('Parent',hPanelContour,...
    'Style','text',...
    'unit','pixel',...
    'Position',[SizePanelContour(1)-105*3-50,SizePanelContour(2)-35,50,15],...
    'backgroundcolor',panelcolor,...
    'String','# of lines',...
    'HorizontalAlignment','center')
uicontrol('Parent',hPanelContour,...
    'Style','text',...
    'unit','pixel',...
    'Position',[SizePanelContour(1)-300,SizePanelContour(2)-35,50,15],...
    'backgroundcolor',panelcolor,...
    'String','Min',...
    'HorizontalAlignment','center')
uicontrol('Parent',hPanelContour,...
    'Style','text',...
    'unit','pixel',...
    'Position',[SizePanelContour(1)-230-20,SizePanelContour(2)-35,155,15],...
    'backgroundcolor',panelcolor,...
    'String','Map',...
    'HorizontalAlignment','center')
uicontrol('Parent',hPanelContour,...
    'Style','text',...
    'unit','pixel',...
    'Position',[SizePanelContour(1)-55,SizePanelContour(2)-35,50,15],...
    'backgroundcolor',panelcolor,...
    'String','Max',...
    'HorizontalAlignment','center');
contour_listbox_str = {...
    'q';'phi';...
    'qz (for reflection only)';'qx (for reflection only)';'qy (for reflection only)';'qr (for reflection only)';...
    '2Theta (for reflection only)';'Alphaf (for reflection only)';'Chi (for reflection only)';...
    'x pixel';'y pixel';...
    'none'};
for ii=1:4
    uicontrol('Parent',hPanelContour,...
        'style','Text',...
        'Units','pixel',...
        'backgroundcolor',panelcolor,...
        'String',['#',num2str(ii)],...
        'HorizontalAlignment','lef',...
        'Position',[5,SizePanelContour(2)-65-(ii-1)*25+5,15,15]);
        uicontrol('Parent',hPanelContour,...
        'Style','checkbox',...
        'unit','pixel',...
        'Position',[SizePanelContour(1)-105*3-97,SizePanelContour(2)-60-(ii-1)*25,15,15],...
        'backgroundcolor',panelcolor,...
        'Max',1,...
        'Min',0,...
        'value',0,...
        'Enable','on',...
        'Tag',['gixs_CheckboxContourLabel',num2str(ii)]);
    hAuto = uicontrol('Parent',hPanelContour,...
        'Style','checkbox',...
        'unit','pixel',...
        'Position',[SizePanelContour(1)-105*3-72.5,SizePanelContour(2)-60-(ii-1)*25,15,15],...
        'backgroundcolor',panelcolor,...
        'Max',1,...
        'Min',0,...
        'value',1,...
        'Enable','on',...
        'Tag',['gixs_CheckboxContourAuto',num2str(ii)]);    
    hNOfLines = uicontrol('Parent',hPanelContour,...
        'Style','Edit',...
        'unit','pixel',...
        'Position',[SizePanelContour(1)-105*3-50,SizePanelContour(2)-60-(ii-1)*25,50,20],...
        'backgroundcolor','w',...
        'String','11',...
        'Enable','off',...
        'HorizontalAlignment','left',...
        'Tag',['gixs_EditContourNOfLines',num2str(ii)],...
        'callback','set(gcbo,''string'',max(2,round(str2double(get(gcbo,''string'')))))');
    hMin = uicontrol('Parent',hPanelContour,...
        'style','Edit',...
        'Units','pixel',...
        'backgroundcolor','w',...
        'String','NaN',...
        'HorizontalAlignment','left',...
        'Enable','off',...
        'Position',[SizePanelContour(1)-300,SizePanelContour(2)-60-(ii-1)*25,50,20],...
        'Tag',['gixs_EditContourMin',num2str(ii)],...
        'callback','set(gcbo,''string'',str2double(get(gcbo,''string'')))');
    uicontrol('Parent',hPanelContour,...
        'style','Text',...
        'Units','pixel',...
        'backgroundcolor',panelcolor,...
        'String','<=',...
        'HorizontalAlignment','center',...
        'Position',[SizePanelContour(1)-250,SizePanelContour(2)-60-(ii-1)*25,20,15]);
    hMap = uicontrol('Parent',hPanelContour,...
        'Style','Popupmenu',...
        'unit','pixel',...
        'Position',[SizePanelContour(1)-230,SizePanelContour(2)-60-(ii-1)*25,155,20],...
        'backgroundcolor','w',...
        'String',contour_listbox_str,...
        'value',length(contour_listbox_str),...
        'Enable','on',...
        'Tag',['gixs_PopupmenuContourMap',num2str(ii)]);
    if ii==1, set(hMap,'value',6);end
    uicontrol('Parent',hPanelContour,...
        'style','Text',...
        'Units','pixel',...
        'backgroundcolor',panelcolor,...
        'String','<=',...
        'HorizontalAlignment','center',...
        'Position',[SizePanelContour(1)-75,SizePanelContour(2)-60-(ii-1)*25,20,15]);
    hMax = uicontrol('Parent',hPanelContour,...
        'style','Edit',...
        'Units','pixel',...
        'backgroundcolor','w',...
        'String','NaN',...
        'HorizontalAlignment','left',...
        'Enable','off',...
        'Position',[SizePanelContour(1)-55,SizePanelContour(2)-60-(ii-1)*25,50,20],...
        'Tag',['gixs_EditContourMax',num2str(ii)],...
        'callback','set(gcbo,''string'',str2double(get(gcbo,''string'')))');
    set(hAuto,'UserData',[hNOfLines,hMin,hMax]);
    set(hAuto,'callback',' if get(gcbo,''value'')==1,set(get(gcbo,''UserData''),''Enable'',''off'');else,set(get(gcbo,''UserData''),''Enable'',''on'');end');
end
uicontrol('Parent',hPanelContour,...
    'style','pushbutton',...
    'String','Draw Contours',...
    'unit','pixel',...
    'Position',[SizePanelContour(1)-105*2,SizePanelContour(2)-160,100,20],...
    'Tag','gixs_PushbuttonDrawContour',...
    'callback',@gixs_PushbuttonDrawContourFcn);
uicontrol('Parent',hPanelContour,...
    'style','pushbutton',...
    'String','Draw 2D Maps',...
    'unit','pixel',...
    'Position',[SizePanelContour(1)-105*1,SizePanelContour(2)-160,100,20],...
    'Tag','gixs_PushbuttonDraw2DMap',...
    'TooltipString','Draw 2D maps in seperate figures',...
    'callback',@gixs_PushbuttonDraw2DMapFcn);

% --- linecut panel layout
% --- linecut scale
PosLinecutScale = [5,SizePanelLinecut(2)-35,100,15];
uicontrol('Parent',hPanelLinecut,...
    'style','Text',...
    'Units','pixel',...
    'backgroundcolor',panelcolor,...
    'String','Linecut plot scale: ',...
    'HorizontalAlignment','left',...
    'Position',[5,PosLinecutScale(2),100,15]);
uicontrol('Parent',hPanelLinecut,...
    'Style','Popupmenu',...
    'unit','pixel',...
    'Position',[SizePanelLinecut(1)-105*3,PosLinecutScale(2),100,20],...
    'HorizontalAlignment','right',...
    'backgroundcolor','w',...
    'String',{'linear','logx','logy','logxy'},...
    'value',1,...
    'Enable','on',...
    'Tag','gixs_PopupmenuLinecutScale',...
    'callback',@updatelinecutFcn);
% --- for free cut
PosFreeLinecut = [5,PosLinecutScale(2)-25,100,15];
uicontrol('Parent',hPanelLinecut,...
    'style','Text',...
    'Units','pixel',...
    'backgroundcolor',panelcolor,...
    'String','Free linecut: ',...
    'HorizontalAlignment','left',...
    'Position',[5,PosFreeLinecut(2),100,15]);
% list box for freecut cut
uicontrol('Parent',hPanelLinecut,...
    'style','Text',...
    'Units','pixel',...
    'backgroundcolor',panelcolor,...
    'String','X variable(s) ',...
    'HorizontalAlignment','center',...
    'Position',[SizePanelLinecut(1)-105*1.5,PosFreeLinecut(2),100,15]);
linecut_listbox_str = {...
    'q';'phi';...
    'qz (for reflection only)';'qx (for reflection only)';'qy (for reflection only)';'qr (for reflection only)';...
    '2Theta (for reflection only)';'Alphaf (for reflection only)';'Chi (for reflection only)';...
    'x pixel';'y pixel';'pixel distance'};
uicontrol('Parent',hPanelLinecut,...
    'Style','listbox',...
    'Units','pixel',...
    'Position',[SizePanelLinecut(1)-105*2 PosFreeLinecut(2)-75 205 70],...
    'HorizontalAlignment','left',...
    'backgroundcolor','w',...
    'Min',0,'Max',2,...
    'tooltipstring','''Ctrl+'' for multiple selection.',...
    'String',linecut_listbox_str,'Enable','on',...
    'value',10,...
    'Tag','gixs_ListboxLinecut',...
    'callback',@updatelinecutFcn);
% linecut buttons
uicontrol('Parent',hPanelLinecut,...
    'style','pushbutton',...
    'String','Interactive Cut',...
    'unit','pixel',...
    'Position',[SizePanelLinecut(1)-105*3,PosFreeLinecut(2)-25,100,20],...
    'Tag','gixs_PushbuttonLinecutFree',...
    'TooltipString','Free cut by left clicks. ''Backspace'' to remove previous point. ''Enter'' to finish.',...
    'callback',@gixs_PushbuttonLinecutFreeFcn);
uicontrol('Parent',hPanelLinecut,...
    'style','pushbutton',...
    'String','Defined Cut',...
    'unit','pixel',...
    'Position',[SizePanelLinecut(1)-105*3,PosFreeLinecut(2)-50,100,20],...
    'Tag','gixs_PushbuttonLinecutFreeSuperimpose',...
    'TooltipString','Free linecuts using pixels defined below.',...
    'callback',@gixs_PushbuttonLinecutFreeDefinedCutFcn);
% linecut HVpiexl points
uicontrol('Parent',hPanelLinecut,...
    'style','Text',...
    'Units','pixel',...
    'backgroundcolor',panelcolor,...
    'String','Pixels ',...
    'HorizontalAlignment','right',...
    'Position',[SizePanelLinecut(1)-105*4,PosFreeLinecut(2)-75,50,15]);
uicontrol('Parent',hPanelLinecut,...
    'style','Edit',...
    'Units','pixel',...
    'backgroundcolor','w',...
    'String','[1 1;1 1]',...
    'HorizontalAlignment','left',...
    'Enable','on',...
    'Position',[SizePanelLinecut(1)-105*3.5, PosFreeLinecut(2)-75,150+5,20],...
    'Tag','gixs_EditLinecutPixels',...
    'callback',@updatelinecutFcn);

% --- manual/constrained linecut
PosManualLinecut = [5,PosFreeLinecut(2)-100,100,15];
uicontrol('Parent',hPanelLinecut,...
    'style','Text',...
    'Units','pixel',...
    'backgroundcolor',panelcolor,...
    'String','Constrained linecut: ',...
    'HorizontalAlignment','left',...
    'Position',[5,PosManualLinecut(2),100,15]);
% X
uicontrol('Parent',hPanelLinecut,...
    'style','Text',...
    'Units','pixel',...
    'backgroundcolor',panelcolor,...
    'String','X variable ',...
    'HorizontalAlignment','right',...
    'Position',[SizePanelLinecut(1)-105*4,PosManualLinecut(2)-25,100,15]);
uicontrol('Parent',hPanelLinecut,...
    'Style','Popupmenu',...
    'unit','pixel',...
    'Position',[SizePanelLinecut(1)-105*3 ,PosManualLinecut(2)-25  180 20],...
    'HorizontalAlignment','right',...
    'backgroundcolor','w',...
    'String',linecut_listbox_str(1:end-1),...
    'value',10,...
    'Enable','on',...
    'Tag','gixs_PopupmenuLinecutX',...
    'callback',@updatelinecutFcn);
% # of points
uicontrol('Parent',hPanelLinecut,...
    'style','Text',...
    'Units','pixel',...
    'backgroundcolor',panelcolor,...
    'String','# of points ',...
    'HorizontalAlignment','right',...
    'Position',[SizePanelLinecut(1)-130,PosManualLinecut(2)-25,70,15]);
uicontrol('Parent',hPanelLinecut,...
    'style','Edit',...
    'Units','pixel',...
    'backgroundcolor','w',...
    'String','100',...
    'HorizontalAlignment','left',...
    'Enable','on',...
    'Position',[SizePanelLinecut(1)-55,PosManualLinecut(2)-25,50,20],...
    'Tag','gixs_EditLinecutNOfPts',...
    'callback',@updatelinecutFcn);
% contraints
linecut_listbox_str = {...
    'q';'phi';...
    'qz (for reflection only)';'qx (for reflection only)';'qy (for reflection only)';'qr (for reflection only)';...
    '2Theta (for reflection only)';'Alphaf (for reflection only)';'Chi (for reflection only)';...
    'x pixel';'y pixel';...
    'none'};
for ii=1:4
    uicontrol('Parent',hPanelLinecut,...
        'style','Text',...
        'Units','pixel',...
        'backgroundcolor',panelcolor,...
        'String',['Constraint #',num2str(ii),' '],...
        'HorizontalAlignment','right',...
        'Position',[SizePanelLinecut(1)-105*4,PosManualLinecut(2)-25-ii*25,100,15]);
    uicontrol('Parent',hPanelLinecut,...
        'Style','Popupmenu',...
        'unit','pixel',...
        'Position',[SizePanelLinecut(1)-105*3,PosManualLinecut(2)-25-ii*25,65,20],...
        'backgroundcolor','w',...
        'String',{'AND';'OR'},...
        'Tooltipstring','Constraint is applied in order from #1 to #4 to current mask',...
        'value',1,...
        'Enable','on',...
        'Tag',['gixs_PopupmenuLinecutConstraintOperator',num2str(ii)],...
        'callback',@updatelinecutFcn);
    uicontrol('Parent',hPanelLinecut,...
        'style','Edit',...
        'Units','pixel',...
        'backgroundcolor','w',...
        'String','NaN',...
        'HorizontalAlignment','left',...
        'Enable','on',...
        'Position',[SizePanelLinecut(1)-250,PosManualLinecut(2)-25-ii*25,50,20],...
        'Tag',['gixs_EditLinecutConstraintLower',num2str(ii)],...
        'callback',@updatelinecutFcn);
    uicontrol('Parent',hPanelLinecut,...
        'style','Text',...
        'Units','pixel',...
        'backgroundcolor',panelcolor,...
        'String','<=',...
        'HorizontalAlignment','center',...
        'Position',[SizePanelLinecut(1)-200,PosManualLinecut(2)-25-ii*25,20,15]);
    uicontrol('Parent',hPanelLinecut,...
        'Style','Popupmenu',...
        'unit','pixel',...
        'Position',[SizePanelLinecut(1)-180,PosManualLinecut(2)-25-ii*25,105,20],...
        'backgroundcolor','w',...
        'String',linecut_listbox_str,...
        'value',12,...
        'Enable','on',...
        'Tag',['gixs_PopupmenuLinecutConstraint',num2str(ii)],...
        'callback',@updatelinecutFcn);
    uicontrol('Parent',hPanelLinecut,...
        'style','Text',...
        'Units','pixel',...
        'backgroundcolor',panelcolor,...
        'String','<=',...
        'HorizontalAlignment','center',...
        'Position',[SizePanelLinecut(1)-75,PosManualLinecut(2)-25-ii*25,20,15]);
    uicontrol('Parent',hPanelLinecut,...
        'style','Edit',...
        'Units','pixel',...
        'backgroundcolor','w',...
        'String','NaN',...
        'HorizontalAlignment','left',...
        'Enable','on',...
        'Position',[SizePanelLinecut(1)-55,PosManualLinecut(2)-25-ii*25,50,20],...
        'Tag',['gixs_EditLinecutConstraintUpper',num2str(ii)],...
        'callback',@updatelinecutFcn);
end
set(findall(hPanelLinecut,'tag','gixs_PopupmenuLinecutConstraintOperator1'),'visible','off');
% set(findall(hFigGIXS,'tag','gixs_EditLinecutConstraintLower1'),'string','1');
% set(findall(hFigGIXS,'tag','gixs_PopupmenuLinecutConstraint1'),'value',10);
% set(findall(hFigGIXS,'tag','gixs_EditLinecutConstraintUpper1'),'string','100');
uicontrol('Parent',hPanelLinecut,...
    'style','pushbutton',...
    'String','Cut',...
    'unit','pixel',...
    'Position',[SizePanelLinecut(1)-105*3,PosManualLinecut(2)-150,100,20],...
    'Tag','gixs_PushbuttonLinecutManual',...
    'TooltipString','Perform constrained cut. This may take a few seconds to a minute.',...
    'callback',@gixs_PushbuttonLinecutManualFcn);
uicontrol('Parent',hPanelLinecut,...
    'style','pushbutton',...
    'String','Constrained Mask',...
    'unit','pixel',...
    'Position',[SizePanelLinecut(1)-105*2,PosManualLinecut(2)-150,100,20],...
    'Tag','gixs_PushbuttonLinecutConstrainedMask',...
    'TooltipString','Show constrained mask overlaid on main mask in a seperate figure',...
    'callback',@gixs_PushbuttonLinecutConstrainedMaskFcn);
uicontrol('Parent',hPanelLinecut,...
    'style','pushbutton',...
    'String','Constrained Image',...
    'unit','pixel',...
    'Position',[SizePanelLinecut(1)-105*1,PosManualLinecut(2)-150,100,20],...
    'Tag','gixs_PushbuttonLinecutConstrainedImage',...
    'TooltipString','Show constrained image overlaid on main mask in a seperate figure',...
    'callback',@gixs_PushbuttonLinecutConstrainedImageFcn);
% --- overlay linecut
uicontrol('Parent',hPanelLinecut,...
    'style','Text',...
    'Units','pixel',...
    'backgroundcolor',panelcolor,...
    'String','Overlay current linecut:',...
    'HorizontalAlignment','left',...
    'Position',[5,PosManualLinecut(2)-175,200,15]);
uicontrol('Parent',hPanelLinecut,...
    'style','Text',...
    'Units','pixel',...
    'backgroundcolor',panelcolor,...
    'String','To Figure #',...
    'HorizontalAlignment','right',...
    'Position',[SizePanelLinecut(1)-105*2-70,PosManualLinecut(2)-175,65,15]);
uicontrol('Parent',hPanelLinecut,...
    'style','Edit',...
    'Units','pixel',...
    'backgroundcolor','w',...
    'String','',...
    'HorizontalAlignment','left',...
    'Enable','on',...
    'Position',[SizePanelLinecut(1)-105*2,PosManualLinecut(2)-175,100,20],...
    'Tag','gixs_EditLinecutOverlayFigureNumber',...
    'callback',@updatelinecutFcn);
uicontrol('Parent',hPanelLinecut,...
    'style','Text',...
    'Units','pixel',...
    'backgroundcolor',panelcolor,...
    'String','Multiplication factor',...
    'HorizontalAlignment','right',...
    'Position',[SizePanelLinecut(1)-105*3-50,PosManualLinecut(2)-200,150,15]);
uicontrol('Parent',hPanelLinecut,...
    'style','Edit',...
    'Units','pixel',...
    'backgroundcolor','w',...
    'String','1',...
    'HorizontalAlignment','left',...
    'Enable','on',...
    'Position',[SizePanelLinecut(1)-105*2,PosManualLinecut(2)-200,100,20],...
    'Tag','gixs_EditLinecutOverlayScale',...
    'callback',@updatelinecutFcn);
uicontrol('Parent',hPanelLinecut,...
    'style','pushbutton',...
    'String','Overlay',...
    'TooltipString','Overlay current linecut to specified figure.',...
    'unit','pixel',...
    'Position',[SizePanelLinecut(1)-105,PosManualLinecut(2)-200,100,20],...
    'Tag','gixs_PushbuttonLinecutOverlay',...
    'callback',@gixs_PushbuttonLinecutOverlayFcn);
% --- export linecut
uicontrol('Parent',hPanelLinecut,...
    'style','Text',...
    'Units','pixel',...
    'backgroundcolor',panelcolor,...
    'String','Export current linecut to:',...
    'HorizontalAlignment','left',...
    'Position',[5,PosManualLinecut(2)-225,200,15]);
uicontrol('Parent',hPanelLinecut,...
    'style','pushbutton',...
    'String','Workspace',...
    'unit','pixel',...
    'Position',[SizePanelLinecut(1)-105*2,PosManualLinecut(2)-225,100,20],...
    'Tag','gixs_PushbuttonLinecutExportToWorkspace',...
    'TooltipString','Export current linecut parameter and data to Matlab workspace.',...
    'callback',@gixs_PushbuttonLinecutExportToWoskspaceFcn);
uicontrol('Parent',hPanelLinecut,...
    'style','pushbutton',...
    'String','File ...',...
    'unit','pixel',...
    'Position',[SizePanelLinecut(1)-105*1,PosManualLinecut(2)-225,100,20],...
    'Tag','gixs_PushbuttonLinecutExportToFile',...
    'TooltipString','Export current linecut parameter and data to .mat file or data only to .dat/.txt ASCII file',...
    'callback',@gixs_PushbuttonLinecutExportToFileFcn);
uicontrol('Parent',hPanelLinecut,...
    'style','pushbutton',...
    'String','Curve Fitting Toolbox ...',...
    'unit','pixel',...
    'Position',[SizePanelLinecut(1)-105*2,PosManualLinecut(2)-250,205,20],...
    'Tag','gixs_PushbuttonLinecutExportToCFT',...
    'TooltipString','Export current linecut to Curve Fitting Toolbox (requiring installation).',...
    'callback',@gixs_PushbuttonLinecutExportToCFTFcn);
uicontrol('Parent',hPanelLinecut,...
    'style','pushbutton',...
    'String','Line Fit ...',...
    'unit','pixel',...
    'Position',[SizePanelLinecut(1)-105*2,PosManualLinecut(2)-275,205,20],...
    'Tag','gixs_PushbuttonLinecutExportToPeakFit',...
    'TooltipString','Fit current linecut. Matlab Optimization Toolbox is required.',...
    'callback',@gixs_PushbuttonLinecutExportToLineFitFcn);

% --- reshape image layout
PosReshape = [5,SizePanelReshape(2)-35,200,15];
uicontrol('Parent',hPanelReshape,...
    'Style','text',...
    'unit','pixel',...
    'Position',[SizePanelReshape(1)-105*3-50,PosReshape(2),50,15],...
    'backgroundcolor',panelcolor,...
    'String','# of pts',...
    'HorizontalAlignment','center')
uicontrol('Parent',hPanelReshape,...
    'Style','text',...
    'unit','pixel',...
    'Position',[SizePanelReshape(1)-300,PosReshape(2),50,15],...
    'backgroundcolor',panelcolor,...
    'String','Lower',...
    'HorizontalAlignment','center')
uicontrol('Parent',hPanelReshape,...
    'Style','text',...
    'unit','pixel',...
    'Position',[SizePanelReshape(1)-230,PosReshape(2),155,15],...
    'backgroundcolor',panelcolor,...
    'String','Variable',...
    'HorizontalAlignment','center')
uicontrol('Parent',hPanelReshape,...
    'Style','text',...
    'unit','pixel',...
    'Position',[SizePanelReshape(1)-55,PosReshape(2),50,15],...
    'backgroundcolor',panelcolor,...
    'String','Upper',...
    'HorizontalAlignment','center')
% X
uicontrol('Parent',hPanelReshape,...
    'style','Text',...
    'Units','pixel',...
    'backgroundcolor',panelcolor,...
    'String','X variable ',...
    'HorizontalAlignment','right',...
    'Position',[SizePanelReshape(1)-105*4,PosReshape(2)-25,50,15]);
uicontrol('Parent',hPanelReshape,...
    'Style','Edit',...
    'unit','pixel',...
    'Position',[SizePanelReshape(1)-105*3-50,PosReshape(2)-25,50,20],...
    'backgroundcolor','w',...
    'String','100',...
    'Enable','on',...
    'HorizontalAlignment','left',...
    'Tag','gixs_EditReshapeXNOfPts',...
    'callback',@updatereshapeFcn);
uicontrol('Parent',hPanelReshape,...
    'style','Edit',...
    'Units','pixel',...
    'backgroundcolor','w',...
    'String','-2',...
    'HorizontalAlignment','left',...
    'Enable','on',...
    'Position',[SizePanelReshape(1)-300,PosReshape(2)-25,50,20],...
    'Tag','gixs_EditReshapeXLower',...
    'callback',@updatereshapeFcn);
uicontrol('Parent',hPanelReshape,...
    'style','Text',...
    'Units','pixel',...
    'backgroundcolor',panelcolor,...
    'String','<=',...
    'HorizontalAlignment','center',...
    'Position',[SizePanelReshape(1)-250,PosReshape(2)-25,20,15]);
uicontrol('Parent',hPanelReshape,...
    'Style','Popupmenu',...
    'unit','pixel',...
    'Position',[SizePanelReshape(1)-230,PosReshape(2)-25,155,20],...
    'backgroundcolor','w',...
    'String',linecut_listbox_str(1:end-1),...
    'value',6,...
    'Enable','on',...
    'Tag','gixs_PopupmenuReshapeX',...
    'callback',@updatereshapeFcn);
uicontrol('Parent',hPanelReshape,...
    'style','Text',...
    'Units','pixel',...
    'backgroundcolor',panelcolor,...
    'String','<=',...
    'HorizontalAlignment','center',...
    'Position',[SizePanelReshape(1)-75,PosReshape(2)-25,20,15]);
uicontrol('Parent',hPanelReshape,...
    'style','Edit',...
    'Units','pixel',...
    'backgroundcolor','w',...
    'String','0.5',...
    'HorizontalAlignment','left',...
    'Enable','on',...
    'Position',[SizePanelReshape(1)-55,PosReshape(2)-25,50,20],...
    'Tag','gixs_EditReshapeXUpper',...
    'callback',@updatereshapeFcn);
% Y
uicontrol('Parent',hPanelReshape,...
    'style','Text',...
    'Units','pixel',...
    'backgroundcolor',panelcolor,...
    'String','Y variable ',...
    'HorizontalAlignment','right',...
    'Position',[SizePanelReshape(1)-105*4,PosReshape(2)-50,50,15]);
uicontrol('Parent',hPanelReshape,...
    'Style','Edit',...
    'unit','pixel',...
    'Position',[SizePanelReshape(1)-105*3-50,PosReshape(2)-50,50,20],...
    'backgroundcolor','w',...
    'String',100,...
    'Enable','on',...
    'HorizontalAlignment','left',...
    'Tag','gixs_EditReshapeYNOfPts',...
    'callback',@updatereshapeFcn);
uicontrol('Parent',hPanelReshape,...
    'style','Edit',...
    'Units','pixel',...
    'backgroundcolor','w',...
    'String','0',...
    'HorizontalAlignment','left',...
    'Enable','on',...
    'Position',[SizePanelReshape(1)-300,PosReshape(2)-50,50,20],...
    'Tag','gixs_EditReshapeYLower',...
    'callback',@updatereshapeFcn);
uicontrol('Parent',hPanelReshape,...
    'style','Text',...
    'Units','pixel',...
    'backgroundcolor',panelcolor,...
    'String','<=',...
    'HorizontalAlignment','center',...
    'Position',[SizePanelReshape(1)-250,PosReshape(2)-50,20,15]);
uicontrol('Parent',hPanelReshape,...
    'Style','Popupmenu',...
    'unit','pixel',...
    'Position',[SizePanelReshape(1)-230,PosReshape(2)-50,155,20],...
    'backgroundcolor','w',...
    'String',linecut_listbox_str(1:end-1),...
    'value',3,...
    'Enable','on',...
    'Tag','gixs_PopupmenuReshapeY',...
    'callback',@updatereshapeFcn);
uicontrol('Parent',hPanelReshape,...
    'style','Text',...
    'Units','pixel',...
    'backgroundcolor',panelcolor,...
    'String','<=',...
    'HorizontalAlignment','center',...
    'Position',[SizePanelReshape(1)-75,PosReshape(2)-50,20,15]);
uicontrol('Parent',hPanelReshape,...
    'style','Edit',...
    'Units','pixel',...
    'backgroundcolor','w',...
    'String','2',...
    'HorizontalAlignment','left',...
    'Enable','on',...
    'Position',[SizePanelReshape(1)-55,PosReshape(2)-50,50,20],...
    'Tag','gixs_EditReshapeYUpper',...
    'callback',@updatereshapeFcn);
% inpaint
uicontrol('Parent',hPanelReshape,...
    'style','Text',...
    'Units','pixel',...
    'backgroundcolor',panelcolor,...
    'String','Inpaint ',...
    'Tooltipstring','Inpaint nan values after reshaping',...
    'HorizontalAlignment','right',...
    'Position',[SizePanelReshape(1)-105*4,PosReshape(2)-75,50,15]);
uicontrol('Parent',hPanelReshape,...
    'Style','Popupmenu',...
    'unit','pixel',...
    'Position',[SizePanelReshape(1)-370,PosReshape(2)-75,65,20],...
    'backgroundcolor','w',...
    'String',{'yes','no'},...
    'value',2,...
    'Enable','on',...
    'Tag','gixs_PopupmenuReshapeInpaint',...
    'callback',@updatereshapeFcn);
uicontrol('Parent',hPanelReshape,...
    'style','Text',...
    'Units','pixel',...
    'backgroundcolor',panelcolor,...
    'String','Method',...
    'TooltipString','In Matlab command window, type ''>>help inpaint_nans'' for method descriptions.',...
    'HorizontalAlignment','right',...
    'Position',[SizePanelReshape(1)-310,PosReshape(2)-75,50,15]);
inpaint_method_str = {'0 (simple plate metaphor)','1 (simple plate metaphor | del^2)','2 (simple plate metaphor | del^2)','3 (del^4)','4 (spring metaphor)','5 (8nn)'};
uicontrol('Parent',hPanelReshape,...
    'Style','Popupmenu',...
    'unit','pixel',...
    'Position',[SizePanelReshape(1)-255,PosReshape(2)-75,200,20],...
    'backgroundcolor','w',...
    'String',inpaint_method_str,...
    'TooltipString','In Matlab command window, type ''>>help inpaint_nans'' for method descriptions.',...    
    'value',1,...
    'Enable','off',...
    'Tag','gixs_PopupmenuReshapeInpaintMethod',...
    'callback',@updatereshapeFcn);   
uicontrol('Parent',hPanelReshape,...
    'style','pushbutton',...
    'String','Help',...
    'unit','pixel',...
    'Position',[SizePanelReshape(1)-55,PosReshape(2)-75,50,20],...
    'TooltipString','List of the methods ...',...
    'callback','doc inpaint_nans');
% reshape and export
uicontrol('Parent',hPanelReshape,...
    'style','pushbutton',...
    'String','Reshape',...
    'unit','pixel',...
    'Position',[SizePanelReshape(1)-105*4,PosReshape(2)-100,100,20],...
    'Tag','gixs_PushbuttonReshape',...
    'TooltipString','Reshape image with user defined X and Y axis. This may take a few seconds to a minute.',...
    'callback',@gixs_PushbuttonReshapeFcn);
uicontrol('Parent',hPanelReshape,...
    'style','pushbutton',...
    'String','Plot Image',...
    'unit','pixel',...
    'Position',[SizePanelReshape(1)-105*3,PosReshape(2)-100,100,20],...
    'Tag','gixs_PushbuttonReshapeShow',...
    'TooltipString','Plot reshaped image.',...
    'callback',@reshapeplot);
uicontrol('Parent',hPanelReshape,...
    'style','pushbutton',...
    'String','Plot Count',...
    'unit','pixel',...
    'Position',[SizePanelReshape(1)-105*2,PosReshape(2)-100,100,20],...
    'Tag','gixs_PushbuttonReshapePlotCount',...
    'TooltipString','Plot data count (# of valid data points for each pixle of the reshaped image).',...
    'callback',@reshapeplotcount);
uicontrol('Parent',hPanelReshape,...
    'style','pushbutton',...
    'String','Copy to WS',...
    'unit','pixel',...
    'Position',[SizePanelReshape(1)-105*4,PosReshape(2)-125,100,20],...
    'Tag','gixs_PushbuttonReshapeCopyToWS',...
    'TooltipString','Copy reshpaed image, and reshape settings to Matlab workspace',...
    'callback',@gixs_PushbuttonReshapeExportToWorkSpaceFcn);
uicontrol('Parent',hPanelReshape,...
    'style','pushbutton',...
    'String','Export Reshaped ...',...
    'unit','pixel',...
    'Position',[SizePanelReshape(1)-105*3,PosReshape(2)-125,100,20],...
    'Tag','gixs_PushbuttonReshapeExport',...
    'TooltipString','Export reshaped image to .tif (int32) or .mat file.',...
    'callback',@gixs_PushbuttonReshapeExporttoFileFcn);
uicontrol('Parent',hPanelReshape,...
    'style','pushbutton',...
    'String','Export Inpainted ...',...
    'unit','pixel',...
    'Position',[SizePanelReshape(1)-105*2,PosReshape(2)-125,100,20],...
    'Tag','gixs_PushbuttonReshapeInpaintExport',...
    'TooltipString','Export reshaped-then-inpainted image to .tif (int32) or .mat file.',...
    'callback',@gixs_PushbuttonReshapeExporttoFileFcn);

% --- peak finder layout
uicontrol('Parent',hPanelPeakFinder,...
    'Style','text',...
    'unit','pixel',...
    'Position',[5,SizePanelPeakFinder(2)-35,70,15],...
    'backgroundcolor',panelcolor,...
    'String','Select model: ',...
    'HorizontalAlignment','left')
uicontrol('Parent',hPanelPeakFinder,...
    'Style','Popupmenu',...
    'unit','pixel',...
    'Position',[80,SizePanelPeakFinder(2)-35,100,20],...
    'backgroundcolor','w',...
    'String',{'com';'bvnd'},...
    'value',2,...
    'Enable','on',...
    'Tag','gixs_PopupmenuPeakFinderModel');
uicontrol('Parent',hPanelPeakFinder,...
    'style','pushbutton',...
    'String','Select ROI',...
    'unit','pixel',...
    'Position',[SizePanelPeakFinder(1)-105*1,SizePanelPeakFinder(2)-35,100,20],...
    'Tag','gixs_PushbuttonPeakFinderROI',...
    'TooltipString','Click to define ROI around a diffraction peak',...
    'callback',@gixs_PushbuttonPeakFinderROIFcn);
uicontrol('Parent',hPanelPeakFinder,...
    'style','Edit',...
    'Units','pixel',...
    'backgroundcolor','w',...
    'String',{' '},...
    'Max',2,...
    'Min',0,...
    'HorizontalAlignment','left',...
    'Enable','inactive',...
    'Position',[1,SizePanelPeakFinder(2)-240,SizePanelPeakFinder(1)-4,200],...
    'Tag','gixs_EditPeakFinderMsg');
colName = {'','Model','X0','Y0','Q','Phi','Qz','Qx','Qy','Qr','2Theta','Alphaf'};
rowName = {1:9};
hTable = uitable('Parent',hPanelPeakFinder,...
    'unit','pixel',...
    'Position',[1,SizePanelPeakFinder(2)-445,SizePanelPeakFinder(1)-4,200],...
    'Tag','gixs_TablePeakFinder');
set(hTable, 'ColumnName', colName,...
    'RowName',rowName,...
    'ColumnWidth', [20,50,repmat({70},[1,10])],...
    'ColumnEditable', [true,false([1,11])]);
uicontrol('Parent',hPanelPeakFinder,...
    'style','pushbutton',...
    'String','Reset',...
    'unit','pixel',...
    'Position',[SizePanelPeakFinder(1)-105*4,SizePanelPeakFinder(2)-470,100,20],...
    'Tag','gixs_PushbuttonPeakFinderReset',...
    'TooltipString','Reset and delete all peaks',...
    'callback',@gixs_PushbuttonPeakFinderResetFcn);
uicontrol('Parent',hPanelPeakFinder,...
    'style','pushbutton',...
    'String','Delete',...
    'unit','pixel',...
    'Position',[SizePanelPeakFinder(1)-105*3,SizePanelPeakFinder(2)-470,100,20],...
    'Tag','gixs_PushbuttonPeakFinderDelete',...
    'TooltipString','Delete selected peaks',...
    'callback',@gixs_PushbuttonPeakFinderDeleteFcn);
uicontrol('Parent',hPanelPeakFinder,...
    'style','pushbutton',...
    'String','Show in 3D',...
    'unit','pixel',...
    'Position',[SizePanelPeakFinder(1)-105*2,SizePanelPeakFinder(2)-470,100,20],...
    'Tag','gixs_PushbuttonPeakFinderShow3D',...
    'TooltipString','Show fitting results of selected peaks in 3D (for bvnd only)',...
    'callback',@gixs_PushbuttonPeakFinderShow3DFcn);
uicontrol('Parent',hPanelPeakFinder,...
    'style','pushbutton',...
    'String','Export to File ...',...
    'unit','pixel',...
    'Position',[SizePanelPeakFinder(1)-105*1,SizePanelPeakFinder(2)-470,100,20],...
    'Tag','gixs_PushbuttonPeakFinderExport',...
    'TooltipString','Export result to .mat file or .dat/.txt ASCII file',...
    'callback',@gixs_PushbuttonPeakFinderExportFcn);

% --- diffraction panel
uicontrol('Parent',hPanelDiffPos,...
    'Style','text',...
    'unit','pixel',...
    'Position',[5,SizePanelDiffPos(2)-35,300,15],...
    'backgroundcolor',panelcolor,...
    'String','Lattice parameters - construct unit cell: ',...
    'HorizontalAlignment','left');
uicontrol('Parent',hPanelDiffPos,...
    'Style','text','unit','pixel','backgroundcolor',panelcolor,...
    'Position',[15,SizePanelDiffPos(2)-55,60,15],...
    'String','a',...
    'HorizontalAlignment','center');
uicontrol('Parent',hPanelDiffPos,...
    'Style','text','unit','pixel','backgroundcolor',panelcolor,...
    'Position',[80,SizePanelDiffPos(2)-55,60,15],...
    'String','b',...
    'HorizontalAlignment','center');
uicontrol('Parent',hPanelDiffPos,...
    'Style','text','unit','pixel','backgroundcolor',panelcolor,...
    'Position',[145,SizePanelDiffPos(2)-55,60,15],...
    'String','c',...
    'HorizontalAlignment','center');
uicontrol('Parent',hPanelDiffPos,...
    'Style','Edit','unit','pixel','backgroundcolor','w',...
    'Position',[15,SizePanelDiffPos(2)-80,60,20],...
    'String','100',...
    'Enable','on',...
    'HorizontalAlignment','l',...
    'Tag','gixs_EditDiffPos1',...
    'callback',@updatediffractionFcn);
uicontrol('Parent',hPanelDiffPos,...
    'Style','Edit','unit','pixel','backgroundcolor','w',...
    'Position',[80,SizePanelDiffPos(2)-80,60,20],...
    'String','173',...
    'Enable','on',...
    'HorizontalAlignment','left',...
    'Tag','gixs_EditDiffPos2',...
    'callback',@updatediffractionFcn);
uicontrol('Parent',hPanelDiffPos,...
    'Style','Edit','unit','pixel','backgroundcolor','w',...
    'Position',[145,SizePanelDiffPos(2)-80,60,20],...
    'String','Inf',...
    'Enable','on',...
    'HorizontalAlignment','left',...
    'Tag','gixs_EditDiffPos3',...
    'callback',@updatediffractionFcn);
uicontrol('Parent',hPanelDiffPos,...
    'Style','text','unit','pixel','backgroundcolor',panelcolor,...
    'Position',[15,SizePanelDiffPos(2)-100,60,15],...
    'String','alpha',...
    'HorizontalAlignment','center');
uicontrol('Parent',hPanelDiffPos,...
    'Style','text','unit','pixel','backgroundcolor',panelcolor,...
    'Position',[80,SizePanelDiffPos(2)-100,60,15],...
    'String','beta',...
    'HorizontalAlignment','center');
uicontrol('Parent',hPanelDiffPos,...
    'Style','text','unit','pixel','backgroundcolor',panelcolor,...
    'Position',[145,SizePanelDiffPos(2)-100,60,15],...
    'String','gamma',...
    'HorizontalAlignment','center');
uicontrol('Parent',hPanelDiffPos,...
    'Style','Edit','unit','pixel','backgroundcolor','w',...
    'Position',[15,SizePanelDiffPos(2)-125,60,20],...
    'String','90',...
    'Enable','on','HorizontalAlignment','left',...
    'Tag','gixs_EditDiffPos4',...
    'callback',@updatediffractionFcn);
uicontrol('Parent',hPanelDiffPos,...
    'Style','Edit','unit','pixel','backgroundcolor','w',...
    'Position',[80,SizePanelDiffPos(2)-125,60,20],...
    'String','90',...
    'Enable','on','HorizontalAlignment','left',...
    'HorizontalAlignment','left',...
    'Tag','gixs_EditDiffPos5',...
    'callback',@updatediffractionFcn);
uicontrol('Parent',hPanelDiffPos,...
    'Style','Edit','unit','pixel','backgroundcolor','w',...
    'Position',[145,SizePanelDiffPos(2)-125,60,20],...
    'String','90',...
    'Enable','on','HorizontalAlignment','left',...
    'Tag','gixs_EditDiffPos6',...
    'callback',@updatediffractionFcn);
% reflection conditions
hRadioGroup = uibuttongroup('Parent',hPanelDiffPos,...
    'visible','off','Units','pixel','BorderType','none',...
    'BackgroundColor',panelcolor,...
    'Position',[210,SizePanelDiffPos(2)-110,220,80]);
hRadio1 = uicontrol('parent',hRadioGroup,'Style','Radiobutton',...
    'String','Space group',...   
    'pos',[5 60 200 15],...
    'BackgroundColor',panelcolor,...
    'Value',1,'Max',1,'Min',0,...
    'HandleVisibility','off',...
    'tag','gixs_RadioDiffPos1');
uicontrol('Parent',hPanelDiffPos,...
    'style','pushbutton',...
    'String','IUCr Web',...
    'unit','pixel',...
    'Position',[SizePanelDiffPos(1)-105,SizePanelDiffPos(2)-55,100,20],...
    'Tag','gixs_PushbuttonIUCrWeb',...
    'TooltipString','Open web browser for International Table for Crystallography Volume A: Space-group symmetry (may need subscritpion)',...
    'callback','web(''http://it.iucr.org/A/'',''-browser'')');
hRadio2 = uicontrol('parent',hRadioGroup,'Style','Radio',...
    'String','Basis coordinates',...
    'pos',[5 5 120 15],...
    'BackgroundColor',panelcolor,...
    'Value',0,'Max',1,'Min',0,...
    'HandleVisibility','off',...
    'tag','gixs_RadioDiffPos2');
% uicontrol('Parent',hPanelDiffPos,...
%     'Style','text','unit','pixel','backgroundcolor',panelcolor,...
%     'Position',[200,SizePanelDiffPos(2)-95,110,15],...
%     'String','Enter <uvw>',...
%     'HorizontalAlignment','right');
set(hRadioGroup,'SelectionChangeFcn',@gixs_RadioDiffPosSelcbk);
set(hRadioGroup,'Visible','on');
sglist = cellfun(@(x)[num2str(x),' (',cell2mat(sgname(x)),')'],...
    num2cell([1:230]'),'UniformOutput',0);
uicontrol('Parent',hPanelDiffPos,...
    'Style','Popupmenu','unit','pixel','backgroundcolor','w','Enable','on',...
    'Position',[SizePanelDiffPos(1)-105*2,SizePanelDiffPos(2)-80,210,20],...
    'String',sglist,...
    'value',1,...
    'Enable','on',...
    'Tag','gixs_PopupmenuDiffPosSpaceGroup',...
    'callback',@updatediffractionFcn);
uicontrol('Parent',hPanelDiffPos,...
    'style','Edit','Units','pixel','backgroundcolor','w','Enable','off',...
    'String',{'[0,0,0]'},...
    'Max',2,'Min',0,...
    'HorizontalAlignment','left',...
    'Position',[SizePanelDiffPos(1)-105,SizePanelDiffPos(2)-125,100,40],...
    'Tag','gixs_EditDiffPosUVW',...
    'callback',@updatediffractionFcn);
% crystal orientation
uicontrol('Parent',hPanelDiffPos,...
    'Style','text',...
    'unit','pixel',...
    'Position',[5,SizePanelDiffPos(2)-150,400,15],...
    'backgroundcolor',panelcolor,...
    'String','Crystal orientation - specify a direction normal or parallel to the substrate: ',...
    'HorizontalAlignment','left');
lattice_orientation_string = {...
    'normal | <xyz>: in the Cartesian sample reference frame',...
    'normal | <hkl>: directional indices of a lattice vector in the crystal frame (direct lattice)',...
    'parallel | (hkl): miller indices of a lattice plane (reciprocal lattice)'};
uicontrol('Parent',hPanelDiffPos,...
    'Style','Popupmenu','unit','pixel','backgroundcolor','w','Enable','on',...
    'Position',[15,SizePanelDiffPos(2)-175,315,20],...
    'String',lattice_orientation_string,...
    'value',2,...
    'Enable','on',...
    'Tag','gixs_PopupmenuDiffPosOrientationMethod',...
    'callback',@updatediffractionFcn);
uicontrol('Parent',hPanelDiffPos,...
    'style','Edit','Units','pixel','backgroundcolor','w','Enable','on',...
    'String','[0,1,0]',...
    'HorizontalAlignment','left',...
    'Position',[SizePanelDiffPos(1)-90,SizePanelDiffPos(2)-175,85,20],...
    'Tag','gixs_EditDiffPosOrientation',...
    'callback',@updatediffractionFcn);
% miller index
uicontrol('Parent',hPanelDiffPos,...
    'Style','text',...
    'unit','pixel',...
    'Position',[5,SizePanelDiffPos(2)-200,90,15],...
    'backgroundcolor',panelcolor,...
    'String','Miller index (hkl): ',...
    'HorizontalAlignment','left');
uicontrol('Parent',hPanelDiffPos,'Style','text','unit','pixel',...
    'Position',[SizePanelDiffPos(1)-340,SizePanelDiffPos(2)-200,15,15],...
    'String','h ',...
    'backgroundcolor',panelcolor,...
    'HorizontalAlignment','right');
uicontrol('Parent',hPanelDiffPos,...
    'style','Edit','Units','pixel','backgroundcolor','w','Enable','on',...
    'String','-4:4',...
    'HorizontalAlignment','left',...
    'Position',[SizePanelDiffPos(1)-315,SizePanelDiffPos(2)-200,85,20],...
    'Tag','gixs_EditDiffPosMiller1',...
    'callback',@updatediffractionFcn);
uicontrol('Parent',hPanelDiffPos,'Style','text','unit','pixel',...
    'Position',[SizePanelDiffPos(1)-220,SizePanelDiffPos(2)-200,15,15],...
    'String','k ',...
    'backgroundcolor',panelcolor,...
    'HorizontalAlignment','right');
uicontrol('Parent',hPanelDiffPos,...
    'style','Edit','Units','pixel','backgroundcolor','w','Enable','on',...
    'String','-4:4',...
    'HorizontalAlignment','left',...
    'Position',[SizePanelDiffPos(1)-200,SizePanelDiffPos(2)-200,85,20],...
    'Tag','gixs_EditDiffPosMiller2',...
    'callback',@updatediffractionFcn);
uicontrol('Parent',hPanelDiffPos,'Style','text','unit','pixel',...
    'Position',[SizePanelDiffPos(1)-110,SizePanelDiffPos(2)-200,15,15],...
    'String','l ',...
    'backgroundcolor',panelcolor,...
    'HorizontalAlignment','right');
uicontrol('Parent',hPanelDiffPos,...
    'style','Edit','Units','pixel','backgroundcolor','w','Enable','on',...
    'String','0',...
    'HorizontalAlignment','left',...
    'Position',[SizePanelDiffPos(1)-90,SizePanelDiffPos(2)-200,85,20],...
    'Tag','gixs_EditDiffPosMiller3',...
    'callback',@updatediffractionFcn);
% refraction index
uicontrol('Parent',hPanelDiffPos,...
    'Style','text',...
    'unit','pixel',...
    'Position',[5,SizePanelDiffPos(2)-225,170,15],...
    'backgroundcolor',panelcolor,...
    'String','About refractive index of sample:',...
    'HorizontalAlignment','left');
uicontrol('Parent',hPanelDiffPos,'Style','text','unit','pixel',...
    'Position',[SizePanelDiffPos(1)-235,SizePanelDiffPos(2)-225,55,15],...
    'String','alpha_c ',...
    'tooltipstring','Critical angle. (Unit: degree)',...
    'backgroundcolor',panelcolor,...
    'HorizontalAlignment','right');
uicontrol('Parent',hPanelDiffPos,...
    'style','Edit','Units','pixel','backgroundcolor','w','Enable','on',...
    'String','0.17',...
    'HorizontalAlignment','left',...
    'Position',[SizePanelDiffPos(1)-175,SizePanelDiffPos(2)-225,60,20],...
    'Tag','gixs_EditDiffPosAlphaC',...
    'callback',@updatediffractionFcn);
uicontrol('Parent',hPanelDiffPos,'Style','text','unit','pixel',...
    'Position',[SizePanelDiffPos(1)-110,SizePanelDiffPos(2)-225,40,15],...
    'String','mu ',...
    'tooltipstring','Linear absorption coefficient. (Unit: cm^-1)',...
    'backgroundcolor',panelcolor,...
    'HorizontalAlignment','right');
uicontrol('Parent',hPanelDiffPos,...
    'style','Edit','Units','pixel','backgroundcolor','w','Enable','on',...
    'String','0',...
    'HorizontalAlignment','left',...
    'Position',[SizePanelDiffPos(1)-65,SizePanelDiffPos(2)-225,60,20],...
    'Tag','gixs_EditDiffPosMu',...
    'callback',@updatediffractionFcn);
% other parameter
uicontrol('Parent',hPanelDiffPos,...
    'Style','text',...
    'unit','pixel',...
    'Position',[5,SizePanelDiffPos(2)-250,170,15],...
    'backgroundcolor',panelcolor,...
    'String','Problem solving settings:',...
    'HorizontalAlignment','left');
uicontrol('Parent',hPanelDiffPos,'Style','text','unit','pixel',...
    'Position',[SizePanelDiffPos(1)-250,SizePanelDiffPos(2)-250,70,15],...
    'String','q deadband ',...
    'tooltipstring',['Deadband for searching [hkl] degeneracy. (Unit: ',char(197),'^-1)'],...
    'backgroundcolor',panelcolor,...
    'HorizontalAlignment','right');
uicontrol('Parent',hPanelDiffPos,...
    'style','Edit','Units','pixel','backgroundcolor','w','Enable','on',...
    'String','1e-8',...
    'HorizontalAlignment','left',...
    'Position',[SizePanelDiffPos(1)-175,SizePanelDiffPos(2)-250,60,20],...
    'Tag','gixs_EditDiffPosQDeadband',...
    'callback',@updatediffractionFcn);
uicontrol('Parent',hPanelDiffPos,'Style','text','unit','pixel',...
    'Position',[SizePanelDiffPos(1)-115,SizePanelDiffPos(2)-250,45,15],...
    'String','q cutoff ',...
    'tooltipstring',['Value below which solved absolute q (BA) components are set to zero. (Unit: ',char(197),'^-1)'],...
    'backgroundcolor',panelcolor,...
    'HorizontalAlignment','right');
uicontrol('Parent',hPanelDiffPos,...
    'style','Edit','Units','pixel','backgroundcolor','w','Enable','on',...
    'String','1e-6',...
    'HorizontalAlignment','left',...
    'Position',[SizePanelDiffPos(1)-65,SizePanelDiffPos(2)-250,60,20],...
    'Tag','gixs_EditDiffPosQCutoff',...
    'callback',@updatediffractionFcn);
% calculation
uicontrol('Parent',hPanelDiffPos,'style','pushbutton','unit','pixel',...
    'String','Start Calculation',...
    'Position',[SizePanelDiffPos(1)-320,SizePanelDiffPos(2)-275,205,20],...
    'Tag','gixs_PushbuttonDiffPosCalculate',...
    'callback',@gixs_PushbuttonDiffPosCalculate);
colName = {'','H','K','L','2Theta (T)','Alphaf (T)','2Theta (R)','Alphaf (R)',...
    'Qx (T)','Qy (T)','Qz (T)','Qx (R)','Qy (R)','Qz (R)',...
    'Qx (BA)','Qy (BA)','Qz (BA)'};
rowName = {1:10};
hTable = uitable('Parent',hPanelDiffPos,...
    'unit','pixel',...
    'Position',[1,SizePanelDiffPos(2)-480,SizePanelDiffPos(1)-4,200],...
    'Tag','gixs_TableDiffPos');
set(hTable, 'ColumnName', colName,...
    'RowName',rowName,...
    'ColumnWidth', [20,40,40,40,repmat({70},[1,13])],...
    'ColumnEditable', [true,false([1,16])]);
uicontrol('Parent',hPanelDiffPos,'style','pushbutton','unit','pixel',...
    'String','Select All',...
    'Position',[SizePanelDiffPos(1)-105*4,SizePanelDiffPos(2)-505,100,20],...
    'Tag','gixs_PushbuttonDiffPosSelectAll',...
    'callback',@gixs_PushbuttonDiffPosSelectDeselectAllFcn);
uicontrol('Parent',hPanelDiffPos,'style','pushbutton','unit','pixel',...
    'String','Deselect All',...
    'Position',[SizePanelDiffPos(1)-105*3,SizePanelDiffPos(2)-505,100,20],...
    'Tag','gixs_PushbuttonDiffPosDeselectAll',...
    'callback',@gixs_PushbuttonDiffPosSelectDeselectAllFcn);
uicontrol('Parent',hPanelDiffPos,'style','pushbutton','unit','pixel',...
    'String','Copy to WS',...
    'Position',[SizePanelDiffPos(1)-105*2,SizePanelDiffPos(2)-505,100,20],...
    'Tag','gixs_PushbuttonDiffPosCopy2WS',...
    'Tooltipstring','Exoport selected diffraction positions to Matlab workspace',...
    'callback',@gixs_PushbuttonDiffPosExportFcn);
uicontrol('Parent',hPanelDiffPos,'style','pushbutton','unit','pixel',...
    'String','Export to File ...',...
    'Position',[SizePanelDiffPos(1)-105,SizePanelDiffPos(2)-505,100,20],...
    'Tag','gixs_PushbuttonDiffPosExport',...
    'Tooltipstring','Exoport selected diffraction positions to MAT file',...    
    'callback',@gixs_PushbuttonDiffPosExportFcn);
% plot
uicontrol('Parent',hPanelDiffPos,'Style','text','unit','pixel',...
    'Position',[5,SizePanelDiffPos(2)-530,100,15],...
    'backgroundcolor',panelcolor,...
    'String','Plot options: ',...
    'HorizontalAlignment','left');
uicontrol('Parent',hPanelDiffPos,'Style','checkbox','unit','pixel',...
    'Position',[SizePanelDiffPos(1)-360,SizePanelDiffPos(2)-530,15,15],...
    'backgroundcolor',panelcolor,...
    'Max',1,'Min',0,'value',0,...
    'Enable','on',...
    'Tag','gixs_CheckboxDiffPosLabelHKL',...
    'Callback',@gixs_CheckboxDiffPosLabelHKLFcn);
uicontrol('Parent',hPanelDiffPos,'Style','text','unit','pixel',...
    'Position',[SizePanelDiffPos(1)-340,SizePanelDiffPos(2)-530,55,15],...
    'backgroundcolor',panelcolor,...
    'String','Label [hkl]',...
    'HorizontalAlignment','left');
uicontrol('Parent',hPanelDiffPos,...
    'Style','Popupmenu','unit','pixel','backgroundcolor','w','Enable','on',...
    'Position',[SizePanelDiffPos(1)-95*3,SizePanelDiffPos(2)-530,90,20],...
    'String',{'Singleton','Full set'},...
    'value',1,...
    'Tooltipstring','Label one or full [hkl] set for degenerated diffractions',...
    'Enable','off',...
    'Tag','gixs_PopupmenuDiffPosLabelHKLSingleton');
uicontrol('Parent',hPanelDiffPos,...
    'Style','Popupmenu','unit','pixel','backgroundcolor','w','Enable','on',...
    'Position',[SizePanelDiffPos(1)-95*2,SizePanelDiffPos(2)-530,90,20],...
    'String',{'Transmitted','Reflected','Born','T+R','All'},...
    'value',1,...
    'Tooltipstring','Choose transmitted, reflected or BA branches to label',...
    'Enable','off',...
    'Tag','gixs_PopupmenuDiffPosLabelHKLBeam');
uicontrol('Parent',hPanelDiffPos,...
    'Style','Popupmenu','unit','pixel','backgroundcolor','w','Enable','on',...
    'Position',[SizePanelDiffPos(1)-95,SizePanelDiffPos(2)-530,90,20],...
    'String',{'Left','Right'},...
    'value',1,...
    'Tooltipstring','Choose the side of the TwoTheta to label',...
    'Enable','off',...
    'Tag','gixs_PopupmenuDiffPosLabelHKLFigSide');
uicontrol('Parent',hPanelDiffPos,'style','pushbutton','unit','pixel',...
    'String','Plot in Angle',...
    'Position',[SizePanelDiffPos(1)-105*4,SizePanelDiffPos(2)-555,100,20],...
    'Tag','gixs_PushbuttonDiffPosPlotInAngle',...
    'Tooltipstring','Plot diffraction positions in angle space in a seperate figure',...    
    'callback',@gixs_PushbuttonDiffPosPlotFcn);
uicontrol('Parent',hPanelDiffPos,'style','pushbutton','unit','pixel',...
    'String','Plot in Q',...
    'Position',[SizePanelDiffPos(1)-105*3,SizePanelDiffPos(2)-555,100,20],...
    'Tag','gixs_PushbuttonDiffPosPlotInQ',...
    'Tooltipstring','Plot diffraction positions in q space in a seperate figure',...    
    'callback',@gixs_PushbuttonDiffPosPlotFcn);
uicontrol('Parent',hPanelDiffPos,...
    'Style','Popupmenu','unit','pixel','backgroundcolor','w','Enable','on',...
    'Position',[SizePanelDiffPos(1)-190,SizePanelDiffPos(2)-555,80,20],...
    'String',{'Hold on','Hold off'},...
    'value',2,...
    'Tooltipstring','Leave previous plotting on image?',...
    'Enable','on',...
    'Tag','gixs_PopupmenuDiffPosLabelPlotOnImageHold');
uicontrol('Parent',hPanelDiffPos,'style','pushbutton','unit','pixel',...
    'String','Plot on Image',...
    'Position',[SizePanelDiffPos(1)-105,SizePanelDiffPos(2)-555,100,20],...
    'Tag','gixs_PushbuttonDiffPosPlotOnImage',...
    'Tooltipstring','Plot diffraction positions on top of the selected image (BA branch is not plotted)',...    
    'callback',@gixs_PushbuttonDiffPosPlotOnImageFcn);

% --- Quit/Hide Figure
uicontrol('Parent',hFigImana,...
    'style','pushbutton',...
    'String','Hide',...
    'unit','pixel',...
    'Position',[5,5,70,20],...
    'Tag','gixs_PushbuttonQuitImana',...
    'TooltipString','Quit Image Processing Tools',...
    'callback',@gixsimana_CloseRequestFcn);
end


function gixs_TabSelectionChangeCbk(~,evt)
set(evt.OldValue.UserData,'visible','off');
set(evt.NewValue.UserData,'visible','on');
end


function gixs_PushbuttonDraw2DMapFcn(~,~)
hFigGIXS = findall(0,'Tag','gixs_fig');
hFigImana = findall(0,'Tag','gixs_fig_imana');
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0), return; end
gdata = udata.gdata(udata.selection);
map_2D = {};
map_name_str = {};
for ii=1:4      % get maps
    map_index = get(findall(hFigImana,'tag',['gixs_PopupmenuContourMap',num2str(ii)]),'value');
    if map_index ~= 12
        [map_2D_tmp,map_name_str_tmp] = getmapdata(gdata,map_index);
        map_2D = [map_2D,map_2D_tmp];
        map_name_str = [map_name_str,map_name_str_tmp];
    end
end
if isempty(map_2D), return; end
for ii=1:length(map_2D)
    figure_name_str = [map_name_str{ii},' Map: ',gdata.ImFileName];
    figure('Name',figure_name_str,'tag','gixs_data_fig_map');
    imagesc(1:gdata.ImDim(1),1:gdata.ImDim(2),map_2D{ii});
    axis image;
    xlabel('x pixel');ylabel('y pixel');
end
end


function gixs_PushbuttonDrawContourFcn(~,~)
hFigGIXS = findall(0,'Tag','gixs_fig');
hFigImana = findall(0,'Tag','gixs_fig_imana');
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0), return; end
gdata = udata.gdata(udata.selection);
% --- replot figure
replot(udata); figure(gdata.FigHandle);
hAxes = gca;
hwarndlg = warndlg('Please wait while drawing contour lines ...','Contour Plot Warning','modal');
% --- start loop
for ii=1:4
    % --- get map
    map_index = get(findall(hFigImana,'tag',['gixs_PopupmenuContourMap',num2str(ii)]),'value');
    [map_2D,map_name_str] = getmapdata(gdata,map_index);
    if map_index == 12 || isempty(map_2D), continue; end
    % --- determine auto or manual contour
    if get(findall(hFigImana,'tag',['gixs_CheckboxContourAuto',num2str(ii)]),'value') == 1       % for auto
        auto_flag = 1;
    else                                                              % for manual
        auto_flag = 0;
        hMin = findall(hFigImana,'tag',['gixs_EditContourMin',num2str(ii)]);
        hMax = findall(hFigImana,'tag',['gixs_EditContourMax',num2str(ii)]);
        hNOfLines = findall(hFigImana,'tag',['gixs_EditContourNOfLines',num2str(ii)]);
        vMin = str2double(get(hMin,'string'));
        vMax = str2double(get(hMax,'string'));
        NOfLines = round(str2double(get(hNOfLines,'string')));
        if isnan(vMin) || isnan(vMax) || vMin>vMax
            delete(hwarndlg);
            errordlg('Invalid min and/or max values.','Contour Plot Error','modal');
            return;
        end
    end
    set(hAxes,'NextPlot','add');
    if auto_flag
        [C,h] = contour(hAxes,1:gdata.ImDim(1),1:gdata.ImDim(2),map_2D);
    else
        [C,h] = contour(hAxes,1:gdata.ImDim(1),1:gdata.ImDim(2),map_2D,linspace(vMin,vMax,NOfLines));
    end
    set(h,'tag',['gixsdata:contourlines:',gdata.ImFileName],'DisplayName',map_name_str);
    if get(findall(hFigImana,'tag',['gixs_CheckboxContourLabel',num2str(ii)]),'value') == 1
        clabel(C,h);
    end
    set(hAxes,'NextPlot','replace');
end
delete(hwarndlg);
end


function [map_2D,map_name_str] = getmapdata(gdata,map_index)
switch map_index
    case 1
        map_2D = gdata.QMap;
        map_name_str = 'Q';
    case 2
        map_2D = gdata.PhiMap;
        map_name_str = 'Phi';
    case 3
        map_2D = gdata.QzMap;
        map_name_str = 'Qz';
    case 4
        map_2D = gdata.QxMap;
        map_name_str = 'Qx';
    case 5
        map_2D = gdata.QyMap;
        map_name_str = 'Qy';
    case 6
        map_2D = abs(gdata.QrMap);
        map_name_str = 'Qr';
    case 7
        map_2D = gdata.TwoThetaMap;
        map_name_str = 'TwoTheta';
    case 8
        map_2D = gdata.AlphafMap;
        map_name_str = 'Alphaf';
    case 9
        map_2D = gdata.ChiMap;
        map_name_str = 'Chi';        
    case 10
        [map_2D,~] = meshgrid(1:gdata.ImDim(1),1:gdata.ImDim(2));
        map_name_str = 'X';
    case 11
        [~,map_2D] = meshgrid(1:gdata.ImDim(1),1:gdata.ImDim(2));
        map_name_str = 'Y';
    otherwise
        map_2D = [];
        map_name_str = '';
end
end


function linecut_plot(x,y,X,plotscale,legendname)
plot(x,y,'DisplayName',titlestr(legendname));
xlabel_str = [...
    get_var_name(X),' ',get_var_unit(X)];
box on; xlabel(xlabel_str);ylabel('intensity (a.u.)');
linecut_plot_scale(gcf,plotscale);
end


function linecut_plot_scale(hfigs,plotscale)
msgID = 'MATLAB:Axes:NegativeDataInLogAxis';
s_old = warning('Query',msgID);
warning('off',msgID);
switch plotscale
    case 1
        setsubplot(hfigs,'xscale','linear','yscale','linear');
    case 2
        setsubplot(hfigs,'xscale','log','yscale','linear');
    case 3
        setsubplot(hfigs,'xscale','linear','yscale','log');
    case 4
        setsubplot(hfigs,'xscale','log','yscale','log');
end
warning(s_old.state,msgID);
end


function gixs_PushbuttonLinecutManualFcn(~,~)
hFigGIXS = findall(0,'Tag','gixs_fig');
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0), return; end
gdata = udata.gdata(udata.selection);
X = udata.linecutParams.X;
if gdata.Geometry == 1
    if (X>=3 && X<=9)
        errordlg('Invalid X variable(s) for transmission geometry.','Manual Linecut Error','modal');
        return;
    end
end
if isempty(gdata.SolidAngleCorrectedData)
    if X<=9
        errordlg('No map exists. Check setup parameters.','Manual Linecut Error','modal');
        return;
    else
        udata.linecutParams.DataFlag = 1;
    end
else
    udata.linecutParams.DataFlag = 2;
end
%try
 %   hwarndlg = warndlg('Please wait while processing linecut ...','Manual Linecut Warning','modal');
    [xdata,ydata,nofpixels,mapdata] = linecut(gdata,udata.linecutParams.X,udata.linecutParams.Constraint,udata.linecutParams.NOfPts,udata.linecutParams.DataFlag);
% catch
%     delete(hwarndlg);
%     errordlg('Invalid linecut.','Manual Linecut Error','modal');
%     return;
% end
%delete(hwarndlg);
udata.linecutResult.ImFileName = gdata.ImFileName;
udata.linecutResult.XVarName = {get_var_name(X)};
udata.linecutResult.XData = xdata;
udata.linecutResult.YData = ydata;
udata.linecutResult.NOfPixels = nofpixels;
udata.linecutResult.MapData = mapdata;
udata.linecutResult.Constraint = udata.linecutParams.Constraint;
set(hFigGIXS,'UserData',udata);
figure_name_str = ['Linecut: ',udata.linecutResult.ImFileName];
figure('Name',figure_name_str,'tag','gixs_data_fig');
linecut_plot(xdata,ydata,udata.linecutParams.X,udata.linecutParams.PlotScale,udata.linecutResult.ImFileName);
end


function var_unit = get_var_unit(v)
ang_str = ['(',char(197),'^{-1})'];
list_unit = {...
    ang_str; '(deg)'; ...
    ang_str;ang_str;ang_str;ang_str;...
    '(deg)';'(deg)';'(deg)';...
    '';'';''};
var_unit = list_unit{v};
end


function var_name = get_var_name(v)
list_name = {...
    'q';'\phi';...
    'q_z';'q_x';'q_y';'q_r';...
    '2\theta';'\alpha_f';'\chi';...
    'x pixel';'y pixel';'pixel distance'};
var_name = list_name{v};
end


function gixs_PushbuttonLinecutConstrainedMaskFcn(~,~)
hFigGIXS = findall(0,'Tag','gixs_fig');
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0), return; end
gdata = udata.gdata(udata.selection);
try
    cmask = gdata.get_cmask(gdata,udata.linecutParams.Constraint);
catch
    errordlg('Invalid constraints.','Constrained Mask Error','modal');
    return;
end
figure_name_str = ['Constrained Mask: ',gdata.ImFileName];
figure('Name',figure_name_str,'tag','gixs_data_fig');
imagesc(cmask,[0,1]); axis image;
xlabel('x pixel');
ylabel('y pixel');
end


function gixs_PushbuttonLinecutConstrainedImageFcn(~,~)
hFigGIXS = findall(0,'Tag','gixs_fig');
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0), return; end
gdata = udata.gdata(udata.selection);
try
    cmask = gdata.get_cmask(gdata,udata.linecutParams.Constraint);
catch
    errordlg('Invalid constraints.','Constrained Mask Error','modal');
    return;
end
% if gdata.PlotScale==1
%     cdata = gdata.MaskedData;
%     cdata(~cmask) = -Inf;
%     clims = gdata.PlotCLims;
% elseif gdata.PlotScale==2
%     cdata = log10(gdata.MaskedData);
%     cdata(~cmask) = -Inf;
%     clims = log10(gdata.PlotCLims);
% end
replot(udata);
figure(gdata.FigHandle);
himg = findall(gdata.FigHandle,'tag',['gixsdata:img:',gdata.ImFileName]);
haxes = get(himg,'parent');
%set(himg,'CData',cdata);
%set(haxes,'CLim',clims);
hold on;
%[~,hPatches] = contour(gdata.Mask,1);
[~,hPatches] = contour(haxes,1:gdata.ImDim(1),1:gdata.ImDim(2),cmask,[1,1],'color','r');
%set(get(hPatches,'Children'),'EdgeColor','r');
set(hPatches,'tag',['gixsdata:contourlines:',gdata.ImFileName]);
end


function gixs_PushbuttonLinecutExportToWoskspaceFcn(~,~)
hFigGIXS = findall(0,'Tag','gixs_fig');
udata = get(hFigGIXS,'UserData');
if isempty(udata.linecutResult.ImFileName), return; end
assignin('base',assignin_base_name_check([udata.linecutResult.ImFileName,'_linecut']),udata.linecutResult);
end


function var_name = assignin_base_name_check(var_name)
%var_name(strfind(var_name,'-')) = '_';
var_name = genvarname(var_name);
end


function gixs_PushbuttonLinecutExportToFileFcn(~,~)
hFigGIXS = findall(0,'Tag','gixs_fig');
udata = get(hFigGIXS,'UserData');
if isempty(udata.linecutResult.ImFileName), return; end
uiputfile_str = {...
    '*.mat','MAT-files (*.mat)';...
    '*.dat','ASCII files (*.dat)';...
    '*.txt','ASCII files (*.txt)'};
[filename,pathname,filterindex] = uiputfile(uiputfile_str,'Export Current Linecut As',[udata.linecutResult.ImFileName,'_linecut']);
if isequal(filename,0), return; end
f = fullfile(pathname,filename);
[~,~,ext] = fileparts(f);
ext_template = uiputfile_str{filterindex,1}(2:end);
if ~strcmpi(ext,ext_template), f = [f,ext_template]; end
switch filterindex
    case 1
        linecutdata = udata.linecutResult;
        save(f,'linecutdata');
    case {2,3}
        linecutdata = [udata.linecutResult.XData,udata.linecutResult.YData];
        save(f,'linecutdata','-ASCII','-double','-TABS');
    otherwise
        return;
end
end


function gixs_PushbuttonLinecutExportToCFTFcn(~,~)
hFigGIXS = findall(0,'Tag','gixs_fig');
udata = get(hFigGIXS,'UserData');
if isempty(udata.linecutResult.ImFileName), return; end
cftool(udata.linecutResult.XData,udata.linecutResult.YData);
end


function gixs_PushbuttonLinecutExportToLineFitFcn(~,~)
hFigGIXS = findall(0,'Tag','gixs_fig');
udata = get(hFigGIXS,'UserData');
if isempty(udata.linecutResult.ImFileName), return; end
linefitgui([udata.linecutResult.XData,udata.linecutResult.YData]);
end


function gixs_PushbuttonReshapeFcn(~,~)
hFigGIXS = findall(0,'Tag','gixs_fig');
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0), return; end
gdata = udata.gdata(udata.selection);
X = udata.reshapeParams.X;
Y = udata.reshapeParams.Y;
if gdata.Geometry == 1
    if (X>=3 && X<=8) || (Y>=3 && Y<=8)
        errordlg('Invalid X and/or Y variable(s) for transmission geometry.','Reshape Error','modal');
        return;
    end
end
if isempty(gdata.SolidAngleCorrectedData)
    if X<9 || Y<9
        errordlg('No map exists. Check setup parameters.','Reshape Error','modal');
        return;
    else
        dataFlag = 1;
    end
else
    dataFlag = 2;
end
try
    hwarndlg = warndlg('Please wait while reshaping ...','Reshape Warning','modal');
    if udata.reshapeParams.Inpaint == 1
        [xdata,ydata,imgdata,countdata,imgdata_inpaint] = reshape_image(gdata,udata.reshapeParams,dataFlag,udata.reshapeParams.InpaintMethod);
    elseif udata.reshapeParams.Inpaint == 2
        [xdata,ydata,imgdata,countdata,imgdata_inpaint] = reshape_image(gdata,udata.reshapeParams,dataFlag);        
    end
catch
    delete(hwarndlg);
    errordlg('Invalid reshape.','Reshape Error','modal');
    return;
end
delete(hwarndlg);
% construct result
udata.reshapeResult.ImFileName = gdata.ImFileName;
udata.reshapeResult.XVarName = get_var_name(udata.reshapeParams.X);
udata.reshapeResult.YVarName = get_var_name(udata.reshapeParams.Y);
udata.reshapeResult.XData = xdata;
udata.reshapeResult.YData = ydata;
udata.reshapeResult.ImData = imgdata;
udata.reshapeResult.ImDataInpaint = imgdata_inpaint;
udata.reshapeResult.CountData = countdata;
udata.reshapeResult.InpaintMethod = udata.reshapeParams.InpaintMethod;
% save
set(hFigGIXS,'UserData',udata);
reshapeplot;
end


function reshapeplot(~,~)
hFigGIXS = findall(0,'Tag','gixs_fig');
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0), return; end
gdata = udata.gdata(udata.selection);
if isempty(udata.reshapeResult.ImData), return; end
imgdata = udata.reshapeResult.ImData;
imgdata_inpaint = udata.reshapeResult.ImDataInpaint;
xdata = udata.reshapeResult.XData;
ydata = udata.reshapeResult.YData;
% construct x y label string
xlabel_str = [...
    get_var_name(udata.reshapeParams.X),' ',get_var_unit(udata.reshapeParams.X)];
ylabel_str = [...
    get_var_name(udata.reshapeParams.Y),' ',get_var_unit(udata.reshapeParams.Y)];
% --- plot nonimpainted image
figure_name_str = ['Reshaped Image: ',udata.reshapeResult.ImFileName];
hf = figure('Name',figure_name_str,'tag','gixs_data_fig');
ha = axes;
imgdata_tmp = imgdata(~isnan(imgdata));
cmap = [min(imgdata_tmp),10*mean(imgdata_tmp)];
if isempty(imgdata_tmp)
    imagesc(xdata,ydata,imgdata);
else
    if gdata.PlotScale == 1
        imagesc(xdata,ydata,imgdata,cmap);
    else
        imagesc(xdata,ydata,log10(imgdata),log10([max(cmap(1),1),cmap(2)]));
    end
end
if udata.reshapeParams.Y ~= 10
    set(gca,'ydir','norm');
end
xlabel(xlabel_str);ylabel(ylabel_str);
set(gca,'tickdir','out','xminortick','on','yminortick','on');
%axis image;
% --- plot inpainted image
if ~isempty(imgdata_inpaint)
    hf_pos = get(hf,'position');
    figure_name_str = ['Reshaped and Inpainted Image: ',udata.reshapeResult.ImFileName];
    hf2 = figure('Name',figure_name_str,'tag','gixs_data_fig','unit','pixel');
    hf2_pos = get(hf2,'position');
    hf2_pos(1) = hf_pos(1)+hf_pos(3)/4; 
    hf2_pos(2) = hf_pos(2)-25;
    set(hf2,'position',hf2_pos);
    ha2 = axes;
    imgdata_tmp = imgdata_inpaint(~isnan(imgdata_inpaint));
    cmap = [min(imgdata_tmp),10*mean(imgdata_tmp)];
    if isempty(imgdata_tmp)
        imagesc(xdata,ydata,imgdata_inpaint);
    else
        if gdata.PlotScale == 1
            imagesc(xdata,ydata,imgdata_inpaint,cmap);
        else
            imagesc(xdata,ydata,log10(imgdata_inpaint),log10([max(cmap(1),1),cmap(2)]));
        end
    end
    if udata.reshapeParams.Y ~= 10
        set(gca,'ydir','norm');
    end
    xlabel(xlabel_str);ylabel(ylabel_str);
    set(gca,'tickdir','out','xminortick','on','yminortick','on');
    linkaxes([ha,ha2],'xy');
end
end


function reshapeplotcount(~,~)
hFigGIXS = findall(0,'Tag','gixs_fig');
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0), return; end
%gdata = udata.gdata(udata.selection);
if isempty(udata.reshapeResult.ImData), return; end;
%imgdata = udata.reshapeResult.ImData;
xdata = udata.reshapeResult.XData;
ydata = udata.reshapeResult.YData;
% construct x y label string
xlabel_str = [...
    get_var_name(udata.reshapeParams.X),' ',get_var_unit(udata.reshapeParams.X)];
ylabel_str = [...
    get_var_name(udata.reshapeParams.Y),' ',get_var_unit(udata.reshapeParams.Y)];
figure_name_str = ['Reshaped Image (Count): ',udata.reshapeResult.ImFileName];
figure('Name',figure_name_str,'tag','gixs_data_fig');
imagesc(xdata,ydata,udata.reshapeResult.CountData);
if udata.reshapeParams.Y ~= 10
    set(gca,'ydir','norm');
end
xlabel(xlabel_str);ylabel(ylabel_str);
set(gca,'tickdir','out','xminortick','on','yminortick','on');
%axis image
end


function gixs_PushbuttonReshapeExportToWorkSpaceFcn(~,~)
hFigGIXS = findall(0,'Tag','gixs_fig');
udata = get(hFigGIXS,'UserData');
if isempty(udata.reshapeResult.ImFileName), return; end
assignin('base',assignin_base_name_check([udata.reshapeResult.ImFileName,'_reshape']),udata.reshapeResult);
end


function gixs_PushbuttonReshapeExporttoFileFcn(~,~)
hFigGIXS = findall(0,'Tag','gixs_fig');
udata = get(hFigGIXS,'UserData');
if isempty(udata.reshapeResult.ImFileName), return; end
uiputfile_str = {...
    '*.tif','TIFF files (*.tif)';...
    '*.mat','MAT-files (*.mat)';};
switch get(gcbo,'tag')
    case 'gixs_PushbuttonReshapeExport'     % export reshaped
        [filename,pathname,filterindex] = uiputfile(uiputfile_str,'Export Current Reshaped Image As',[udata.reshapeResult.ImFileName,'_reshape']);
        imgdata = udata.reshapeResult.ImData;
    case 'gixs_PushbuttonReshapeInpaintExport'  % export inpainted
        if isempty(udata.reshapeResult.ImDataInpaint), return; end
        [filename,pathname,filterindex] = uiputfile(uiputfile_str,'Export Current Reshaped-then-inpainted Image As',[udata.reshapeResult.ImFileName,'_reshape_inpaint']);     
        imgdata = udata.reshapeResult.ImDataInpaint;        
end
if isequal(filename,0), return; end
f = fullfile(pathname,filename);
[~,~,ext] = fileparts(f);
ext_template = uiputfile_str{filterindex,1}(2:end);
if ~strcmpi(ext,ext_template), f = [f,ext_template]; end
switch filterindex
    case 1
        imwrite2tif(imgdata,[],f,'int32');
    case 2
        reshapedata = udata.reshapeResult;
        save(f,'reshapedata');
    otherwise 
        return;
end
end


function updatelinecutFcn(~,~)
hFigGIXS = findall(0,'Tag','gixs_fig');
hFigImana = findall(0,'Tag','gixs_fig_imana');
udata = get(hFigGIXS,'UserData');
% get plot scale
udata.linecutParams.PlotScale = get(findall(hFigImana,'tag','gixs_PopupmenuLinecutScale'),'value');
% convert current figure plot scales
hf = findall(0,'type','figure');
fname = get(hf,'name');
fname_linecut = strfind(fname,'Linecut: ');
fname_ind = [];
if iscell(fname_linecut)
    for ii=1:length(fname_linecut)
        if ~isempty(fname_linecut{ii}), fname_ind = [fname_ind,ii];
        end
    end
    hf = hf(fname_ind);
    if ~isempty(hf)
        linecut_plot_scale(hf,udata.linecutParams.PlotScale);
    end
end
% get figure style
%udata.linecutParams.FigureStyle = get(findall(hFigImana,'tag','gixs_PopupmenuLinecutFigureStyle'),'value');
udata.linecutParams.FigureStyle = 1;
% get listbox value
hListbox = findall(hFigImana,'tag','gixs_ListboxLinecut');
hListboxValue = get(hListbox,'value');
if isempty(hListboxValue)
    set(hListbox,'value',udata.linecutParams.FreeCutX);
else
    udata.linecutParams.FreeCutX = hListboxValue;
end
% get free cut pixels
hEditLinecutPixels = findall(hFigImana,'tag','gixs_EditLinecutPixels');
pixels = round(str2num(get(hEditLinecutPixels,'string')));
if ~isempty(pixels) && size(pixels,2) == 2 && size(pixels,1) >= 2 && sum(pixels(:)<1)==0
    udata.linecutParams.FreeCutPixels = pixels;
end
set(hEditLinecutPixels,'string',mat2str(udata.linecutParams.FreeCutPixels));

% get X
udata.linecutParams.X = get(findall(hFigImana,'tag','gixs_PopupmenuLinecutX'),'value');
% get # of pts
hNOfPts = findall(hFigImana,'tag','gixs_EditLinecutNOfPts');
NOfPts = round(str2double(get(hNOfPts,'string')));
if ~isnan(NOfPts) && NOfPts>=1
    udata.linecutParams.NOfPts = NOfPts;
    set(hNOfPts,'string',num2str(NOfPts));
else
    set(hNOfPts,'string',num2str(udata.linecutParams.NOfPts));
end
% get constraints #1-#4
for ii=1:4
    hop = findall(hFigImana,'tag',['gixs_PopupmenuLinecutConstraintOperator',num2str(ii)]);
    udata.linecutParams.Constraint(ii,1) = get(hop,'value');
    udata.linecutParams.Constraint(ii,2) = get(findall(hFigImana,'tag',['gixs_PopupmenuLinecutConstraint',num2str(ii)]),'value');
    hlower = findall(hFigImana,'tag',['gixs_EditLinecutConstraintLower',num2str(ii)]);
    hupper = findall(hFigImana,'tag',['gixs_EditLinecutConstraintUpper',num2str(ii)]);
    if udata.linecutParams.Constraint(ii,2) == 12
        udata.linecutParams.Constraint(ii,1) = 1;
        udata.linecutParams.Constraint(ii,3) = NaN;
        udata.linecutParams.Constraint(ii,4) = NaN;
        set(hop,'value',1);
        set(hlower,'string','NaN');
        set(hupper,'string','NaN');
    else
        clower = str2double(get(hlower,'string'));
        cupper = str2double(get(hupper,'string'));
        udata.linecutParams.Constraint(ii,3) = clower;
        udata.linecutParams.Constraint(ii,4) = cupper;
        set(hlower,'string',num2str(clower));
        set(hupper,'string',num2str(cupper));
    end
end
set(hFigGIXS,'UserData',udata);
end


function gixs_PushbuttonLinecutFreeFcn(~,~)
hFigGIXS = findall(0,'Tag','gixs_fig');
hFigImana = findall(0,'Tag','gixs_fig_imana');
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0), return; end
gdata = udata.gdata(udata.selection);
X = udata.linecutParams.FreeCutX;
if gdata.Geometry == 1
    if ~isempty(find(X>=3 & X<=9, 1))
        errordlg('Invalid X variable(s) for transmission geometry.','Free Linecut Error','modal');
        return;
    end
end
if isempty(gdata.SolidAngleCorrectedData)
    if ~isempty(find(X<10,1))
        errordlg('No map exists. Check setup parameters.','Free Linecut Error','modal');
        return;
    else
        udata.linecutParams.DataFlag = 1;
    end
else
    udata.linecutParams.DataFlag = 2;
    %udata.linecutParams.DataFlag = gdata.PlotImageFlag;
end
replot(udata);
figure(gdata.FigHandle);
try
    [x,y]=gu_getline(gdata.FigHandle);
catch
    remove_dummy_axis;
    return;
end
if length(x)<2 || length(y)<2
    errordlg('Need at least two different points.','Free Linecut Error','modal');
    return;
end
himg = findall(gdata.FigHandle,'tag',['gixsdata:img:',gdata.ImFileName]);
haxes = get(himg,'parent');
cxlim = get(haxes,'xlim');
cylim = get(haxes,'ylim');
if sum(x>cxlim(2) | x<cxlim(1) | y>cylim(2) | y<cylim(1)) ~=0
    errordlg('Selected point(s) is(are) out of the image range.','Free Linecut Error','modal');
    return;
end
line(x,y,...
    'tag',['gixsdata:beam0speclabel:',gdata.ImFileName],...
    'Parent',haxes,...
    'Marker','x','Markersize',10,'linestyle','-','linewidth',1.5,'color','r');
xdata = get(himg,'xdata');
ydata = get(himg,'ydata');
n = round(gu_axes2pix(gdata.ImDim(1),xdata,x));
m = round(gu_axes2pix(gdata.ImDim(2),ydata,y));
% update H and V pixels list on GUI
udata.linecutParams.FreeCutPixels = [n,m];
set(findall(hFigImana,'tag','gixs_EditLinecutPixels'),'String',mat2str(udata.linecutParams.FreeCutPixels));
set(hFigGIXS,'UserData',udata);
freecutReduceData;
end


function freecutReduceData
hFigGIXS = findall(0,'Tag','gixs_fig');
hFigImana = findall(0,'Tag','gixs_fig_imana');
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0), return; end
gdata = udata.gdata(udata.selection);
pixels = udata.linecutParams.FreeCutPixels;
X = udata.linecutParams.FreeCutX;
n = pixels(:,1);
m = pixels(:,2);
% check validity of pixels
if sum(n>gdata.ImDim(1) | m>gdata.ImDim(2) | n<1 | m<1) ~=0
    errordlg('Selected point(s) is(are) out of the image range.','Free Linecut Error','modal');
    return;
end
% extract linecut data
if udata.linecutParams.DataFlag == 1
    imdata = gdata.MaskedData;
elseif udata.linecutParams.DataFlag == 2
    imdata = gdata.SolidAngleCorrectedData;
    imdata(~gdata.Mask) = NaN;
end
[cx,cy,c] = gu_improfile(imdata,n,m,'nearest');
cx = round(cx(:));
cy = round(cy(:));
ind = sub2ind(fliplr(gdata.ImDim),cy,cx);
udata.linecutResult.ImFileName = '';
udata.linecutResult.XVarName = {};
udata.linecutResult.XData = [];
udata.linecutResult.YData = [];
udata.linecutResult.Constraint = [];
XVarName = cell(1,length(X));
XData = NaN*ones(length(cx),length(X));
YData = c(:);
for ii=1:length(X)
    XVarName{ii} = get_var_name(X(ii));
    switch X(ii)
        case 1
            XData(:,ii) = gdata.QMap(ind);
        case 2
            XData(:,ii) = gdata.PhiMap(ind);
        case 3
            XData(:,ii) = gdata.QzMap(ind);
        case 4
            XData(:,ii) = gdata.QxMap(ind);
        case 5
            XData(:,ii) = gdata.QyMap(ind);
        case 6
            XData(:,ii) = gdata.QrMap(ind);
        case 7
            XData(:,ii) = gdata.TwoThetaMap(ind);
        case 8
            XData(:,ii) = gdata.AlphafMap(ind);
        case 9
            XData(:,ii) = gdata.ChiMap(ind);
        case 10
            XData(:,ii) = cx;
        case 11
            XData(:,ii) = cy;
        case 12
            XData(:,ii) = (1:length(c))';
    end
end
udata.linecutResult.XData = double(XData);
udata.linecutResult.YData = YData;
udata.linecutResult.XVarName = XVarName;
udata.linecutResult.ImFileName = gdata.ImFileName;
set(hFigGIXS,'UserData',udata);
% --- plot section
if udata.linecutParams.FigureStyle == 1
    figure_name_str = ['Linecut: ',udata.linecutResult.ImFileName];
    figure('Name',figure_name_str,'tag','gixs_data_fig');
    for ii=1:length(X)
        switch length(X)
            case 2
                subplot(2,1,ii);
            case 3
                subplot(3,1,ii);
            case 4
                subplot(2,2,ii);
            case {5,6}
                subplot(3,2,ii);
            case {7,8,9}
                subplot(3,3,ii);
            case {10,11,12}
                subplot(3,4,ii);
        end
        linecut_plot(XData(:,ii),YData,X(ii),udata.linecutParams.PlotScale,udata.linecutResult.ImFileName);
    end
    % elseif udata.linecutParams.FigureStyle == 2
    %     for ii=1:length(X)
    %         figure_name_str = ['Linecut: ',udata.linecutResult.ImFileName,': ',XVarName{ii}];
    %         figure('Name',figure_name_str,'tag','gixs_data_fig');
    %         linecut_plot(XData(:,ii),YData,X(ii),udata.linecutParams.PlotScale,udata.linecutResult.ImFileName);
    %     end
end
end


function gixs_PushbuttonLinecutFreeDefinedCutFcn(~,~)
freecutReduceData;
end


function gixs_PushbuttonLinecutOverlayFcn(~,~)
hFigGIXS = findall(0,'Tag','gixs_fig');
hFigImana = findall(0,'Tag','gixs_fig_imana');
udata = get(hFigGIXS,'UserData');
XData = udata.linecutResult.XData;
YData = udata.linecutResult.YData;
if isempty(XData) || isempty(YData)
    return;
end
% get overlay figure number
hEditLinecutOverlay = findall(hFigImana,'tag','gixs_EditLinecutOverlayFigureNumber');
fig_num = str2num(get(hEditLinecutOverlay,'string'));
%fig_nums = findall(0,'type','figure');
if isempty(fig_num) || length(fig_num) ~= 1 % || isempty(find(fig_num(1)==fig_nums,1))
    errordlg('Invalid figure number.','Linecut Overlay Error','modal');
    return;
    % elseif ~isempty(find(fig_num(1)==fig_nums,1))
    %     figure(fig_num);
else
    hfig = figure(fig_num);
    figure_name_str = ['Linecut: ',udata.linecutResult.ImFileName];
    set(hfig,'Name',figure_name_str,'tag','gixs_data_fig');
end
% get scale factor
hEditLinecutOverlayScale = findall(hFigImana,'tag','gixs_EditLinecutOverlayScale');
scalefactor = str2num(get(hEditLinecutOverlayScale,'String'));
%scalefactor = eval(get(hEditLinecutOverlayScale,'String'))
if isempty(scalefactor)
    errordlg('Invalid multiplication factor.','Linecut Overlay Error','modal');
    return;
else
    YData = YData*scalefactor;
end    
% creat line colors
custommap = flipud(jet);
if isempty(udata.linecutResult.Constraint)
    X = udata.linecutParams.FreeCutX;
    for ii=1:length(X)
        switch length(X)
            case 2
                subplot(2,1,ii);
            case 3
                subplot(3,1,ii);
            case 4
                subplot(2,2,ii);
            case {5,6}
                subplot(3,2,ii);
            case {7,8,9}
                subplot(3,3,ii);
            case {10,11,12}
                subplot(3,4,ii);
        end
        hold on;
        linecut_plot(XData(:,ii),YData,X(ii),udata.linecutParams.PlotScale,udata.linecutResult.ImFileName);
        hold off;
        cmapline('colormap',custommap);
        %        set(gca,'color','w');
        if ii == 1
            legend off; legend show;
        end
    end
else
    hold on;
    linecut_plot(XData,YData,udata.linecutParams.X,udata.linecutParams.PlotScale,udata.linecutResult.ImFileName);
    hold off;
    legend off;legend show;
    cmapline('colormap',custommap);
    %   set(gca,'color','k');
end
end


function updatereshapeFcn(~,~)
hFigGIXS = findall(0,'Tag','gixs_fig');
hFigImana = findall(0,'Tag','gixs_fig_imana');
udata = get(hFigGIXS,'UserData');
udata.reshapeParams.X = get(findall(hFigImana,'tag','gixs_PopupmenuReshapeX'),'value');
% get # of pts
hXNOfPts = findall(hFigImana,'tag','gixs_EditReshapeXNOfPts');
XNOfPts = round(str2double(get(hXNOfPts,'string')));
if ~isnan(XNOfPts) && XNOfPts>1
    udata.reshapeParams.XNOfPts = XNOfPts;
    set(hXNOfPts,'string',num2str(XNOfPts));
else
    set(hXNOfPts,'string',num2str(udata.reshapeParams.XNOfPts));
end
hYNOfPts = findall(hFigImana,'tag','gixs_EditReshapeYNOfPts');
YNOfPts = round(str2double(get(hYNOfPts,'string')));
if ~isnan(YNOfPts) && YNOfPts>1
    udata.reshapeParams.YNOfPts = YNOfPts;
    set(hYNOfPts,'string',num2str(YNOfPts));
else
    set(hYNOfPts,'string',num2str(udata.reshapeParams.YNOfPts));
end
% get x y
udata.reshapeParams.X = get(findall(hFigImana,'tag','gixs_PopupmenuReshapeX'),'value');
udata.reshapeParams.Y = get(findall(hFigImana,'tag','gixs_PopupmenuReshapeY'),'value');
udata.reshapeParams.XRange = sort([...
    str2double(get(findall(hFigImana,'tag','gixs_EditReshapeXLower'),'string')),...
    str2double(get(findall(hFigImana,'tag','gixs_EditReshapeXUpper'),'string'))]);
udata.reshapeParams.YRange = sort([...
    str2double(get(findall(hFigImana,'tag','gixs_EditReshapeYLower'),'string')),...
    str2double(get(findall(hFigImana,'tag','gixs_EditReshapeYUpper'),'string'))]);
% get inpaint
udata.reshapeParams.Inpaint = get(findall(hFigImana,'tag','gixs_PopupmenuReshapeInpaint'),'value');
hPopupmenuReshapeInpaintMethod = findall(hFigImana,'tag','gixs_PopupmenuReshapeInpaintMethod');
if udata.reshapeParams.Inpaint == 2
    set(hPopupmenuReshapeInpaintMethod,'Enable','off');
elseif udata.reshapeParams.Inpaint == 1
    set(hPopupmenuReshapeInpaintMethod,'Enable','on');
end
udata.reshapeParams.InpaintMethod = get(hPopupmenuReshapeInpaintMethod,'value')-1;
% save udata
set(hFigGIXS,'UserData',udata);
end


function gixs_PushbuttonPeakFinderROIFcn(~,~)
hFigGIXS = findall(0,'Tag','gixs_fig');
hFigImana = findall(0,'Tag','gixs_fig_imana');
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0), return; end
gdata = udata.gdata(udata.selection);
if isempty(gdata.SolidAngleCorrectedData), return; end
replot(udata);
figure(gdata.FigHandle);
try
    [x,y]=gu_getline(gdata.FigHandle);
catch
    remove_dummy_axis;
    return;
end
x = round(x'); y = round(y');
xpoly = [x, x(1)]; ypoly = [y,y(1)];
cxlim = get(gca,'xlim');
cylim = get(gca,'ylim');
if length(x)<3 || length(y)<3 || polyarea(x,y)==0 || sum(x>cxlim(2) | x<cxlim(1) | y>cylim(2) | y<cylim(1)) ~=0
    errordlg('Invlaid polygon.','Select ROI Error','modal');
    return;
end
line(xpoly,ypoly,...
    'tag',['gixsdata:roilabel:',gdata.ImFileName],...
    'Parent',get(findall(gdata.FigHandle,'tag',['gixsdata:img:',gdata.ImFileName]),'parent'),...
    'linewidth',1,'color','r');
% start finding peak
vertex =  [x',y'];
model = get(findall(hFigImana,'tag','gixs_PopupmenuPeakFinderModel'),'value');
[peak,fresult,vertex]= findpeak(gdata,vertex,2,model,[],[]);
% save data
peakFinder.peak = peak;
peakFinder.fresult = fresult;
peakFinder.vertex = vertex;
udata.peakFinder = [udata.peakFinder,peakFinder];
set(hFigGIXS,'UserData',udata);
% update GUI
hTable = findall(hFigImana,'tag','gixs_TablePeakFinder');
data = get(hTable,'Data');
newdata = {false,fresult.model,peak.X,peak.Y,...
    peak.Q,peak.Phi,peak.Qz,peak.Qx,peak.Qy,peak.Qr,...
    peak.TwoTheta,peak.Alphaf};
data = [data;newdata];
set(hTable,'Data',data);
if size(data,1) > 9
    set(hTable,'RowName',{1:size(data,1)});
end
hEdit = findall(hFigImana,'tag','gixs_EditPeakFinderMsg');
oldmsg = get(hEdit,'String');
if model == 1
    addmsg = {['Model: ',fresult.model,' (center of mass)'];...
        ['   X0 = ',num2str(peak.X),'   Y0 = ',num2str(peak.Y)]};
elseif model == 2
    addmsg = {['Model: ',fresult.model,' (bivariate normal distribution)'];...
        ['Fitting exitflag is ',num2str(fresult.exitflag),'; fitting result is: '];...
        ['   A = ',num2str(fresult.par(1)),...
        ',   Cx = ',num2str(fresult.par(2)),...
        ',   Cy = ',num2str(fresult.par(3)),...
        ',   C = ',num2str(fresult.par(4)),','];...
        ['   Rho = ',num2str(fresult.par(5)),...
        ',   Sigma_x = ',num2str(fresult.par(6)),...
        ',   Sigma_y = ',num2str(fresult.par(7))];...
        ['   X0 = ',num2str(fresult.par(8)),'   Y0 = ',num2str(fresult.par(9))];...
        };    
end
newmsg = [addmsg;' ';oldmsg];
set(hEdit,'string',newmsg);
% plot 
figure(gdata.FigHandle);
line(peak.X,peak.Y,...
    'tag',['gixsdata:roilabel:',gdata.ImFileName],...
    'Parent',get(findall(gdata.FigHandle,'tag',['gixsdata:img:',gdata.ImFileName]),'parent'),...
    'Marker','x','Markersize',10,'linewidth',1.5,'color','w');
if model == 2
    hold on;
    [C,h] = contour(fresult.xdatarec,fresult.ydatarec,fresult.fvalrec);
    hold off;
    set(h,'tag',['gixsdata:contourlines:',gdata.ImFileName],'DisplayName','Peak Contours');
    clabel(C,h);
    showpeak3D(fresult,size(data,1));
end
end


function showpeak3D(fresult,rownum)
markersize = 4;
figure_name_str = ['Peak Finder: ',fresult.imfilename,': Peak #',num2str(rownum)];
h = figure('Name',figure_name_str,'tag','gixs_data_fig');
plot3(fresult.xdata,fresult.ydata,fresult.data,'o','markerfacecolor','b','markeredgecolor','w','markersize',markersize,'displayname','data');
hold on;
surf(fresult.xdatarec,fresult.ydatarec,double(fresult.fvalrec),'displayname','fitting');
bk = fresult.par(2)*fresult.xdatarec + fresult.par(3)*fresult.ydatarec + fresult.par(4);
bk = double(bk);
mesh(fresult.xdatarec,fresult.ydatarec,bk,'displayname','background');
hidden off;
cameratoolbar(h);
shading flat;
lighting flat;
plot3(fresult.xdata,fresult.ydata,fresult.data-fresult.fval,'o','markerfacecolor','r','markeredgecolor','w','markersize',markersize,'displayname','residual');
hold off; grid on; box on; legend('show');
xlabel('x pixel');
ylabel('y pixel');
zlabel('intensity');
end


function gixs_PushbuttonPeakFinderResetFcn(~,~)
hFigGIXS = findall(0,'Tag','gixs_fig');
hFigImana = findall(0,'Tag','gixs_fig_imana');
udata = get(hFigGIXS,'UserData');
udata.peakFinder = {};
set(hFigGIXS,'UserData',udata);
set(findall(hFigImana,'tag','gixs_PopupmenuPeakFinderModel'),'value',2);
hTable = findall(hFigImana,'tag','gixs_TablePeakFinder');
set(hTable,'Data',[],'rowName',{1:9});
hEdit = findall(hFigImana,'tag','gixs_EditPeakFinderMsg');
set(hEdit,'string',{' '});
end


function gixs_PushbuttonPeakFinderDeleteFcn(~,~)
hFigGIXS = findall(0,'Tag','gixs_fig');
hFigImana = findall(0,'Tag','gixs_fig_imana');
udata = get(hFigGIXS,'UserData');
hTable = findall(hFigImana,'tag','gixs_TablePeakFinder');
data = get(hTable,'data');
if isempty(data), return; end
rowstoberemoved = cell2mat(data(:,1));
udata.peakFinder(rowstoberemoved)=[];
set(hFigGIXS,'UserData',udata);
data(rowstoberemoved,:) = [];  
set(hTable,'Data',data);
if size(data,1) > 9
    set(hTable,'rowName',{1:size(data,1)});
else
    set(hTable,'rowName',{1:9});
end
end


function gixs_PushbuttonPeakFinderShow3DFcn(~,~)
hFigGIXS = findall(0,'Tag','gixs_fig');
hFigImana = findall(0,'Tag','gixs_fig_imana');
udata = get(hFigGIXS,'UserData');
hTable = findall(hFigImana,'tag','gixs_TablePeakFinder');
data = get(hTable,'data');
if isempty(data), return; end
selected_rows = find(cell2mat(data(:,1)));
if isempty(selected_rows), return; end
for ii=1:length(selected_rows)
    rownum = selected_rows(ii);
    if strcmpi(udata.peakFinder{rownum}.fresult.model,'bvnd')
        showpeak3D(udata.peakFinder{rownum}.fresult,rownum);
    end
end
end


function gixs_PushbuttonPeakFinderExportFcn(~,~)
hFigGIXS = findall(0,'Tag','gixs_fig');
hFigImana = findall(0,'Tag','gixs_fig_imana');
udata = get(hFigGIXS,'UserData');
hTable = findall(hFigImana,'tag','gixs_TablePeakFinder');
data = get(hTable,'data');
if isempty(data), return; end
uiputfile_str = {...
    '*.mat','MAT-files (*.mat)';...
    '*.dat','ASCII files (*.dat)';...
    '*.txt','ASCII files (*.txt)'};
[filename,pathname,filterindex] = uiputfile(uiputfile_str,'Export Peaks As',[udata.peakFinder{1}.fresult.imfilename,'_peaks']);
if isequal(filename,0), return; end
f = fullfile(pathname,filename);
[~,~,ext] = fileparts(f);
ext_template = uiputfile_str{filterindex,1}(2:end);
if ~strcmpi(ext,ext_template), f = [f,ext_template]; end
switch filterindex
    case 1
        peakdata = udata.peakFinder;
        save(f,'peakdata');
    case {2,3}
        peakdata = data(:,3:end);
        for ii=1:size(peakdata,1)
            peakdata_ii = cell2mat(peakdata(ii,:));
            save(f,'peakdata_ii','-ASCII','-double','-TABS','-Append');
        end
    otherwise
        return;
end
end


function iMon = check_figure_monitor(figurePos,monitorPos) % determine figure monitor
figureCenterPosX = figurePos(1)+figurePos(3)/2;
iMon = 1;
for ii=1:size(monitorPos,1)
    if  figureCenterPosX >= monitorPos(ii,1) && ...
            figureCenterPosX <= (monitorPos(ii,1)+monitorPos(ii,3))
        iMon = ii;
        break;
    end
end
end


function updatediffractionFcn(~,~)
hFigGIXS = findall(0,'Tag','gixs_fig');
hFigImana = findall(0,'Tag','gixs_fig_imana');
udata = get(hFigGIXS,'UserData');
% lattice
lattice = udata.diffractionPos.Lattice;
for ii=1:6
    hEdit = findall(hFigImana,'tag',['gixs_EditDiffPos',num2str(ii)]);
    a = str2num(get(hEdit,'string'));
    if isempty(a) || numel(a)~=1 || isnan(a)
        set(hEdit,'string',num2str(lattice(ii),'%g'));
    else
        lattice(ii) = a;
    end
end
udata.diffractionPos.Lattice = lattice;
% reflection condition
hPopupmenu = findall(hFigImana,'tag','gixs_PopupmenuDiffPosSpaceGroup');
hEdit = findall(hFigImana,'tag','gixs_EditDiffPosUVW');
if strcmpi(get(hPopupmenu,'Enable'),'on')
    udata.diffractionPos.SGUVW = get(hPopupmenu,'value');
else
    editcell = get(hEdit,'string');
    try
        uvw = cell2mat(cellfun(@(x)str2num(x),editcell,'UniformOutput',0));
    catch
        uvw = [];
    end
    if isempty(uvw) || nnz(isnan(uvw))~=0 || size(uvw,2) ~= 3 || size(uvw,1)~=size(editcell,1)
        set(hEdit,'String',cellstr(num2str(udata.diffractionPos.SGUVW,'[%g,%g,%g]')));
    else
       udata.diffractionPos.SGUVW = uvw; 
    end
end
% orientation
udata.diffractionPos.OrientationMethod = get(...
    findall(hFigImana,'tag','gixs_PopupmenuDiffPosOrientationMethod'),'value');
hEditOrientation = findall(hFigImana,'tag','gixs_EditDiffPosOrientation');
orientation = str2num(get(hEditOrientation,'string'));
if isempty(orientation) || nnz(isnan(orientation))~=0 || numel(orientation)~=3
    orientation = udata.diffractionPos.Orientation;
else
    udata.diffractionPos.Orientation = orientation(:)';
end
set(hEditOrientation,'string',num2str(orientation,'[%g,%g,%g]'));
% miller index
hkl_list = {'H','K','L'};
for ii=1:3
    hEdit = findall(hFigImana,'tag',['gixs_EditDiffPosMiller',num2str(ii)]);
    hkl = str2num(get(hEdit,'string'));
    if isempty(hkl) || nnz(isnan(hkl))~=0 || ~isequal(floor(hkl),hkl)
        hkl = udata.diffractionPos.Miller.(hkl_list{ii});
        set(hEdit,'string',num2str(hkl,[repmat('%g,',[1,length(hkl)-1]),'%g']));
    else
        udata.diffractionPos.Miller.(hkl_list{ii}) = unique(hkl(:)');
    end
end
% refractive index
hEdit = findall(hFigImana,'tag','gixs_EditDiffPosAlphaC');
alphac = str2num(get(hEdit,'string'));
if isempty(alphac) || numel(alphac)~=1 || isnan(alphac) || alphac<=0 || alphac>=90
    set(hEdit,'string',num2str(udata.diffractionPos.AlphaC,'%g'));
else
    udata.diffractionPos.AlphaC = alphac;
end
hEdit = findall(hFigImana,'tag','gixs_EditDiffPosMu');
mu = str2num(get(hEdit,'string'));
if isempty(mu) || numel(mu)~=1 || isnan(mu) || mu<0 
    set(hEdit,'string',num2str(udata.diffractionPos.Mu,'%g'));
else
    udata.diffractionPos.Mu = mu;
end
% Q deadband
hEdit = findall(hFigImana,'tag','gixs_EditDiffPosQDeadband');
qdeadband = str2num(get(hEdit,'string'));
if isempty(qdeadband) || numel(qdeadband)~=1 || isnan(qdeadband) || qdeadband<0
    set(hEdit,'string',num2str(udata.diffractionPos.QDeadband,'%e'));
else
    udata.diffractionPos.QDeadband = qdeadband;
end
% Q cutoff
hEdit = findall(hFigImana,'tag','gixs_EditDiffPosQCutoff');
qcutoff = str2num(get(hEdit,'string'));
if isempty(qcutoff) || numel(qcutoff)~=1 || isnan(qcutoff) || qcutoff<0
    set(hEdit,'string',num2str(udata.diffractionPos.QCutoff,'%e'));
else
    udata.diffractionPos.QCutoff = qcutoff;
end
set(hFigGIXS,'UserData',udata);
end


function gixs_RadioDiffPosSelcbk(source,eventdata)
hFigImana = findall(0,'Tag','gixs_fig_imana');
hPopupmenu = findall(hFigImana,'tag','gixs_PopupmenuDiffPosSpaceGroup');
hEdit = findall(hFigImana,'tag','gixs_EditDiffPosUVW');
if strcmpi(get(eventdata.NewValue,'tag'),'gixs_RadioDiffPos1')
    set(hPopupmenu,'Enable','on');
    set(hEdit,'Enable','off');
else
    set(hPopupmenu,'Enable','off');
    set(hEdit,'Enable','on');
end
updatediffractionFcn;
end


function gixs_PushbuttonDiffPosCalculate(~,~)
if ~license('test','Optimization_Toolbox')
	errordlg('Require fsolve function in the Optimization Toolbox. Please install the toolbox before usage.','Toolbox Error','modal');
    return;    
end
hFigGIXS = findall(0,'Tag','gixs_fig');
hFigImana = findall(0,'Tag','gixs_fig_imana');
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0)
    p = udata.paramsDefault;
else
    p = udata.gdata(udata.selection);
end
if  isnan(p.IncidentAngle) ||  p.Geometry~=2 || isnan(p.XEnergy)
	errordlg('Invalid geometry, incident angle, or energy.','Calculation Error','modal');
    return;
end
lattice = udata.diffractionPos.Lattice;
sguvw = udata.diffractionPos.SGUVW;
orientation = udata.diffractionPos.Orientation;
orientationmethod = udata.diffractionPos.OrientationMethod;
hlist = udata.diffractionPos.Miller.H;
klist = udata.diffractionPos.Miller.K;
llist = udata.diffractionPos.Miller.L;
k0 = 2*pi/p.XWavelength;
alpha_i = p.IncidentAngle;
alpha_c = udata.diffractionPos.AlphaC;
mu = udata.diffractionPos.Mu;
nfilm = 1-(alpha_c*pi/180)^2/2+1i*mu/1e8/(2*k0);
qcutoff = udata.diffractionPos.QCutoff;
qdeadband = 1e-8;
try
    hwarndlg = warndlg('Please wait while calculating diffraction positions ...','Calculation Warning','modal');
    r = gixsdiffpos(lattice,sguvw,orientation,orientationmethod,hlist,klist,llist,k0,alpha_i,nfilm,qdeadband,qcutoff);
catch
    delete(hwarndlg);
    errordlg('Calcuation failed.','Calculation Error','modal');
    return;
end
delete(hwarndlg);
udata.diffractionPos.result = r;
set(hFigGIXS,'UserData',udata);
% --- display on result on table
hTable = findall(hFigImana,'tag','gixs_TableDiffPos');
if isempty(r)
    nOfPos = 0;
    tdata = [];
else
    nOfPos = length(r.miller);
    tdata = cell(nOfPos,17);
    % construct hkl list
    hlist = cell(nOfPos,1);
    klist = cell(nOfPos,1);
    llist = cell(nOfPos,1);
    m = cellfun(@transpose,r.miller,'UniformOutput',0);
    for ii=1:nOfPos
        nhkl = size(m{ii},2);
        hlist{ii} = num2str(m{ii}(1,:),[repmat('%g|',[1,nhkl-1]),'%g']);
        klist{ii} = num2str(m{ii}(2,:),[repmat('%g|',[1,nhkl-1]),'%g']);
        llist{ii} = num2str(m{ii}(3,:),[repmat('%g|',[1,nhkl-1]),'%g']);
    end
    tdata(:,:) = [num2cell(true(nOfPos,1)),hlist,klist,llist,...
        num2cell([r.angle_t, r.angle_r, r.q_dwba_t, r.q_dwba_r,r.q_ba])];
end
if nOfPos > 10
    set(hTable,'RowName',{1:nOfPos});
elseif nOfPos<=10
	set(hTable,'RowName',{1:10});
end
set(hTable,'Data',tdata);
end


function gixs_PushbuttonDiffPosSelectDeselectAllFcn(~,~)
hFigGIXS = findall(0,'Tag','gixs_fig');
hFigImana = findall(0,'Tag','gixs_fig_imana');
udata = get(hFigGIXS,'UserData');
r = udata.diffractionPos.result;
if isempty(r), return; end
hTable = findall(hFigImana,'tag','gixs_TableDiffPos');
tdata = get(hTable,'Data');
if strcmpi(get(gcbo,'Tag'),'gixs_PushbuttonDiffPosSelectAll')
    tdata(:,1) = {true};
elseif strcmpi(get(gcbo,'Tag'),'gixs_PushbuttonDiffPosDeselectAll')
    tdata(:,1) = {false};
else
    return;
end
set(hTable,'Data',tdata);
end


function gixs_PushbuttonDiffPosExportFcn(~,~)
hFigGIXS = findall(0,'Tag','gixs_fig');
hFigImana = findall(0,'Tag','gixs_fig_imana');
udata = get(hFigGIXS,'UserData');
r = udata.diffractionPos.result;
if isempty(r), return; end
hTable = findall(hFigImana,'tag','gixs_TableDiffPos');
tdata = get(hTable,'Data');
idx = cell2mat(tdata(:,1));
if nnz(idx) == 0, return; end
r.miller(~idx) = [];
r.angle_t(~idx,:) = [];
r.angle_r(~idx,:) = [];
r.q_dwba_t(~idx,:) = [];
r.q_dwba_r(~idx,:) = [];
r.q_ba(~idx,:) = [];
if isequal(udata.selection,0)
    name = 'diffractionpos';
else
    gdata = udata.gdata(udata.selection);
    name = assignin_base_name_check([gdata.ImFileName,'_diffractionpos']);
end
if strcmpi(get(gcbo,'Tag'),'gixs_PushbuttonDiffPosCopy2WS')
    assignin('base',name,r);
elseif strcmpi(get(gcbo,'Tag'),'gixs_PushbuttonDiffPosExport')
    uiputfile_str = {'*.mat','MAT-files (*.mat)'};
    [filename,pathname,filterindex] = uiputfile(uiputfile_str,'Export Diffraction Positions As',name);
    if isequal(filename,0), return; end
    f = fullfile(pathname,filename);
    [~,~,ext] = fileparts(f);
    ext_template = uiputfile_str{filterindex,1}(2:end);
    if ~strcmpi(ext,ext_template), f = [f,ext_template]; end
    switch filterindex
        case 1
            diffractionPos = r;
            save(f,'diffractionPos');
        otherwise
            return;
    end
else
    return;
end
end


function gixs_CheckboxDiffPosLabelHKLFcn(~,~)
hFigImana = findall(0,'Tag','gixs_fig_imana');
hCheckbox = findall(hFigImana,'tag','gixs_CheckboxDiffPosLabelHKL');
checked = get(hCheckbox,'value');
hPopupmenus = [...
    findall(hFigImana,'tag','gixs_PopupmenuDiffPosLabelHKLSingleton'),...
    findall(hFigImana,'tag','gixs_PopupmenuDiffPosLabelHKLBeam'),...
    findall(hFigImana,'tag','gixs_PopupmenuDiffPosLabelHKLFigSide')];
if checked
    set(hPopupmenus,'Enable','on');
else
    set(hPopupmenus,'Enable','off');
end
end


function gixs_PushbuttonDiffPosPlotFcn(~,~)
hFigGIXS = findall(0,'Tag','gixs_fig');
hFigImana = findall(0,'Tag','gixs_fig_imana');
udata = get(hFigGIXS,'UserData');
r = udata.diffractionPos.result;
if isempty(r), return; end
hTable = findall(hFigImana,'tag','gixs_TableDiffPos');
tdata = get(hTable,'Data');
idx = cell2mat(tdata(:,1));
if nnz(idx) == 0, return; end
r.miller(~idx) = [];
r.angle_t(~idx,:) = [];
r.angle_r(~idx,:) = [];
r.angle_ba(~idx,:) = [];
r.q_dwba_t(~idx,:) = [];
r.q_dwba_r(~idx,:) = [];
r.q_ba(~idx,:) = [];
if strcmpi(get(gcbo,'tag'),'gixs_PushbuttonDiffPosPlotInAngle')
    plotflagstr = 'Angle';   % plot in angle
else
    plotflagstr = 'Q';    % plot in q
end
% get names
if isequal(udata.selection,0)
    figure_name_str = ['Diffraction Positions (',plotflagstr,')'];
else
    gdata = udata.gdata(udata.selection);
    figure_name_str = ['Diffraction Positions (',plotflagstr,'): ',gdata.ImFileName];
end
% plot 
linewidth = 1;
markersize = 6;
figure('Name',figure_name_str,'tag','gixs_data_fig');
hold on;
if strcmpi(plotflagstr,'angle')
    plot([-r.angle_r(:,1);r.angle_r(:,1)],[r.angle_r(:,2);r.angle_r(:,2)],'ks','markersize',markersize,'linewidth',linewidth);
    plot([-r.angle_t(:,1);r.angle_t(:,1)],[r.angle_t(:,2);r.angle_t(:,2)],'ro','markersize',markersize,'linewidth',linewidth);
    plot([-r.angle_ba(:,1);r.angle_ba(:,1)],[r.angle_ba(:,2);r.angle_ba(:,2)],'g^','markersize',markersize,'linewidth',linewidth);    
    legend('Relfected','Transmitted','Born');
    xlabel('2\Theta (deg)');
    ylabel('\alpha_f (deg)');
else
    q_dwba_r_xy = sqrt(sum(r.q_dwba_r(:,1:2).^2,2));
    q_dwba_t_xy = sqrt(sum(r.q_dwba_t(:,1:2).^2,2));
    q_ba_xy = sqrt(sum(r.q_ba(:,1:2).^2,2));
    plot([-q_dwba_r_xy;q_dwba_r_xy],[r.q_dwba_r(:,3);r.q_dwba_r(:,3)],'ks','markersize',markersize,'linewidth',linewidth);
    plot([-q_dwba_t_xy;q_dwba_t_xy],[r.q_dwba_t(:,3);r.q_dwba_t(:,3)],'ro','markersize',markersize,'linewidth',linewidth);
    plot([-q_ba_xy;q_ba_xy],[r.q_ba(:,3);r.q_ba(:,3)],'g^','markersize',markersize,'linewidth',linewidth);
    legend('Relfected','Transmitted','Born');
    xlabel(['q_r (',char(197),'^{-1})']);
    ylabel(['q_z (',char(197),'^{-1})']);
end
hold off; box on;
ylims = get(gca,'ylim');
set(gca,'ylim',[0,ylims(2)]);
% label hkl
hCheckbox = findall(hFigImana,'tag','gixs_CheckboxDiffPosLabelHKL');
checked = get(hCheckbox,'value');
if checked == 0, return; end
% get plot options
labelsingleton = get(findall(hFigImana,'tag','gixs_PopupmenuDiffPosLabelHKLSingleton'),'value');
labelbeam = get(findall(hFigImana,'tag','gixs_PopupmenuDiffPosLabelHKLBeam'),'value');
labelfigside = get(findall(hFigImana,'tag','gixs_PopupmenuDiffPosLabelHKLFigSide'),'value');
fontsize = 7;
if labelfigside == 1
    side_sign = -1;
else
    side_sign = 1;
end
if strcmpi(plotflagstr,'angle')
    xpos_offset = max(r.angle_t(:,1))/20;
    ypos_offset = 0;%abs(max(r.angle_t(:,2))/100);    
    for ii=1:length(r.miller)
        if labelsingleton == 1
            hkl_str =num2str(r.miller{ii}(end,:),'%g%g%g');
        else
            hkl_str = cellfun(@(x)num2str(x,'%g%g%g'),r.miller(ii),'UniformOutput',0);
        end
        if labelbeam == 1 || labelbeam == 4 || labelbeam == 5
            text(side_sign*r.angle_t(ii,1)+xpos_offset,r.angle_t(ii,2),hkl_str,'color','r','fontsize',fontsize,'HorizontalAlignment','left');
        end
        if labelbeam == 2 || labelbeam == 4 || labelbeam == 5
            text(side_sign*r.angle_r(ii,1)-xpos_offset,r.angle_r(ii,2),hkl_str,'color','k','fontsize',fontsize,'HorizontalAlignment','right');
        end
        if labelbeam == 3 || labelbeam == 5 
            text(side_sign*r.angle_ba(ii,1)+xpos_offset,r.angle_ba(ii,2)+ypos_offset,hkl_str,'color','g','fontsize',fontsize,'HorizontalAlignment','left');
        end        
    end
else
    xpos_offset = max(r.q_dwba_t(:,2))/20;
    ypos_offset = abs(max(r.q_dwba_t(:,3))/100);        
    for ii=1:length(r.miller)
        if labelsingleton == 1
            hkl_str = num2str(r.miller{ii}(end,:),'%g%g%g');
        else
            hkl_str = cellfun(@(x)num2str(x,'%g%g%g'),r.miller(ii),'UniformOutput',0);
        end
        if labelbeam == 1 || labelbeam == 4 || labelbeam == 5
            text(side_sign*r.q_dwba_t(ii,2)+xpos_offset,r.q_dwba_t(ii,3),hkl_str,'color','r','fontsize',fontsize,'HorizontalAlignment','left')
        end
        if labelbeam == 2 || labelbeam == 4 || labelbeam == 5
            text(side_sign*r.q_dwba_r(ii,2)-xpos_offset,r.q_dwba_r(ii,3),hkl_str,'color','k','fontsize',fontsize,'HorizontalAlignment','right')
        end
        if labelbeam == 3 || labelbeam == 5
            text(side_sign*r.q_ba(ii,2)+xpos_offset,r.q_ba(ii,3)+ypos_offset,hkl_str,'color','g','fontsize',fontsize,'HorizontalAlignment','left')
        end        
    end    
end
end


function gixs_PushbuttonDiffPosPlotOnImageFcn(~,~)
hFigGIXS = findall(0,'Tag','gixs_fig');
hFigImana = findall(0,'Tag','gixs_fig_imana');
udata = get(hFigGIXS,'UserData');
if isequal(udata.selection,0), return; end      % return if no image
gdata = udata.gdata(udata.selection);
if isempty(gdata.TwoThetaMap),return; end       % return if no relfeciton maps
r = udata.diffractionPos.result;
if isempty(r), return; end                      % return if no diff positions
hTable = findall(hFigImana,'tag','gixs_TableDiffPos');
tdata = get(hTable,'Data');
idx = cell2mat(tdata(:,1));
if nnz(idx) == 0, return; end           % return if no positions selected
r.miller(~idx) = [];
r.angle_t(~idx,:) = [];
r.angle_r(~idx,:) = [];
% r.q_dwba_t(~idx,:) = [];
% r.q_dwba_r(~idx,:) = [];
% r.q_ba(~idx,:) = [];
% --- map out pixel indices using angle values
nOfPts = size(r.angle_t,1);
pos_tL = [];
pos_tR = [];
pos_rL = [];
pos_rR = [];
idx_miller_tL = [];
idx_miller_tR = [];
idx_miller_rL = [];
idx_miller_rR = [];

hwarndlg = warndlg('Mapping the diffraction points onto the image ...','Plot Diffraction Warning','modal');
for ii=1:nOfPts
    % transimssion
    pos_tL_tmp = mappixel(gdata,[-r.angle_t(ii,1),r.angle_t(ii,2)],[7,8],1,[]);
    pos_tR_tmp = mappixel(gdata,r.angle_t(ii,:),[7,8],1,[]);
    if ~isempty(pos_tL_tmp)
        pos_tL = [pos_tL;pos_tL_tmp];
        idx_miller_tL = [idx_miller_tL;ii];
    end
    if ~isempty(pos_tR_tmp)
        pos_tR = [pos_tR;pos_tR_tmp];
        idx_miller_tR = [idx_miller_tR;ii];
    end
    % relfection
    pos_rL_tmp = mappixel(gdata,[-r.angle_r(ii,1),r.angle_r(ii,2)],[7,8],1,[]);
    pos_rR_tmp = mappixel(gdata,r.angle_r(ii,:),[7,8],1,[]);
    if ~isempty(pos_rL_tmp)
        pos_rL = [pos_rL;pos_rL_tmp];
        idx_miller_rL = [idx_miller_rL;ii];
    end
    if ~isempty(pos_rR_tmp)
        pos_rR = [pos_rR;pos_rR_tmp];
        idx_miller_rR = [idx_miller_rR;ii];
    end
end
pos_t = [pos_tL;pos_tR];
pos_r = [pos_rL;pos_rR];
miller_tL = r.miller(idx_miller_tL);
miller_tR = r.miller(idx_miller_tR);
miller_rL = r.miller(idx_miller_rL);
miller_rR = r.miller(idx_miller_rR);
delete(hwarndlg);

% plot
holdon = get(findall(hFigImana,'tag','gixs_PopupmenuDiffPosLabelPlotOnImageHold'),'value');
if ~ishandle(gdata.FigHandle) || ~strcmpi(get(gdata.FigHandle,'type'),'figure') || holdon == 2
    replot(udata); 
    figure(gdata.FigHandle); 
    hold off;
else
    figure(gdata.FigHandle);
    hold on;
end
linewidth = 1;
markersize = 6;
if ~isempty(pos_t)
    line(pos_t(:,1),pos_t(:,2),...
        'tag',['gixsdata:diffpos:',gdata.ImFileName],...
        'Parent',get(findall(gdata.FigHandle,'tag',['gixsdata:img:',gdata.ImFileName]),'parent'),...
        'marker','o','LineStyle','none','color','r',...
        'markersize',markersize,'linewidth',linewidth);
end
if ~isempty(pos_r)
    line(pos_r(:,1),pos_r(:,2),...
        'tag',['gixsdata:diffpos:',gdata.ImFileName],...
        'Parent',get(findall(gdata.FigHandle,'tag',['gixsdata:img:',gdata.ImFileName]),'parent'),...
        'marker','s','LineStyle','none','color','w',...
        'markersize',markersize,'linewidth',linewidth);
end
% label hkl
hCheckbox = findall(hFigImana,'tag','gixs_CheckboxDiffPosLabelHKL');
checked = get(hCheckbox,'value');
if checked == 0, return; end
% get plot options
labelsingleton = get(findall(hFigImana,'tag','gixs_PopupmenuDiffPosLabelHKLSingleton'),'value');
labelbeam = get(findall(hFigImana,'tag','gixs_PopupmenuDiffPosLabelHKLBeam'),'value');
if labelbeam ~= 1 && labelbeam ~= 2 && labelbeam ~= 4    % do not label BA
    labelbeam = 4;
end
labelfigside = get(findall(hFigImana,'tag','gixs_PopupmenuDiffPosLabelHKLFigSide'),'value');
fontsize = 7;
xpos_offset = 15;
if labelfigside == 1
    if (labelbeam == 1 || labelbeam == 4) && ~isempty(pos_tL)
        for ii=1:length(miller_tL)
            if labelsingleton == 1
                hkl_str =num2str(miller_tL{ii}(end,:),'%g%g%g');
            else
                hkl_str = cellfun(@(x)num2str(x,'%g%g%g'),miller_tL(ii),'UniformOutput',0);
            end
            text(pos_tL(ii,1)+xpos_offset,pos_tL(ii,2),hkl_str,...
                'color','r','fontsize',fontsize,'HorizontalAlignment','left',...
                'tag',['gixsdata:hkllabel:',gdata.ImFileName]);            
        end
    end
    if (labelbeam == 2 || labelbeam == 4) && ~isempty(pos_rL)
        for ii=1:length(miller_rL)
            if labelsingleton == 1
                hkl_str =num2str(miller_rL{ii}(end,:),'%g%g%g');
            else            
                hkl_str = cellfun(@(x)num2str(x,'%g%g%g'),miller_rL(ii),'UniformOutput',0);
            end
            text(pos_rL(ii,1)-xpos_offset,pos_rL(ii,2),hkl_str,...
                'color','w','fontsize',fontsize,'HorizontalAlignment','right',...
                'tag',['gixsdata:hkllabel:',gdata.ImFileName]);
        end
    end
else
    if (labelbeam == 1 || labelbeam == 4) && ~isempty(pos_tR)
        for ii=1:length(miller_tR)
            if labelsingleton == 1
                hkl_str =num2str(miller_tR{ii}(end,:),'%g%g%g');
            else
                hkl_str = cellfun(@(x)num2str(x,'%g%g%g'),miller_tR(ii),'UniformOutput',0); 
            end
            text(pos_tR(ii,1)+xpos_offset,pos_tR(ii,2),hkl_str,...
                'color','r','fontsize',fontsize,'HorizontalAlignment','left',...
                'tag',['gixsdata:hkllabel:',gdata.ImFileName]);                
        end
    end
    if (labelbeam == 2 || labelbeam == 4) && ~isempty(pos_rR)
        for ii=1:length(miller_rR)
            if labelsingleton == 1
                hkl_str =num2str(miller_rR{ii}(end,:),'%g%g%g');
            else            
                hkl_str = cellfun(@(x)num2str(x,'%g%g%g'),miller_rR(ii),'UniformOutput',0);
            end
            text(pos_rR(ii,1)-xpos_offset,pos_rR(ii,2),hkl_str,...
                'color','w','fontsize',fontsize,'HorizontalAlignment','right',...
                'tag',['gixsdata:hkllabel:',gdata.ImFileName]);                
        end
    end    
end
hold off;
end


function [idx_imm,load_choice]=select_imm_dlg(fname)
hFigGIXS = findall(0,'Tag','gixs_fig');
pos = get(hFigGIXS,'Position');
pos_width = 600;
pos_height = 110;
pos_dlg = [pos(1)+pos(3)/2-pos_width/2, pos(2)+pos(4)/3-pos_height/2, pos_width, pos_height];
hIMMdlg = dialog('Position',pos_dlg,...
    'Name','Specify IMM image indices to load ...',...
    'CloseRequestFcn',@imm_cancel_callback);
uicontrol('Parent',hIMMdlg,...
           'Style','text',...
           'HorizontalAlignment','center',...
           'Position',[5 pos_height-25 pos_width-10 20],...
           'String',fname);
uicontrol('Parent',hIMMdlg,...
           'Style','text',...
           'HorizontalAlignment','right',...           
           'Position',[pos_width/2-100-105 pos_height-50 100 20],...
           'String','IMM file indices');
uicontrol('Parent',hIMMdlg,...
           'Style','edit',...
           'HorizontalAlignment','left',...
           'Position',[pos_width/2-100 pos_height-50 200 20],...
           'String','1',...
           'Tooltip','Can use matlab vector creation operators. The index vector can be of any length, and all selected images will be loaded for summing but only the 1st 20 images will be individually displayed.',...
            'Callback',@imm_edit_callback);
uicontrol('Parent',hIMMdlg,...
           'Style','text',...
           'HorizontalAlignment','right',...           
           'Position',[pos_width/2-100-105 pos_height-75 100 20],...
           'String','Load Option');        
uicontrol('Parent',hIMMdlg,...
           'Style','popup',...
           'Position',[pos_width/2-100 pos_height-75 200 20],...
           'Value',1,...
           'String',{'Individual';'Summed';'Individual & Summed'},...
           'Callback',@imm_popupmenu_callback);       
uicontrol('Parent',hIMMdlg,...
            'Style','pushbutton',...
           'Position',[5 5 95 20],...
           'String','Load',...
           'Callback','delete(gcf)');
uicontrol('Parent',hIMMdlg,...
            'Style','pushbutton',...
           'Position',[105 5 95 20],...
           'String','Cancel',...
           'Callback',@imm_cancel_callback);       
idx_imm = 1;
load_choice = 1;
uiwait(hIMMdlg);
    function imm_popupmenu_callback(popup,event)
        load_choice = popup.Value;
    end
    function imm_edit_callback(editbox,event)
        idx_imm = sort(str2num(editbox.String));
        if isempty(idx_imm) || any(~isfinite(idx_imm)) ||  ~isequal(idx_imm,round(idx_imm)) || any(idx_imm<=0)
            editbox.String = 'NaN';
            idx_imm = NaN;
        end
    end
    function imm_cancel_callback(cancel,event)
        idx_imm = NaN;
        delete(gcf);
    end
end


function gixsimana_CloseRequestFcn(~,~)
hFigImana = findall(0,'Tag','gixs_fig_imana');
set(hFigImana,'visible','off');
%delete(hFigImana);
end